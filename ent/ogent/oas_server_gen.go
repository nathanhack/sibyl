// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddTicker implements addTicker operation.
	//
	// Queue for adding entities by ticker.
	//
	// POST /rest/entities/add/{ticker}
	AddTicker(ctx context.Context, params AddTickerParams) error
	// CreateBarGroup implements createBarGroup operation.
	//
	// Creates a new BarGroup and persists it to storage.
	//
	// POST /rest/bar-groups
	CreateBarGroup(ctx context.Context, req *CreateBarGroupReq) (CreateBarGroupRes, error)
	// CreateBarRecord implements createBarRecord operation.
	//
	// Creates a new BarRecord and persists it to storage.
	//
	// POST /rest/bar-records
	CreateBarRecord(ctx context.Context, req *CreateBarRecordReq) (CreateBarRecordRes, error)
	// CreateBarTimeRange implements createBarTimeRange operation.
	//
	// Creates a new BarTimeRange and persists it to storage.
	//
	// POST /rest/bar-time-ranges
	CreateBarTimeRange(ctx context.Context, req *CreateBarTimeRangeReq) (CreateBarTimeRangeRes, error)
	// CreateDataSource implements createDataSource operation.
	//
	// Creates a new DataSource and persists it to storage.
	//
	// POST /rest/data-sources
	CreateDataSource(ctx context.Context, req *CreateDataSourceReq) (CreateDataSourceRes, error)
	// CreateDividend implements createDividend operation.
	//
	// Creates a new Dividend and persists it to storage.
	//
	// POST /rest/dividends
	CreateDividend(ctx context.Context, req *CreateDividendReq) (CreateDividendRes, error)
	// CreateEntity implements createEntity operation.
	//
	// Creates a new Entity and persists it to storage.
	//
	// POST /rest/entities
	CreateEntity(ctx context.Context, req *CreateEntityReq) (CreateEntityRes, error)
	// CreateExchange implements createExchange operation.
	//
	// Creates a new Exchange and persists it to storage.
	//
	// POST /rest/exchanges
	CreateExchange(ctx context.Context, req *CreateExchangeReq) (CreateExchangeRes, error)
	// CreateFinancial implements createFinancial operation.
	//
	// Creates a new Financial and persists it to storage.
	//
	// POST /rest/financials
	CreateFinancial(ctx context.Context, req *CreateFinancialReq) (CreateFinancialRes, error)
	// CreateInterval implements createInterval operation.
	//
	// Creates a new Interval and persists it to storage.
	//
	// POST /rest/intervals
	CreateInterval(ctx context.Context, req *CreateIntervalReq) (CreateIntervalRes, error)
	// CreateMarketHours implements createMarketHours operation.
	//
	// Creates a new MarketHours and persists it to storage.
	//
	// POST /rest/market-hours
	CreateMarketHours(ctx context.Context, req *CreateMarketHoursReq) (CreateMarketHoursRes, error)
	// CreateMarketInfo implements createMarketInfo operation.
	//
	// Creates a new MarketInfo and persists it to storage.
	//
	// POST /rest/market-infos
	CreateMarketInfo(ctx context.Context, req *CreateMarketInfoReq) (CreateMarketInfoRes, error)
	// CreateSplit implements createSplit operation.
	//
	// Creates a new Split and persists it to storage.
	//
	// POST /rest/splits
	CreateSplit(ctx context.Context, req *CreateSplitReq) (CreateSplitRes, error)
	// CreateTradeCondition implements createTradeCondition operation.
	//
	// Creates a new TradeCondition and persists it to storage.
	//
	// POST /rest/trade-conditions
	CreateTradeCondition(ctx context.Context, req *CreateTradeConditionReq) (CreateTradeConditionRes, error)
	// CreateTradeCorrection implements createTradeCorrection operation.
	//
	// Creates a new TradeCorrection and persists it to storage.
	//
	// POST /rest/trade-corrections
	CreateTradeCorrection(ctx context.Context, req *CreateTradeCorrectionReq) (CreateTradeCorrectionRes, error)
	// CreateTradeRecord implements createTradeRecord operation.
	//
	// Creates a new TradeRecord and persists it to storage.
	//
	// POST /rest/trade-records
	CreateTradeRecord(ctx context.Context, req *CreateTradeRecordReq) (CreateTradeRecordRes, error)
	// CreateTradeTimeRange implements createTradeTimeRange operation.
	//
	// Creates a new TradeTimeRange and persists it to storage.
	//
	// POST /rest/trade-time-ranges
	CreateTradeTimeRange(ctx context.Context, req *CreateTradeTimeRangeReq) (CreateTradeTimeRangeRes, error)
	// DeleteBarGroup implements deleteBarGroup operation.
	//
	// Deletes the BarGroup with the requested ID.
	//
	// DELETE /rest/bar-groups/{id}
	DeleteBarGroup(ctx context.Context, params DeleteBarGroupParams) (DeleteBarGroupRes, error)
	// DeleteBarRecord implements deleteBarRecord operation.
	//
	// Deletes the BarRecord with the requested ID.
	//
	// DELETE /rest/bar-records/{id}
	DeleteBarRecord(ctx context.Context, params DeleteBarRecordParams) (DeleteBarRecordRes, error)
	// DeleteBarTimeRange implements deleteBarTimeRange operation.
	//
	// Deletes the BarTimeRange with the requested ID.
	//
	// DELETE /rest/bar-time-ranges/{id}
	DeleteBarTimeRange(ctx context.Context, params DeleteBarTimeRangeParams) (DeleteBarTimeRangeRes, error)
	// DeleteDataSource implements deleteDataSource operation.
	//
	// Deletes the DataSource with the requested ID.
	//
	// DELETE /rest/data-sources/{id}
	DeleteDataSource(ctx context.Context, params DeleteDataSourceParams) (DeleteDataSourceRes, error)
	// DeleteDividend implements deleteDividend operation.
	//
	// Deletes the Dividend with the requested ID.
	//
	// DELETE /rest/dividends/{id}
	DeleteDividend(ctx context.Context, params DeleteDividendParams) (DeleteDividendRes, error)
	// DeleteEntity implements deleteEntity operation.
	//
	// Deletes the Entity with the requested ID.
	//
	// DELETE /rest/entities/{id}
	DeleteEntity(ctx context.Context, params DeleteEntityParams) (DeleteEntityRes, error)
	// DeleteExchange implements deleteExchange operation.
	//
	// Deletes the Exchange with the requested ID.
	//
	// DELETE /rest/exchanges/{id}
	DeleteExchange(ctx context.Context, params DeleteExchangeParams) (DeleteExchangeRes, error)
	// DeleteFinancial implements deleteFinancial operation.
	//
	// Deletes the Financial with the requested ID.
	//
	// DELETE /rest/financials/{id}
	DeleteFinancial(ctx context.Context, params DeleteFinancialParams) (DeleteFinancialRes, error)
	// DeleteInterval implements deleteInterval operation.
	//
	// Deletes the Interval with the requested ID.
	//
	// DELETE /rest/intervals/{id}
	DeleteInterval(ctx context.Context, params DeleteIntervalParams) (DeleteIntervalRes, error)
	// DeleteMarketHours implements deleteMarketHours operation.
	//
	// Deletes the MarketHours with the requested ID.
	//
	// DELETE /rest/market-hours/{id}
	DeleteMarketHours(ctx context.Context, params DeleteMarketHoursParams) (DeleteMarketHoursRes, error)
	// DeleteMarketInfo implements deleteMarketInfo operation.
	//
	// Deletes the MarketInfo with the requested ID.
	//
	// DELETE /rest/market-infos/{id}
	DeleteMarketInfo(ctx context.Context, params DeleteMarketInfoParams) (DeleteMarketInfoRes, error)
	// DeleteSplit implements deleteSplit operation.
	//
	// Deletes the Split with the requested ID.
	//
	// DELETE /rest/splits/{id}
	DeleteSplit(ctx context.Context, params DeleteSplitParams) (DeleteSplitRes, error)
	// DeleteTradeCondition implements deleteTradeCondition operation.
	//
	// Deletes the TradeCondition with the requested ID.
	//
	// DELETE /rest/trade-conditions/{id}
	DeleteTradeCondition(ctx context.Context, params DeleteTradeConditionParams) (DeleteTradeConditionRes, error)
	// DeleteTradeCorrection implements deleteTradeCorrection operation.
	//
	// Deletes the TradeCorrection with the requested ID.
	//
	// DELETE /rest/trade-corrections/{id}
	DeleteTradeCorrection(ctx context.Context, params DeleteTradeCorrectionParams) (DeleteTradeCorrectionRes, error)
	// DeleteTradeRecord implements deleteTradeRecord operation.
	//
	// Deletes the TradeRecord with the requested ID.
	//
	// DELETE /rest/trade-records/{id}
	DeleteTradeRecord(ctx context.Context, params DeleteTradeRecordParams) (DeleteTradeRecordRes, error)
	// DeleteTradeTimeRange implements deleteTradeTimeRange operation.
	//
	// Deletes the TradeTimeRange with the requested ID.
	//
	// DELETE /rest/trade-time-ranges/{id}
	DeleteTradeTimeRange(ctx context.Context, params DeleteTradeTimeRangeParams) (DeleteTradeTimeRangeRes, error)
	// ListBarGroup implements listBarGroup operation.
	//
	// List BarGroups.
	//
	// GET /rest/bar-groups
	ListBarGroup(ctx context.Context, params ListBarGroupParams) (ListBarGroupRes, error)
	// ListBarGroupRecords implements listBarGroupRecords operation.
	//
	// List attached Records.
	//
	// GET /rest/bar-groups/{id}/records
	ListBarGroupRecords(ctx context.Context, params ListBarGroupRecordsParams) (ListBarGroupRecordsRes, error)
	// ListBarRecord implements listBarRecord operation.
	//
	// List BarRecords.
	//
	// GET /rest/bar-records
	ListBarRecord(ctx context.Context, params ListBarRecordParams) (ListBarRecordRes, error)
	// ListBarTimeRange implements listBarTimeRange operation.
	//
	// List BarTimeRanges.
	//
	// GET /rest/bar-time-ranges
	ListBarTimeRange(ctx context.Context, params ListBarTimeRangeParams) (ListBarTimeRangeRes, error)
	// ListBarTimeRangeGroups implements listBarTimeRangeGroups operation.
	//
	// List attached Groups.
	//
	// GET /rest/bar-time-ranges/{id}/groups
	ListBarTimeRangeGroups(ctx context.Context, params ListBarTimeRangeGroupsParams) (ListBarTimeRangeGroupsRes, error)
	// ListDataSource implements listDataSource operation.
	//
	// List DataSources.
	//
	// GET /rest/data-sources
	ListDataSource(ctx context.Context, params ListDataSourceParams) (ListDataSourceRes, error)
	// ListDataSourceIntervals implements listDataSourceIntervals operation.
	//
	// List attached Intervals.
	//
	// GET /rest/data-sources/{id}/intervals
	ListDataSourceIntervals(ctx context.Context, params ListDataSourceIntervalsParams) (ListDataSourceIntervalsRes, error)
	// ListDividend implements listDividend operation.
	//
	// List Dividends.
	//
	// GET /rest/dividends
	ListDividend(ctx context.Context, params ListDividendParams) (ListDividendRes, error)
	// ListDividendStock implements listDividendStock operation.
	//
	// List attached Stocks.
	//
	// GET /rest/dividends/{id}/stock
	ListDividendStock(ctx context.Context, params ListDividendStockParams) (ListDividendStockRes, error)
	// ListEntity implements listEntity operation.
	//
	// List Entities.
	//
	// GET /rest/entities
	ListEntity(ctx context.Context, params ListEntityParams) (ListEntityRes, error)
	// ListEntityDividends implements listEntityDividends operation.
	//
	// List attached Dividends.
	//
	// GET /rest/entities/{id}/dividends
	ListEntityDividends(ctx context.Context, params ListEntityDividendsParams) (ListEntityDividendsRes, error)
	// ListEntityExchanges implements listEntityExchanges operation.
	//
	// List attached Exchanges.
	//
	// GET /rest/entities/{id}/exchanges
	ListEntityExchanges(ctx context.Context, params ListEntityExchangesParams) (ListEntityExchangesRes, error)
	// ListEntityFinancials implements listEntityFinancials operation.
	//
	// List attached Financials.
	//
	// GET /rest/entities/{id}/financials
	ListEntityFinancials(ctx context.Context, params ListEntityFinancialsParams) (ListEntityFinancialsRes, error)
	// ListEntityIntervals implements listEntityIntervals operation.
	//
	// List attached Intervals.
	//
	// GET /rest/entities/{id}/intervals
	ListEntityIntervals(ctx context.Context, params ListEntityIntervalsParams) (ListEntityIntervalsRes, error)
	// ListEntitySplits implements listEntitySplits operation.
	//
	// List attached Splits.
	//
	// GET /rest/entities/{id}/splits
	ListEntitySplits(ctx context.Context, params ListEntitySplitsParams) (ListEntitySplitsRes, error)
	// ListExchange implements listExchange operation.
	//
	// List Exchanges.
	//
	// GET /rest/exchanges
	ListExchange(ctx context.Context, params ListExchangeParams) (ListExchangeRes, error)
	// ListExchangeStocks implements listExchangeStocks operation.
	//
	// List attached Stocks.
	//
	// GET /rest/exchanges/{id}/stocks
	ListExchangeStocks(ctx context.Context, params ListExchangeStocksParams) (ListExchangeStocksRes, error)
	// ListFinancial implements listFinancial operation.
	//
	// List Financials.
	//
	// GET /rest/financials
	ListFinancial(ctx context.Context, params ListFinancialParams) (ListFinancialRes, error)
	// ListFinancialStock implements listFinancialStock operation.
	//
	// List attached Stocks.
	//
	// GET /rest/financials/{id}/stock
	ListFinancialStock(ctx context.Context, params ListFinancialStockParams) (ListFinancialStockRes, error)
	// ListInterval implements listInterval operation.
	//
	// List Intervals.
	//
	// GET /rest/intervals
	ListInterval(ctx context.Context, params ListIntervalParams) (ListIntervalRes, error)
	// ListIntervalBars implements listIntervalBars operation.
	//
	// List attached Bars.
	//
	// GET /rest/intervals/{id}/bars
	ListIntervalBars(ctx context.Context, params ListIntervalBarsParams) (ListIntervalBarsRes, error)
	// ListIntervalTrades implements listIntervalTrades operation.
	//
	// List attached Trades.
	//
	// GET /rest/intervals/{id}/trades
	ListIntervalTrades(ctx context.Context, params ListIntervalTradesParams) (ListIntervalTradesRes, error)
	// ListMarketHours implements listMarketHours operation.
	//
	// List MarketHours.
	//
	// GET /rest/market-hours
	ListMarketHours(ctx context.Context, params ListMarketHoursParams) (ListMarketHoursRes, error)
	// ListMarketInfo implements listMarketInfo operation.
	//
	// List MarketInfos.
	//
	// GET /rest/market-infos
	ListMarketInfo(ctx context.Context, params ListMarketInfoParams) (ListMarketInfoRes, error)
	// ListMarketInfoHours implements listMarketInfoHours operation.
	//
	// List attached Hours.
	//
	// GET /rest/market-infos/{id}/hours
	ListMarketInfoHours(ctx context.Context, params ListMarketInfoHoursParams) (ListMarketInfoHoursRes, error)
	// ListSplit implements listSplit operation.
	//
	// List Splits.
	//
	// GET /rest/splits
	ListSplit(ctx context.Context, params ListSplitParams) (ListSplitRes, error)
	// ListTradeCondition implements listTradeCondition operation.
	//
	// List TradeConditions.
	//
	// GET /rest/trade-conditions
	ListTradeCondition(ctx context.Context, params ListTradeConditionParams) (ListTradeConditionRes, error)
	// ListTradeConditionRecord implements listTradeConditionRecord operation.
	//
	// List attached Records.
	//
	// GET /rest/trade-conditions/{id}/record
	ListTradeConditionRecord(ctx context.Context, params ListTradeConditionRecordParams) (ListTradeConditionRecordRes, error)
	// ListTradeCorrection implements listTradeCorrection operation.
	//
	// List TradeCorrections.
	//
	// GET /rest/trade-corrections
	ListTradeCorrection(ctx context.Context, params ListTradeCorrectionParams) (ListTradeCorrectionRes, error)
	// ListTradeCorrectionRecord implements listTradeCorrectionRecord operation.
	//
	// List attached Records.
	//
	// GET /rest/trade-corrections/{id}/record
	ListTradeCorrectionRecord(ctx context.Context, params ListTradeCorrectionRecordParams) (ListTradeCorrectionRecordRes, error)
	// ListTradeRecord implements listTradeRecord operation.
	//
	// List TradeRecords.
	//
	// GET /rest/trade-records
	ListTradeRecord(ctx context.Context, params ListTradeRecordParams) (ListTradeRecordRes, error)
	// ListTradeRecordConditions implements listTradeRecordConditions operation.
	//
	// List attached Conditions.
	//
	// GET /rest/trade-records/{id}/conditions
	ListTradeRecordConditions(ctx context.Context, params ListTradeRecordConditionsParams) (ListTradeRecordConditionsRes, error)
	// ListTradeRecordCorrection implements listTradeRecordCorrection operation.
	//
	// List attached Corrections.
	//
	// GET /rest/trade-records/{id}/correction
	ListTradeRecordCorrection(ctx context.Context, params ListTradeRecordCorrectionParams) (ListTradeRecordCorrectionRes, error)
	// ListTradeRecordExchange implements listTradeRecordExchange operation.
	//
	// List attached Exchanges.
	//
	// GET /rest/trade-records/{id}/exchange
	ListTradeRecordExchange(ctx context.Context, params ListTradeRecordExchangeParams) (ListTradeRecordExchangeRes, error)
	// ListTradeTimeRange implements listTradeTimeRange operation.
	//
	// List TradeTimeRanges.
	//
	// GET /rest/trade-time-ranges
	ListTradeTimeRange(ctx context.Context, params ListTradeTimeRangeParams) (ListTradeTimeRangeRes, error)
	// ListTradeTimeRangeRecords implements listTradeTimeRangeRecords operation.
	//
	// List attached Records.
	//
	// GET /rest/trade-time-ranges/{id}/records
	ListTradeTimeRangeRecords(ctx context.Context, params ListTradeTimeRangeRecordsParams) (ListTradeTimeRangeRecordsRes, error)
	// ReadBarGroup implements readBarGroup operation.
	//
	// Finds the BarGroup with the requested ID and returns it.
	//
	// GET /rest/bar-groups/{id}
	ReadBarGroup(ctx context.Context, params ReadBarGroupParams) (ReadBarGroupRes, error)
	// ReadBarGroupTimeRange implements readBarGroupTimeRange operation.
	//
	// Find the attached BarTimeRange of the BarGroup with the given ID.
	//
	// GET /rest/bar-groups/{id}/time-range
	ReadBarGroupTimeRange(ctx context.Context, params ReadBarGroupTimeRangeParams) (ReadBarGroupTimeRangeRes, error)
	// ReadBarRecord implements readBarRecord operation.
	//
	// Finds the BarRecord with the requested ID and returns it.
	//
	// GET /rest/bar-records/{id}
	ReadBarRecord(ctx context.Context, params ReadBarRecordParams) (ReadBarRecordRes, error)
	// ReadBarRecordGroup implements readBarRecordGroup operation.
	//
	// Find the attached BarGroup of the BarRecord with the given ID.
	//
	// GET /rest/bar-records/{id}/group
	ReadBarRecordGroup(ctx context.Context, params ReadBarRecordGroupParams) (ReadBarRecordGroupRes, error)
	// ReadBarTimeRange implements readBarTimeRange operation.
	//
	// Finds the BarTimeRange with the requested ID and returns it.
	//
	// GET /rest/bar-time-ranges/{id}
	ReadBarTimeRange(ctx context.Context, params ReadBarTimeRangeParams) (ReadBarTimeRangeRes, error)
	// ReadBarTimeRangeInterval implements readBarTimeRangeInterval operation.
	//
	// Find the attached Interval of the BarTimeRange with the given ID.
	//
	// GET /rest/bar-time-ranges/{id}/interval
	ReadBarTimeRangeInterval(ctx context.Context, params ReadBarTimeRangeIntervalParams) (ReadBarTimeRangeIntervalRes, error)
	// ReadDataSource implements readDataSource operation.
	//
	// Finds the DataSource with the requested ID and returns it.
	//
	// GET /rest/data-sources/{id}
	ReadDataSource(ctx context.Context, params ReadDataSourceParams) (ReadDataSourceRes, error)
	// ReadDividend implements readDividend operation.
	//
	// Finds the Dividend with the requested ID and returns it.
	//
	// GET /rest/dividends/{id}
	ReadDividend(ctx context.Context, params ReadDividendParams) (ReadDividendRes, error)
	// ReadEntity implements readEntity operation.
	//
	// Finds the Entity with the requested ID and returns it.
	//
	// GET /rest/entities/{id}
	ReadEntity(ctx context.Context, params ReadEntityParams) (ReadEntityRes, error)
	// ReadExchange implements readExchange operation.
	//
	// Finds the Exchange with the requested ID and returns it.
	//
	// GET /rest/exchanges/{id}
	ReadExchange(ctx context.Context, params ReadExchangeParams) (ReadExchangeRes, error)
	// ReadFinancial implements readFinancial operation.
	//
	// Finds the Financial with the requested ID and returns it.
	//
	// GET /rest/financials/{id}
	ReadFinancial(ctx context.Context, params ReadFinancialParams) (ReadFinancialRes, error)
	// ReadInterval implements readInterval operation.
	//
	// Finds the Interval with the requested ID and returns it.
	//
	// GET /rest/intervals/{id}
	ReadInterval(ctx context.Context, params ReadIntervalParams) (ReadIntervalRes, error)
	// ReadIntervalDataSource implements readIntervalDataSource operation.
	//
	// Find the attached DataSource of the Interval with the given ID.
	//
	// GET /rest/intervals/{id}/data-source
	ReadIntervalDataSource(ctx context.Context, params ReadIntervalDataSourceParams) (ReadIntervalDataSourceRes, error)
	// ReadIntervalStock implements readIntervalStock operation.
	//
	// Find the attached Entity of the Interval with the given ID.
	//
	// GET /rest/intervals/{id}/stock
	ReadIntervalStock(ctx context.Context, params ReadIntervalStockParams) (ReadIntervalStockRes, error)
	// ReadMarketHours implements readMarketHours operation.
	//
	// Finds the MarketHours with the requested ID and returns it.
	//
	// GET /rest/market-hours/{id}
	ReadMarketHours(ctx context.Context, params ReadMarketHoursParams) (ReadMarketHoursRes, error)
	// ReadMarketHoursMarketInfo implements readMarketHoursMarketInfo operation.
	//
	// Find the attached MarketInfo of the MarketHours with the given ID.
	//
	// GET /rest/market-hours/{id}/market-info
	ReadMarketHoursMarketInfo(ctx context.Context, params ReadMarketHoursMarketInfoParams) (ReadMarketHoursMarketInfoRes, error)
	// ReadMarketInfo implements readMarketInfo operation.
	//
	// Finds the MarketInfo with the requested ID and returns it.
	//
	// GET /rest/market-infos/{id}
	ReadMarketInfo(ctx context.Context, params ReadMarketInfoParams) (ReadMarketInfoRes, error)
	// ReadSplit implements readSplit operation.
	//
	// Finds the Split with the requested ID and returns it.
	//
	// GET /rest/splits/{id}
	ReadSplit(ctx context.Context, params ReadSplitParams) (ReadSplitRes, error)
	// ReadSplitStock implements readSplitStock operation.
	//
	// Find the attached Entity of the Split with the given ID.
	//
	// GET /rest/splits/{id}/stock
	ReadSplitStock(ctx context.Context, params ReadSplitStockParams) (ReadSplitStockRes, error)
	// ReadTradeCondition implements readTradeCondition operation.
	//
	// Finds the TradeCondition with the requested ID and returns it.
	//
	// GET /rest/trade-conditions/{id}
	ReadTradeCondition(ctx context.Context, params ReadTradeConditionParams) (ReadTradeConditionRes, error)
	// ReadTradeCorrection implements readTradeCorrection operation.
	//
	// Finds the TradeCorrection with the requested ID and returns it.
	//
	// GET /rest/trade-corrections/{id}
	ReadTradeCorrection(ctx context.Context, params ReadTradeCorrectionParams) (ReadTradeCorrectionRes, error)
	// ReadTradeRecord implements readTradeRecord operation.
	//
	// Finds the TradeRecord with the requested ID and returns it.
	//
	// GET /rest/trade-records/{id}
	ReadTradeRecord(ctx context.Context, params ReadTradeRecordParams) (ReadTradeRecordRes, error)
	// ReadTradeRecordTimeRange implements readTradeRecordTimeRange operation.
	//
	// Find the attached TradeTimeRange of the TradeRecord with the given ID.
	//
	// GET /rest/trade-records/{id}/time-range
	ReadTradeRecordTimeRange(ctx context.Context, params ReadTradeRecordTimeRangeParams) (ReadTradeRecordTimeRangeRes, error)
	// ReadTradeTimeRange implements readTradeTimeRange operation.
	//
	// Finds the TradeTimeRange with the requested ID and returns it.
	//
	// GET /rest/trade-time-ranges/{id}
	ReadTradeTimeRange(ctx context.Context, params ReadTradeTimeRangeParams) (ReadTradeTimeRangeRes, error)
	// ReadTradeTimeRangeInterval implements readTradeTimeRangeInterval operation.
	//
	// Find the attached Interval of the TradeTimeRange with the given ID.
	//
	// GET /rest/trade-time-ranges/{id}/interval
	ReadTradeTimeRangeInterval(ctx context.Context, params ReadTradeTimeRangeIntervalParams) (ReadTradeTimeRangeIntervalRes, error)
	// SearchTicker implements searchTicker operation.
	//
	// Searches for entities by ticker.
	//
	// GET /rest/search/{ticker}
	SearchTicker(ctx context.Context, params SearchTickerParams) (*SearchTickerOK, error)
	// UpdateBarGroup implements updateBarGroup operation.
	//
	// Updates a BarGroup and persists changes to storage.
	//
	// PATCH /rest/bar-groups/{id}
	UpdateBarGroup(ctx context.Context, req *UpdateBarGroupReq, params UpdateBarGroupParams) (UpdateBarGroupRes, error)
	// UpdateBarRecord implements updateBarRecord operation.
	//
	// Updates a BarRecord and persists changes to storage.
	//
	// PATCH /rest/bar-records/{id}
	UpdateBarRecord(ctx context.Context, req *UpdateBarRecordReq, params UpdateBarRecordParams) (UpdateBarRecordRes, error)
	// UpdateBarTimeRange implements updateBarTimeRange operation.
	//
	// Updates a BarTimeRange and persists changes to storage.
	//
	// PATCH /rest/bar-time-ranges/{id}
	UpdateBarTimeRange(ctx context.Context, req *UpdateBarTimeRangeReq, params UpdateBarTimeRangeParams) (UpdateBarTimeRangeRes, error)
	// UpdateDataSource implements updateDataSource operation.
	//
	// Updates a DataSource and persists changes to storage.
	//
	// PATCH /rest/data-sources/{id}
	UpdateDataSource(ctx context.Context, req *UpdateDataSourceReq, params UpdateDataSourceParams) (UpdateDataSourceRes, error)
	// UpdateDividend implements updateDividend operation.
	//
	// Updates a Dividend and persists changes to storage.
	//
	// PATCH /rest/dividends/{id}
	UpdateDividend(ctx context.Context, req *UpdateDividendReq, params UpdateDividendParams) (UpdateDividendRes, error)
	// UpdateEntity implements updateEntity operation.
	//
	// Updates a Entity and persists changes to storage.
	//
	// PATCH /rest/entities/{id}
	UpdateEntity(ctx context.Context, req *UpdateEntityReq, params UpdateEntityParams) (UpdateEntityRes, error)
	// UpdateExchange implements updateExchange operation.
	//
	// Updates a Exchange and persists changes to storage.
	//
	// PATCH /rest/exchanges/{id}
	UpdateExchange(ctx context.Context, req *UpdateExchangeReq, params UpdateExchangeParams) (UpdateExchangeRes, error)
	// UpdateFinancial implements updateFinancial operation.
	//
	// Updates a Financial and persists changes to storage.
	//
	// PATCH /rest/financials/{id}
	UpdateFinancial(ctx context.Context, req *UpdateFinancialReq, params UpdateFinancialParams) (UpdateFinancialRes, error)
	// UpdateInterval implements updateInterval operation.
	//
	// Updates a Interval and persists changes to storage.
	//
	// PATCH /rest/intervals/{id}
	UpdateInterval(ctx context.Context, req *UpdateIntervalReq, params UpdateIntervalParams) (UpdateIntervalRes, error)
	// UpdateMarketHours implements updateMarketHours operation.
	//
	// Updates a MarketHours and persists changes to storage.
	//
	// PATCH /rest/market-hours/{id}
	UpdateMarketHours(ctx context.Context, req *UpdateMarketHoursReq, params UpdateMarketHoursParams) (UpdateMarketHoursRes, error)
	// UpdateMarketInfo implements updateMarketInfo operation.
	//
	// Updates a MarketInfo and persists changes to storage.
	//
	// PATCH /rest/market-infos/{id}
	UpdateMarketInfo(ctx context.Context, req *UpdateMarketInfoReq, params UpdateMarketInfoParams) (UpdateMarketInfoRes, error)
	// UpdateSplit implements updateSplit operation.
	//
	// Updates a Split and persists changes to storage.
	//
	// PATCH /rest/splits/{id}
	UpdateSplit(ctx context.Context, req *UpdateSplitReq, params UpdateSplitParams) (UpdateSplitRes, error)
	// UpdateTradeCondition implements updateTradeCondition operation.
	//
	// Updates a TradeCondition and persists changes to storage.
	//
	// PATCH /rest/trade-conditions/{id}
	UpdateTradeCondition(ctx context.Context, req *UpdateTradeConditionReq, params UpdateTradeConditionParams) (UpdateTradeConditionRes, error)
	// UpdateTradeCorrection implements updateTradeCorrection operation.
	//
	// Updates a TradeCorrection and persists changes to storage.
	//
	// PATCH /rest/trade-corrections/{id}
	UpdateTradeCorrection(ctx context.Context, req *UpdateTradeCorrectionReq, params UpdateTradeCorrectionParams) (UpdateTradeCorrectionRes, error)
	// UpdateTradeRecord implements updateTradeRecord operation.
	//
	// Updates a TradeRecord and persists changes to storage.
	//
	// PATCH /rest/trade-records/{id}
	UpdateTradeRecord(ctx context.Context, req *UpdateTradeRecordReq, params UpdateTradeRecordParams) (UpdateTradeRecordRes, error)
	// UpdateTradeTimeRange implements updateTradeTimeRange operation.
	//
	// Updates a TradeTimeRange and persists changes to storage.
	//
	// PATCH /rest/trade-time-ranges/{id}
	UpdateTradeTimeRange(ctx context.Context, req *UpdateTradeTimeRangeReq, params UpdateTradeTimeRangeParams) (UpdateTradeTimeRangeRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
