// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// AddTickerOK is response for AddTicker operation.
type AddTickerOK struct{}

// Ref: #/components/schemas/BarGroupCreate
type BarGroupCreate struct {
	ID          int       `json:"id"`
	First       time.Time `json:"first"`
	Last        time.Time `json:"last"`
	Count       int       `json:"count"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *BarGroupCreate) GetID() int {
	return s.ID
}

// GetFirst returns the value of First.
func (s *BarGroupCreate) GetFirst() time.Time {
	return s.First
}

// GetLast returns the value of Last.
func (s *BarGroupCreate) GetLast() time.Time {
	return s.Last
}

// GetCount returns the value of Count.
func (s *BarGroupCreate) GetCount() int {
	return s.Count
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *BarGroupCreate) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *BarGroupCreate) SetID(val int) {
	s.ID = val
}

// SetFirst sets the value of First.
func (s *BarGroupCreate) SetFirst(val time.Time) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *BarGroupCreate) SetLast(val time.Time) {
	s.Last = val
}

// SetCount sets the value of Count.
func (s *BarGroupCreate) SetCount(val int) {
	s.Count = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *BarGroupCreate) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

func (*BarGroupCreate) createBarGroupRes() {}

// Ref: #/components/schemas/BarGroupList
type BarGroupList struct {
	ID          int       `json:"id"`
	First       time.Time `json:"first"`
	Last        time.Time `json:"last"`
	Count       int       `json:"count"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *BarGroupList) GetID() int {
	return s.ID
}

// GetFirst returns the value of First.
func (s *BarGroupList) GetFirst() time.Time {
	return s.First
}

// GetLast returns the value of Last.
func (s *BarGroupList) GetLast() time.Time {
	return s.Last
}

// GetCount returns the value of Count.
func (s *BarGroupList) GetCount() int {
	return s.Count
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *BarGroupList) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *BarGroupList) SetID(val int) {
	s.ID = val
}

// SetFirst sets the value of First.
func (s *BarGroupList) SetFirst(val time.Time) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *BarGroupList) SetLast(val time.Time) {
	s.Last = val
}

// SetCount sets the value of Count.
func (s *BarGroupList) SetCount(val int) {
	s.Count = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *BarGroupList) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

// Ref: #/components/schemas/BarGroupRead
type BarGroupRead struct {
	ID          int       `json:"id"`
	First       time.Time `json:"first"`
	Last        time.Time `json:"last"`
	Count       int       `json:"count"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *BarGroupRead) GetID() int {
	return s.ID
}

// GetFirst returns the value of First.
func (s *BarGroupRead) GetFirst() time.Time {
	return s.First
}

// GetLast returns the value of Last.
func (s *BarGroupRead) GetLast() time.Time {
	return s.Last
}

// GetCount returns the value of Count.
func (s *BarGroupRead) GetCount() int {
	return s.Count
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *BarGroupRead) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *BarGroupRead) SetID(val int) {
	s.ID = val
}

// SetFirst sets the value of First.
func (s *BarGroupRead) SetFirst(val time.Time) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *BarGroupRead) SetLast(val time.Time) {
	s.Last = val
}

// SetCount sets the value of Count.
func (s *BarGroupRead) SetCount(val int) {
	s.Count = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *BarGroupRead) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

func (*BarGroupRead) readBarGroupRes() {}

// Ref: #/components/schemas/BarGroup_RecordsList
type BarGroupRecordsList struct {
	ID           int       `json:"id"`
	Close        float64   `json:"close"`
	High         float64   `json:"high"`
	Low          float64   `json:"low"`
	Open         float64   `json:"open"`
	Timestamp    time.Time `json:"timestamp"`
	Volume       float64   `json:"volume"`
	Transactions int32     `json:"transactions"`
}

// GetID returns the value of ID.
func (s *BarGroupRecordsList) GetID() int {
	return s.ID
}

// GetClose returns the value of Close.
func (s *BarGroupRecordsList) GetClose() float64 {
	return s.Close
}

// GetHigh returns the value of High.
func (s *BarGroupRecordsList) GetHigh() float64 {
	return s.High
}

// GetLow returns the value of Low.
func (s *BarGroupRecordsList) GetLow() float64 {
	return s.Low
}

// GetOpen returns the value of Open.
func (s *BarGroupRecordsList) GetOpen() float64 {
	return s.Open
}

// GetTimestamp returns the value of Timestamp.
func (s *BarGroupRecordsList) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *BarGroupRecordsList) GetVolume() float64 {
	return s.Volume
}

// GetTransactions returns the value of Transactions.
func (s *BarGroupRecordsList) GetTransactions() int32 {
	return s.Transactions
}

// SetID sets the value of ID.
func (s *BarGroupRecordsList) SetID(val int) {
	s.ID = val
}

// SetClose sets the value of Close.
func (s *BarGroupRecordsList) SetClose(val float64) {
	s.Close = val
}

// SetHigh sets the value of High.
func (s *BarGroupRecordsList) SetHigh(val float64) {
	s.High = val
}

// SetLow sets the value of Low.
func (s *BarGroupRecordsList) SetLow(val float64) {
	s.Low = val
}

// SetOpen sets the value of Open.
func (s *BarGroupRecordsList) SetOpen(val float64) {
	s.Open = val
}

// SetTimestamp sets the value of Timestamp.
func (s *BarGroupRecordsList) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *BarGroupRecordsList) SetVolume(val float64) {
	s.Volume = val
}

// SetTransactions sets the value of Transactions.
func (s *BarGroupRecordsList) SetTransactions(val int32) {
	s.Transactions = val
}

// Ref: #/components/schemas/BarGroup_TimeRangeRead
type BarGroupTimeRangeRead struct {
	ID         int                         `json:"id"`
	Start      time.Time                   `json:"start"`
	End        time.Time                   `json:"end"`
	Count      int                         `json:"count"`
	IntervalID int                         `json:"interval_id"`
	Status     BarGroupTimeRangeReadStatus `json:"status"`
	UpdateTime time.Time                   `json:"update_time"`
}

// GetID returns the value of ID.
func (s *BarGroupTimeRangeRead) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *BarGroupTimeRangeRead) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *BarGroupTimeRangeRead) GetEnd() time.Time {
	return s.End
}

// GetCount returns the value of Count.
func (s *BarGroupTimeRangeRead) GetCount() int {
	return s.Count
}

// GetIntervalID returns the value of IntervalID.
func (s *BarGroupTimeRangeRead) GetIntervalID() int {
	return s.IntervalID
}

// GetStatus returns the value of Status.
func (s *BarGroupTimeRangeRead) GetStatus() BarGroupTimeRangeReadStatus {
	return s.Status
}

// GetUpdateTime returns the value of UpdateTime.
func (s *BarGroupTimeRangeRead) GetUpdateTime() time.Time {
	return s.UpdateTime
}

// SetID sets the value of ID.
func (s *BarGroupTimeRangeRead) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *BarGroupTimeRangeRead) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *BarGroupTimeRangeRead) SetEnd(val time.Time) {
	s.End = val
}

// SetCount sets the value of Count.
func (s *BarGroupTimeRangeRead) SetCount(val int) {
	s.Count = val
}

// SetIntervalID sets the value of IntervalID.
func (s *BarGroupTimeRangeRead) SetIntervalID(val int) {
	s.IntervalID = val
}

// SetStatus sets the value of Status.
func (s *BarGroupTimeRangeRead) SetStatus(val BarGroupTimeRangeReadStatus) {
	s.Status = val
}

// SetUpdateTime sets the value of UpdateTime.
func (s *BarGroupTimeRangeRead) SetUpdateTime(val time.Time) {
	s.UpdateTime = val
}

func (*BarGroupTimeRangeRead) readBarGroupTimeRangeRes() {}

type BarGroupTimeRangeReadStatus string

const (
	BarGroupTimeRangeReadStatusPending      BarGroupTimeRangeReadStatus = "pending"
	BarGroupTimeRangeReadStatusCreated      BarGroupTimeRangeReadStatus = "created"
	BarGroupTimeRangeReadStatusClean        BarGroupTimeRangeReadStatus = "clean"
	BarGroupTimeRangeReadStatusConsolidated BarGroupTimeRangeReadStatus = "consolidated"
)

// MarshalText implements encoding.TextMarshaler.
func (s BarGroupTimeRangeReadStatus) MarshalText() ([]byte, error) {
	switch s {
	case BarGroupTimeRangeReadStatusPending:
		return []byte(s), nil
	case BarGroupTimeRangeReadStatusCreated:
		return []byte(s), nil
	case BarGroupTimeRangeReadStatusClean:
		return []byte(s), nil
	case BarGroupTimeRangeReadStatusConsolidated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BarGroupTimeRangeReadStatus) UnmarshalText(data []byte) error {
	switch BarGroupTimeRangeReadStatus(data) {
	case BarGroupTimeRangeReadStatusPending:
		*s = BarGroupTimeRangeReadStatusPending
		return nil
	case BarGroupTimeRangeReadStatusCreated:
		*s = BarGroupTimeRangeReadStatusCreated
		return nil
	case BarGroupTimeRangeReadStatusClean:
		*s = BarGroupTimeRangeReadStatusClean
		return nil
	case BarGroupTimeRangeReadStatusConsolidated:
		*s = BarGroupTimeRangeReadStatusConsolidated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BarGroupUpdate
type BarGroupUpdate struct {
	ID          int       `json:"id"`
	First       time.Time `json:"first"`
	Last        time.Time `json:"last"`
	Count       int       `json:"count"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *BarGroupUpdate) GetID() int {
	return s.ID
}

// GetFirst returns the value of First.
func (s *BarGroupUpdate) GetFirst() time.Time {
	return s.First
}

// GetLast returns the value of Last.
func (s *BarGroupUpdate) GetLast() time.Time {
	return s.Last
}

// GetCount returns the value of Count.
func (s *BarGroupUpdate) GetCount() int {
	return s.Count
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *BarGroupUpdate) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *BarGroupUpdate) SetID(val int) {
	s.ID = val
}

// SetFirst sets the value of First.
func (s *BarGroupUpdate) SetFirst(val time.Time) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *BarGroupUpdate) SetLast(val time.Time) {
	s.Last = val
}

// SetCount sets the value of Count.
func (s *BarGroupUpdate) SetCount(val int) {
	s.Count = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *BarGroupUpdate) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

func (*BarGroupUpdate) updateBarGroupRes() {}

// Ref: #/components/schemas/BarRecordCreate
type BarRecordCreate struct {
	ID           int       `json:"id"`
	Close        float64   `json:"close"`
	High         float64   `json:"high"`
	Low          float64   `json:"low"`
	Open         float64   `json:"open"`
	Timestamp    time.Time `json:"timestamp"`
	Volume       float64   `json:"volume"`
	Transactions int32     `json:"transactions"`
}

// GetID returns the value of ID.
func (s *BarRecordCreate) GetID() int {
	return s.ID
}

// GetClose returns the value of Close.
func (s *BarRecordCreate) GetClose() float64 {
	return s.Close
}

// GetHigh returns the value of High.
func (s *BarRecordCreate) GetHigh() float64 {
	return s.High
}

// GetLow returns the value of Low.
func (s *BarRecordCreate) GetLow() float64 {
	return s.Low
}

// GetOpen returns the value of Open.
func (s *BarRecordCreate) GetOpen() float64 {
	return s.Open
}

// GetTimestamp returns the value of Timestamp.
func (s *BarRecordCreate) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *BarRecordCreate) GetVolume() float64 {
	return s.Volume
}

// GetTransactions returns the value of Transactions.
func (s *BarRecordCreate) GetTransactions() int32 {
	return s.Transactions
}

// SetID sets the value of ID.
func (s *BarRecordCreate) SetID(val int) {
	s.ID = val
}

// SetClose sets the value of Close.
func (s *BarRecordCreate) SetClose(val float64) {
	s.Close = val
}

// SetHigh sets the value of High.
func (s *BarRecordCreate) SetHigh(val float64) {
	s.High = val
}

// SetLow sets the value of Low.
func (s *BarRecordCreate) SetLow(val float64) {
	s.Low = val
}

// SetOpen sets the value of Open.
func (s *BarRecordCreate) SetOpen(val float64) {
	s.Open = val
}

// SetTimestamp sets the value of Timestamp.
func (s *BarRecordCreate) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *BarRecordCreate) SetVolume(val float64) {
	s.Volume = val
}

// SetTransactions sets the value of Transactions.
func (s *BarRecordCreate) SetTransactions(val int32) {
	s.Transactions = val
}

func (*BarRecordCreate) createBarRecordRes() {}

// Ref: #/components/schemas/BarRecord_GroupRead
type BarRecordGroupRead struct {
	ID          int       `json:"id"`
	First       time.Time `json:"first"`
	Last        time.Time `json:"last"`
	Count       int       `json:"count"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *BarRecordGroupRead) GetID() int {
	return s.ID
}

// GetFirst returns the value of First.
func (s *BarRecordGroupRead) GetFirst() time.Time {
	return s.First
}

// GetLast returns the value of Last.
func (s *BarRecordGroupRead) GetLast() time.Time {
	return s.Last
}

// GetCount returns the value of Count.
func (s *BarRecordGroupRead) GetCount() int {
	return s.Count
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *BarRecordGroupRead) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *BarRecordGroupRead) SetID(val int) {
	s.ID = val
}

// SetFirst sets the value of First.
func (s *BarRecordGroupRead) SetFirst(val time.Time) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *BarRecordGroupRead) SetLast(val time.Time) {
	s.Last = val
}

// SetCount sets the value of Count.
func (s *BarRecordGroupRead) SetCount(val int) {
	s.Count = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *BarRecordGroupRead) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

func (*BarRecordGroupRead) readBarRecordGroupRes() {}

// Ref: #/components/schemas/BarRecordList
type BarRecordList struct {
	ID           int       `json:"id"`
	Close        float64   `json:"close"`
	High         float64   `json:"high"`
	Low          float64   `json:"low"`
	Open         float64   `json:"open"`
	Timestamp    time.Time `json:"timestamp"`
	Volume       float64   `json:"volume"`
	Transactions int32     `json:"transactions"`
}

// GetID returns the value of ID.
func (s *BarRecordList) GetID() int {
	return s.ID
}

// GetClose returns the value of Close.
func (s *BarRecordList) GetClose() float64 {
	return s.Close
}

// GetHigh returns the value of High.
func (s *BarRecordList) GetHigh() float64 {
	return s.High
}

// GetLow returns the value of Low.
func (s *BarRecordList) GetLow() float64 {
	return s.Low
}

// GetOpen returns the value of Open.
func (s *BarRecordList) GetOpen() float64 {
	return s.Open
}

// GetTimestamp returns the value of Timestamp.
func (s *BarRecordList) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *BarRecordList) GetVolume() float64 {
	return s.Volume
}

// GetTransactions returns the value of Transactions.
func (s *BarRecordList) GetTransactions() int32 {
	return s.Transactions
}

// SetID sets the value of ID.
func (s *BarRecordList) SetID(val int) {
	s.ID = val
}

// SetClose sets the value of Close.
func (s *BarRecordList) SetClose(val float64) {
	s.Close = val
}

// SetHigh sets the value of High.
func (s *BarRecordList) SetHigh(val float64) {
	s.High = val
}

// SetLow sets the value of Low.
func (s *BarRecordList) SetLow(val float64) {
	s.Low = val
}

// SetOpen sets the value of Open.
func (s *BarRecordList) SetOpen(val float64) {
	s.Open = val
}

// SetTimestamp sets the value of Timestamp.
func (s *BarRecordList) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *BarRecordList) SetVolume(val float64) {
	s.Volume = val
}

// SetTransactions sets the value of Transactions.
func (s *BarRecordList) SetTransactions(val int32) {
	s.Transactions = val
}

// Ref: #/components/schemas/BarRecordRead
type BarRecordRead struct {
	ID           int       `json:"id"`
	Close        float64   `json:"close"`
	High         float64   `json:"high"`
	Low          float64   `json:"low"`
	Open         float64   `json:"open"`
	Timestamp    time.Time `json:"timestamp"`
	Volume       float64   `json:"volume"`
	Transactions int32     `json:"transactions"`
}

// GetID returns the value of ID.
func (s *BarRecordRead) GetID() int {
	return s.ID
}

// GetClose returns the value of Close.
func (s *BarRecordRead) GetClose() float64 {
	return s.Close
}

// GetHigh returns the value of High.
func (s *BarRecordRead) GetHigh() float64 {
	return s.High
}

// GetLow returns the value of Low.
func (s *BarRecordRead) GetLow() float64 {
	return s.Low
}

// GetOpen returns the value of Open.
func (s *BarRecordRead) GetOpen() float64 {
	return s.Open
}

// GetTimestamp returns the value of Timestamp.
func (s *BarRecordRead) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *BarRecordRead) GetVolume() float64 {
	return s.Volume
}

// GetTransactions returns the value of Transactions.
func (s *BarRecordRead) GetTransactions() int32 {
	return s.Transactions
}

// SetID sets the value of ID.
func (s *BarRecordRead) SetID(val int) {
	s.ID = val
}

// SetClose sets the value of Close.
func (s *BarRecordRead) SetClose(val float64) {
	s.Close = val
}

// SetHigh sets the value of High.
func (s *BarRecordRead) SetHigh(val float64) {
	s.High = val
}

// SetLow sets the value of Low.
func (s *BarRecordRead) SetLow(val float64) {
	s.Low = val
}

// SetOpen sets the value of Open.
func (s *BarRecordRead) SetOpen(val float64) {
	s.Open = val
}

// SetTimestamp sets the value of Timestamp.
func (s *BarRecordRead) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *BarRecordRead) SetVolume(val float64) {
	s.Volume = val
}

// SetTransactions sets the value of Transactions.
func (s *BarRecordRead) SetTransactions(val int32) {
	s.Transactions = val
}

func (*BarRecordRead) readBarRecordRes() {}

// Ref: #/components/schemas/BarRecordUpdate
type BarRecordUpdate struct {
	ID           int       `json:"id"`
	Close        float64   `json:"close"`
	High         float64   `json:"high"`
	Low          float64   `json:"low"`
	Open         float64   `json:"open"`
	Timestamp    time.Time `json:"timestamp"`
	Volume       float64   `json:"volume"`
	Transactions int32     `json:"transactions"`
}

// GetID returns the value of ID.
func (s *BarRecordUpdate) GetID() int {
	return s.ID
}

// GetClose returns the value of Close.
func (s *BarRecordUpdate) GetClose() float64 {
	return s.Close
}

// GetHigh returns the value of High.
func (s *BarRecordUpdate) GetHigh() float64 {
	return s.High
}

// GetLow returns the value of Low.
func (s *BarRecordUpdate) GetLow() float64 {
	return s.Low
}

// GetOpen returns the value of Open.
func (s *BarRecordUpdate) GetOpen() float64 {
	return s.Open
}

// GetTimestamp returns the value of Timestamp.
func (s *BarRecordUpdate) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *BarRecordUpdate) GetVolume() float64 {
	return s.Volume
}

// GetTransactions returns the value of Transactions.
func (s *BarRecordUpdate) GetTransactions() int32 {
	return s.Transactions
}

// SetID sets the value of ID.
func (s *BarRecordUpdate) SetID(val int) {
	s.ID = val
}

// SetClose sets the value of Close.
func (s *BarRecordUpdate) SetClose(val float64) {
	s.Close = val
}

// SetHigh sets the value of High.
func (s *BarRecordUpdate) SetHigh(val float64) {
	s.High = val
}

// SetLow sets the value of Low.
func (s *BarRecordUpdate) SetLow(val float64) {
	s.Low = val
}

// SetOpen sets the value of Open.
func (s *BarRecordUpdate) SetOpen(val float64) {
	s.Open = val
}

// SetTimestamp sets the value of Timestamp.
func (s *BarRecordUpdate) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *BarRecordUpdate) SetVolume(val float64) {
	s.Volume = val
}

// SetTransactions sets the value of Transactions.
func (s *BarRecordUpdate) SetTransactions(val int32) {
	s.Transactions = val
}

func (*BarRecordUpdate) updateBarRecordRes() {}

// Ref: #/components/schemas/BarTimeRangeCreate
type BarTimeRangeCreate struct {
	ID         int                      `json:"id"`
	Start      time.Time                `json:"start"`
	End        time.Time                `json:"end"`
	Count      int                      `json:"count"`
	IntervalID int                      `json:"interval_id"`
	Status     BarTimeRangeCreateStatus `json:"status"`
	UpdateTime time.Time                `json:"update_time"`
}

// GetID returns the value of ID.
func (s *BarTimeRangeCreate) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *BarTimeRangeCreate) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *BarTimeRangeCreate) GetEnd() time.Time {
	return s.End
}

// GetCount returns the value of Count.
func (s *BarTimeRangeCreate) GetCount() int {
	return s.Count
}

// GetIntervalID returns the value of IntervalID.
func (s *BarTimeRangeCreate) GetIntervalID() int {
	return s.IntervalID
}

// GetStatus returns the value of Status.
func (s *BarTimeRangeCreate) GetStatus() BarTimeRangeCreateStatus {
	return s.Status
}

// GetUpdateTime returns the value of UpdateTime.
func (s *BarTimeRangeCreate) GetUpdateTime() time.Time {
	return s.UpdateTime
}

// SetID sets the value of ID.
func (s *BarTimeRangeCreate) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *BarTimeRangeCreate) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *BarTimeRangeCreate) SetEnd(val time.Time) {
	s.End = val
}

// SetCount sets the value of Count.
func (s *BarTimeRangeCreate) SetCount(val int) {
	s.Count = val
}

// SetIntervalID sets the value of IntervalID.
func (s *BarTimeRangeCreate) SetIntervalID(val int) {
	s.IntervalID = val
}

// SetStatus sets the value of Status.
func (s *BarTimeRangeCreate) SetStatus(val BarTimeRangeCreateStatus) {
	s.Status = val
}

// SetUpdateTime sets the value of UpdateTime.
func (s *BarTimeRangeCreate) SetUpdateTime(val time.Time) {
	s.UpdateTime = val
}

func (*BarTimeRangeCreate) createBarTimeRangeRes() {}

type BarTimeRangeCreateStatus string

const (
	BarTimeRangeCreateStatusPending      BarTimeRangeCreateStatus = "pending"
	BarTimeRangeCreateStatusCreated      BarTimeRangeCreateStatus = "created"
	BarTimeRangeCreateStatusClean        BarTimeRangeCreateStatus = "clean"
	BarTimeRangeCreateStatusConsolidated BarTimeRangeCreateStatus = "consolidated"
)

// MarshalText implements encoding.TextMarshaler.
func (s BarTimeRangeCreateStatus) MarshalText() ([]byte, error) {
	switch s {
	case BarTimeRangeCreateStatusPending:
		return []byte(s), nil
	case BarTimeRangeCreateStatusCreated:
		return []byte(s), nil
	case BarTimeRangeCreateStatusClean:
		return []byte(s), nil
	case BarTimeRangeCreateStatusConsolidated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BarTimeRangeCreateStatus) UnmarshalText(data []byte) error {
	switch BarTimeRangeCreateStatus(data) {
	case BarTimeRangeCreateStatusPending:
		*s = BarTimeRangeCreateStatusPending
		return nil
	case BarTimeRangeCreateStatusCreated:
		*s = BarTimeRangeCreateStatusCreated
		return nil
	case BarTimeRangeCreateStatusClean:
		*s = BarTimeRangeCreateStatusClean
		return nil
	case BarTimeRangeCreateStatusConsolidated:
		*s = BarTimeRangeCreateStatusConsolidated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BarTimeRange_GroupsList
type BarTimeRangeGroupsList struct {
	ID          int       `json:"id"`
	First       time.Time `json:"first"`
	Last        time.Time `json:"last"`
	Count       int       `json:"count"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *BarTimeRangeGroupsList) GetID() int {
	return s.ID
}

// GetFirst returns the value of First.
func (s *BarTimeRangeGroupsList) GetFirst() time.Time {
	return s.First
}

// GetLast returns the value of Last.
func (s *BarTimeRangeGroupsList) GetLast() time.Time {
	return s.Last
}

// GetCount returns the value of Count.
func (s *BarTimeRangeGroupsList) GetCount() int {
	return s.Count
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *BarTimeRangeGroupsList) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *BarTimeRangeGroupsList) SetID(val int) {
	s.ID = val
}

// SetFirst sets the value of First.
func (s *BarTimeRangeGroupsList) SetFirst(val time.Time) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *BarTimeRangeGroupsList) SetLast(val time.Time) {
	s.Last = val
}

// SetCount sets the value of Count.
func (s *BarTimeRangeGroupsList) SetCount(val int) {
	s.Count = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *BarTimeRangeGroupsList) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

// Ref: #/components/schemas/BarTimeRange_IntervalRead
type BarTimeRangeIntervalRead struct {
	ID           int                              `json:"id"`
	Active       bool                             `json:"active"`
	Interval     BarTimeRangeIntervalReadInterval `json:"interval"`
	StockID      int                              `json:"stock_id"`
	DataSourceID int                              `json:"data_source_id"`
}

// GetID returns the value of ID.
func (s *BarTimeRangeIntervalRead) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *BarTimeRangeIntervalRead) GetActive() bool {
	return s.Active
}

// GetInterval returns the value of Interval.
func (s *BarTimeRangeIntervalRead) GetInterval() BarTimeRangeIntervalReadInterval {
	return s.Interval
}

// GetStockID returns the value of StockID.
func (s *BarTimeRangeIntervalRead) GetStockID() int {
	return s.StockID
}

// GetDataSourceID returns the value of DataSourceID.
func (s *BarTimeRangeIntervalRead) GetDataSourceID() int {
	return s.DataSourceID
}

// SetID sets the value of ID.
func (s *BarTimeRangeIntervalRead) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *BarTimeRangeIntervalRead) SetActive(val bool) {
	s.Active = val
}

// SetInterval sets the value of Interval.
func (s *BarTimeRangeIntervalRead) SetInterval(val BarTimeRangeIntervalReadInterval) {
	s.Interval = val
}

// SetStockID sets the value of StockID.
func (s *BarTimeRangeIntervalRead) SetStockID(val int) {
	s.StockID = val
}

// SetDataSourceID sets the value of DataSourceID.
func (s *BarTimeRangeIntervalRead) SetDataSourceID(val int) {
	s.DataSourceID = val
}

func (*BarTimeRangeIntervalRead) readBarTimeRangeIntervalRes() {}

type BarTimeRangeIntervalReadInterval string

const (
	BarTimeRangeIntervalReadIntervalTrades  BarTimeRangeIntervalReadInterval = "trades"
	BarTimeRangeIntervalReadInterval1min    BarTimeRangeIntervalReadInterval = "1min"
	BarTimeRangeIntervalReadIntervalDaily   BarTimeRangeIntervalReadInterval = "daily"
	BarTimeRangeIntervalReadIntervalMonthly BarTimeRangeIntervalReadInterval = "monthly"
	BarTimeRangeIntervalReadIntervalYearly  BarTimeRangeIntervalReadInterval = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s BarTimeRangeIntervalReadInterval) MarshalText() ([]byte, error) {
	switch s {
	case BarTimeRangeIntervalReadIntervalTrades:
		return []byte(s), nil
	case BarTimeRangeIntervalReadInterval1min:
		return []byte(s), nil
	case BarTimeRangeIntervalReadIntervalDaily:
		return []byte(s), nil
	case BarTimeRangeIntervalReadIntervalMonthly:
		return []byte(s), nil
	case BarTimeRangeIntervalReadIntervalYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BarTimeRangeIntervalReadInterval) UnmarshalText(data []byte) error {
	switch BarTimeRangeIntervalReadInterval(data) {
	case BarTimeRangeIntervalReadIntervalTrades:
		*s = BarTimeRangeIntervalReadIntervalTrades
		return nil
	case BarTimeRangeIntervalReadInterval1min:
		*s = BarTimeRangeIntervalReadInterval1min
		return nil
	case BarTimeRangeIntervalReadIntervalDaily:
		*s = BarTimeRangeIntervalReadIntervalDaily
		return nil
	case BarTimeRangeIntervalReadIntervalMonthly:
		*s = BarTimeRangeIntervalReadIntervalMonthly
		return nil
	case BarTimeRangeIntervalReadIntervalYearly:
		*s = BarTimeRangeIntervalReadIntervalYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BarTimeRangeList
type BarTimeRangeList struct {
	ID         int                    `json:"id"`
	Start      time.Time              `json:"start"`
	End        time.Time              `json:"end"`
	Count      int                    `json:"count"`
	IntervalID int                    `json:"interval_id"`
	Status     BarTimeRangeListStatus `json:"status"`
	UpdateTime time.Time              `json:"update_time"`
}

// GetID returns the value of ID.
func (s *BarTimeRangeList) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *BarTimeRangeList) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *BarTimeRangeList) GetEnd() time.Time {
	return s.End
}

// GetCount returns the value of Count.
func (s *BarTimeRangeList) GetCount() int {
	return s.Count
}

// GetIntervalID returns the value of IntervalID.
func (s *BarTimeRangeList) GetIntervalID() int {
	return s.IntervalID
}

// GetStatus returns the value of Status.
func (s *BarTimeRangeList) GetStatus() BarTimeRangeListStatus {
	return s.Status
}

// GetUpdateTime returns the value of UpdateTime.
func (s *BarTimeRangeList) GetUpdateTime() time.Time {
	return s.UpdateTime
}

// SetID sets the value of ID.
func (s *BarTimeRangeList) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *BarTimeRangeList) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *BarTimeRangeList) SetEnd(val time.Time) {
	s.End = val
}

// SetCount sets the value of Count.
func (s *BarTimeRangeList) SetCount(val int) {
	s.Count = val
}

// SetIntervalID sets the value of IntervalID.
func (s *BarTimeRangeList) SetIntervalID(val int) {
	s.IntervalID = val
}

// SetStatus sets the value of Status.
func (s *BarTimeRangeList) SetStatus(val BarTimeRangeListStatus) {
	s.Status = val
}

// SetUpdateTime sets the value of UpdateTime.
func (s *BarTimeRangeList) SetUpdateTime(val time.Time) {
	s.UpdateTime = val
}

type BarTimeRangeListStatus string

const (
	BarTimeRangeListStatusPending      BarTimeRangeListStatus = "pending"
	BarTimeRangeListStatusCreated      BarTimeRangeListStatus = "created"
	BarTimeRangeListStatusClean        BarTimeRangeListStatus = "clean"
	BarTimeRangeListStatusConsolidated BarTimeRangeListStatus = "consolidated"
)

// MarshalText implements encoding.TextMarshaler.
func (s BarTimeRangeListStatus) MarshalText() ([]byte, error) {
	switch s {
	case BarTimeRangeListStatusPending:
		return []byte(s), nil
	case BarTimeRangeListStatusCreated:
		return []byte(s), nil
	case BarTimeRangeListStatusClean:
		return []byte(s), nil
	case BarTimeRangeListStatusConsolidated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BarTimeRangeListStatus) UnmarshalText(data []byte) error {
	switch BarTimeRangeListStatus(data) {
	case BarTimeRangeListStatusPending:
		*s = BarTimeRangeListStatusPending
		return nil
	case BarTimeRangeListStatusCreated:
		*s = BarTimeRangeListStatusCreated
		return nil
	case BarTimeRangeListStatusClean:
		*s = BarTimeRangeListStatusClean
		return nil
	case BarTimeRangeListStatusConsolidated:
		*s = BarTimeRangeListStatusConsolidated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BarTimeRangeRead
type BarTimeRangeRead struct {
	ID         int                    `json:"id"`
	Start      time.Time              `json:"start"`
	End        time.Time              `json:"end"`
	Count      int                    `json:"count"`
	IntervalID int                    `json:"interval_id"`
	Status     BarTimeRangeReadStatus `json:"status"`
	UpdateTime time.Time              `json:"update_time"`
}

// GetID returns the value of ID.
func (s *BarTimeRangeRead) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *BarTimeRangeRead) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *BarTimeRangeRead) GetEnd() time.Time {
	return s.End
}

// GetCount returns the value of Count.
func (s *BarTimeRangeRead) GetCount() int {
	return s.Count
}

// GetIntervalID returns the value of IntervalID.
func (s *BarTimeRangeRead) GetIntervalID() int {
	return s.IntervalID
}

// GetStatus returns the value of Status.
func (s *BarTimeRangeRead) GetStatus() BarTimeRangeReadStatus {
	return s.Status
}

// GetUpdateTime returns the value of UpdateTime.
func (s *BarTimeRangeRead) GetUpdateTime() time.Time {
	return s.UpdateTime
}

// SetID sets the value of ID.
func (s *BarTimeRangeRead) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *BarTimeRangeRead) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *BarTimeRangeRead) SetEnd(val time.Time) {
	s.End = val
}

// SetCount sets the value of Count.
func (s *BarTimeRangeRead) SetCount(val int) {
	s.Count = val
}

// SetIntervalID sets the value of IntervalID.
func (s *BarTimeRangeRead) SetIntervalID(val int) {
	s.IntervalID = val
}

// SetStatus sets the value of Status.
func (s *BarTimeRangeRead) SetStatus(val BarTimeRangeReadStatus) {
	s.Status = val
}

// SetUpdateTime sets the value of UpdateTime.
func (s *BarTimeRangeRead) SetUpdateTime(val time.Time) {
	s.UpdateTime = val
}

func (*BarTimeRangeRead) readBarTimeRangeRes() {}

type BarTimeRangeReadStatus string

const (
	BarTimeRangeReadStatusPending      BarTimeRangeReadStatus = "pending"
	BarTimeRangeReadStatusCreated      BarTimeRangeReadStatus = "created"
	BarTimeRangeReadStatusClean        BarTimeRangeReadStatus = "clean"
	BarTimeRangeReadStatusConsolidated BarTimeRangeReadStatus = "consolidated"
)

// MarshalText implements encoding.TextMarshaler.
func (s BarTimeRangeReadStatus) MarshalText() ([]byte, error) {
	switch s {
	case BarTimeRangeReadStatusPending:
		return []byte(s), nil
	case BarTimeRangeReadStatusCreated:
		return []byte(s), nil
	case BarTimeRangeReadStatusClean:
		return []byte(s), nil
	case BarTimeRangeReadStatusConsolidated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BarTimeRangeReadStatus) UnmarshalText(data []byte) error {
	switch BarTimeRangeReadStatus(data) {
	case BarTimeRangeReadStatusPending:
		*s = BarTimeRangeReadStatusPending
		return nil
	case BarTimeRangeReadStatusCreated:
		*s = BarTimeRangeReadStatusCreated
		return nil
	case BarTimeRangeReadStatusClean:
		*s = BarTimeRangeReadStatusClean
		return nil
	case BarTimeRangeReadStatusConsolidated:
		*s = BarTimeRangeReadStatusConsolidated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/BarTimeRangeUpdate
type BarTimeRangeUpdate struct {
	ID         int                      `json:"id"`
	Start      time.Time                `json:"start"`
	End        time.Time                `json:"end"`
	Count      int                      `json:"count"`
	IntervalID int                      `json:"interval_id"`
	Status     BarTimeRangeUpdateStatus `json:"status"`
	UpdateTime time.Time                `json:"update_time"`
}

// GetID returns the value of ID.
func (s *BarTimeRangeUpdate) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *BarTimeRangeUpdate) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *BarTimeRangeUpdate) GetEnd() time.Time {
	return s.End
}

// GetCount returns the value of Count.
func (s *BarTimeRangeUpdate) GetCount() int {
	return s.Count
}

// GetIntervalID returns the value of IntervalID.
func (s *BarTimeRangeUpdate) GetIntervalID() int {
	return s.IntervalID
}

// GetStatus returns the value of Status.
func (s *BarTimeRangeUpdate) GetStatus() BarTimeRangeUpdateStatus {
	return s.Status
}

// GetUpdateTime returns the value of UpdateTime.
func (s *BarTimeRangeUpdate) GetUpdateTime() time.Time {
	return s.UpdateTime
}

// SetID sets the value of ID.
func (s *BarTimeRangeUpdate) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *BarTimeRangeUpdate) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *BarTimeRangeUpdate) SetEnd(val time.Time) {
	s.End = val
}

// SetCount sets the value of Count.
func (s *BarTimeRangeUpdate) SetCount(val int) {
	s.Count = val
}

// SetIntervalID sets the value of IntervalID.
func (s *BarTimeRangeUpdate) SetIntervalID(val int) {
	s.IntervalID = val
}

// SetStatus sets the value of Status.
func (s *BarTimeRangeUpdate) SetStatus(val BarTimeRangeUpdateStatus) {
	s.Status = val
}

// SetUpdateTime sets the value of UpdateTime.
func (s *BarTimeRangeUpdate) SetUpdateTime(val time.Time) {
	s.UpdateTime = val
}

func (*BarTimeRangeUpdate) updateBarTimeRangeRes() {}

type BarTimeRangeUpdateStatus string

const (
	BarTimeRangeUpdateStatusPending      BarTimeRangeUpdateStatus = "pending"
	BarTimeRangeUpdateStatusCreated      BarTimeRangeUpdateStatus = "created"
	BarTimeRangeUpdateStatusClean        BarTimeRangeUpdateStatus = "clean"
	BarTimeRangeUpdateStatusConsolidated BarTimeRangeUpdateStatus = "consolidated"
)

// MarshalText implements encoding.TextMarshaler.
func (s BarTimeRangeUpdateStatus) MarshalText() ([]byte, error) {
	switch s {
	case BarTimeRangeUpdateStatusPending:
		return []byte(s), nil
	case BarTimeRangeUpdateStatusCreated:
		return []byte(s), nil
	case BarTimeRangeUpdateStatusClean:
		return []byte(s), nil
	case BarTimeRangeUpdateStatusConsolidated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *BarTimeRangeUpdateStatus) UnmarshalText(data []byte) error {
	switch BarTimeRangeUpdateStatus(data) {
	case BarTimeRangeUpdateStatusPending:
		*s = BarTimeRangeUpdateStatusPending
		return nil
	case BarTimeRangeUpdateStatusCreated:
		*s = BarTimeRangeUpdateStatusCreated
		return nil
	case BarTimeRangeUpdateStatusClean:
		*s = BarTimeRangeUpdateStatusClean
		return nil
	case BarTimeRangeUpdateStatusConsolidated:
		*s = BarTimeRangeUpdateStatusConsolidated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateBarGroupReq struct {
	First       time.Time `json:"first"`
	Last        time.Time `json:"last"`
	Count       int       `json:"count"`
	TimeRangeID int       `json:"time_range_id"`
	TimeRange   int       `json:"time_range"`
	Records     []int     `json:"records"`
}

// GetFirst returns the value of First.
func (s *CreateBarGroupReq) GetFirst() time.Time {
	return s.First
}

// GetLast returns the value of Last.
func (s *CreateBarGroupReq) GetLast() time.Time {
	return s.Last
}

// GetCount returns the value of Count.
func (s *CreateBarGroupReq) GetCount() int {
	return s.Count
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *CreateBarGroupReq) GetTimeRangeID() int {
	return s.TimeRangeID
}

// GetTimeRange returns the value of TimeRange.
func (s *CreateBarGroupReq) GetTimeRange() int {
	return s.TimeRange
}

// GetRecords returns the value of Records.
func (s *CreateBarGroupReq) GetRecords() []int {
	return s.Records
}

// SetFirst sets the value of First.
func (s *CreateBarGroupReq) SetFirst(val time.Time) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *CreateBarGroupReq) SetLast(val time.Time) {
	s.Last = val
}

// SetCount sets the value of Count.
func (s *CreateBarGroupReq) SetCount(val int) {
	s.Count = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *CreateBarGroupReq) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

// SetTimeRange sets the value of TimeRange.
func (s *CreateBarGroupReq) SetTimeRange(val int) {
	s.TimeRange = val
}

// SetRecords sets the value of Records.
func (s *CreateBarGroupReq) SetRecords(val []int) {
	s.Records = val
}

type CreateBarRecordReq struct {
	Close        float64   `json:"close"`
	High         float64   `json:"high"`
	Low          float64   `json:"low"`
	Open         float64   `json:"open"`
	Timestamp    time.Time `json:"timestamp"`
	Volume       float64   `json:"volume"`
	Transactions int32     `json:"transactions"`
	Group        OptInt    `json:"group"`
}

// GetClose returns the value of Close.
func (s *CreateBarRecordReq) GetClose() float64 {
	return s.Close
}

// GetHigh returns the value of High.
func (s *CreateBarRecordReq) GetHigh() float64 {
	return s.High
}

// GetLow returns the value of Low.
func (s *CreateBarRecordReq) GetLow() float64 {
	return s.Low
}

// GetOpen returns the value of Open.
func (s *CreateBarRecordReq) GetOpen() float64 {
	return s.Open
}

// GetTimestamp returns the value of Timestamp.
func (s *CreateBarRecordReq) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *CreateBarRecordReq) GetVolume() float64 {
	return s.Volume
}

// GetTransactions returns the value of Transactions.
func (s *CreateBarRecordReq) GetTransactions() int32 {
	return s.Transactions
}

// GetGroup returns the value of Group.
func (s *CreateBarRecordReq) GetGroup() OptInt {
	return s.Group
}

// SetClose sets the value of Close.
func (s *CreateBarRecordReq) SetClose(val float64) {
	s.Close = val
}

// SetHigh sets the value of High.
func (s *CreateBarRecordReq) SetHigh(val float64) {
	s.High = val
}

// SetLow sets the value of Low.
func (s *CreateBarRecordReq) SetLow(val float64) {
	s.Low = val
}

// SetOpen sets the value of Open.
func (s *CreateBarRecordReq) SetOpen(val float64) {
	s.Open = val
}

// SetTimestamp sets the value of Timestamp.
func (s *CreateBarRecordReq) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *CreateBarRecordReq) SetVolume(val float64) {
	s.Volume = val
}

// SetTransactions sets the value of Transactions.
func (s *CreateBarRecordReq) SetTransactions(val int32) {
	s.Transactions = val
}

// SetGroup sets the value of Group.
func (s *CreateBarRecordReq) SetGroup(val OptInt) {
	s.Group = val
}

type CreateBarTimeRangeReq struct {
	Start      time.Time                   `json:"start"`
	End        time.Time                   `json:"end"`
	Count      int                         `json:"count"`
	IntervalID int                         `json:"interval_id"`
	Status     CreateBarTimeRangeReqStatus `json:"status"`
	UpdateTime time.Time                   `json:"update_time"`
	Interval   int                         `json:"interval"`
	Groups     []int                       `json:"groups"`
}

// GetStart returns the value of Start.
func (s *CreateBarTimeRangeReq) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *CreateBarTimeRangeReq) GetEnd() time.Time {
	return s.End
}

// GetCount returns the value of Count.
func (s *CreateBarTimeRangeReq) GetCount() int {
	return s.Count
}

// GetIntervalID returns the value of IntervalID.
func (s *CreateBarTimeRangeReq) GetIntervalID() int {
	return s.IntervalID
}

// GetStatus returns the value of Status.
func (s *CreateBarTimeRangeReq) GetStatus() CreateBarTimeRangeReqStatus {
	return s.Status
}

// GetUpdateTime returns the value of UpdateTime.
func (s *CreateBarTimeRangeReq) GetUpdateTime() time.Time {
	return s.UpdateTime
}

// GetInterval returns the value of Interval.
func (s *CreateBarTimeRangeReq) GetInterval() int {
	return s.Interval
}

// GetGroups returns the value of Groups.
func (s *CreateBarTimeRangeReq) GetGroups() []int {
	return s.Groups
}

// SetStart sets the value of Start.
func (s *CreateBarTimeRangeReq) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *CreateBarTimeRangeReq) SetEnd(val time.Time) {
	s.End = val
}

// SetCount sets the value of Count.
func (s *CreateBarTimeRangeReq) SetCount(val int) {
	s.Count = val
}

// SetIntervalID sets the value of IntervalID.
func (s *CreateBarTimeRangeReq) SetIntervalID(val int) {
	s.IntervalID = val
}

// SetStatus sets the value of Status.
func (s *CreateBarTimeRangeReq) SetStatus(val CreateBarTimeRangeReqStatus) {
	s.Status = val
}

// SetUpdateTime sets the value of UpdateTime.
func (s *CreateBarTimeRangeReq) SetUpdateTime(val time.Time) {
	s.UpdateTime = val
}

// SetInterval sets the value of Interval.
func (s *CreateBarTimeRangeReq) SetInterval(val int) {
	s.Interval = val
}

// SetGroups sets the value of Groups.
func (s *CreateBarTimeRangeReq) SetGroups(val []int) {
	s.Groups = val
}

type CreateBarTimeRangeReqStatus string

const (
	CreateBarTimeRangeReqStatusPending      CreateBarTimeRangeReqStatus = "pending"
	CreateBarTimeRangeReqStatusCreated      CreateBarTimeRangeReqStatus = "created"
	CreateBarTimeRangeReqStatusClean        CreateBarTimeRangeReqStatus = "clean"
	CreateBarTimeRangeReqStatusConsolidated CreateBarTimeRangeReqStatus = "consolidated"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateBarTimeRangeReqStatus) MarshalText() ([]byte, error) {
	switch s {
	case CreateBarTimeRangeReqStatusPending:
		return []byte(s), nil
	case CreateBarTimeRangeReqStatusCreated:
		return []byte(s), nil
	case CreateBarTimeRangeReqStatusClean:
		return []byte(s), nil
	case CreateBarTimeRangeReqStatusConsolidated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateBarTimeRangeReqStatus) UnmarshalText(data []byte) error {
	switch CreateBarTimeRangeReqStatus(data) {
	case CreateBarTimeRangeReqStatusPending:
		*s = CreateBarTimeRangeReqStatusPending
		return nil
	case CreateBarTimeRangeReqStatusCreated:
		*s = CreateBarTimeRangeReqStatusCreated
		return nil
	case CreateBarTimeRangeReqStatusClean:
		*s = CreateBarTimeRangeReqStatusClean
		return nil
	case CreateBarTimeRangeReqStatusConsolidated:
		*s = CreateBarTimeRangeReqStatusConsolidated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateDataSourceReq struct {
	Name      string `json:"name"`
	Address   string `json:"address"`
	Intervals []int  `json:"intervals"`
}

// GetName returns the value of Name.
func (s *CreateDataSourceReq) GetName() string {
	return s.Name
}

// GetAddress returns the value of Address.
func (s *CreateDataSourceReq) GetAddress() string {
	return s.Address
}

// GetIntervals returns the value of Intervals.
func (s *CreateDataSourceReq) GetIntervals() []int {
	return s.Intervals
}

// SetName sets the value of Name.
func (s *CreateDataSourceReq) SetName(val string) {
	s.Name = val
}

// SetAddress sets the value of Address.
func (s *CreateDataSourceReq) SetAddress(val string) {
	s.Address = val
}

// SetIntervals sets the value of Intervals.
func (s *CreateDataSourceReq) SetIntervals(val []int) {
	s.Intervals = val
}

type CreateDividendReq struct {
	Rate            float64   `json:"rate"`
	DeclarationDate time.Time `json:"declaration_date"`
	ExDividendDate  time.Time `json:"ex_dividend_date"`
	RecordDate      time.Time `json:"record_date"`
	PayDate         time.Time `json:"pay_date"`
	Stock           []int     `json:"stock"`
}

// GetRate returns the value of Rate.
func (s *CreateDividendReq) GetRate() float64 {
	return s.Rate
}

// GetDeclarationDate returns the value of DeclarationDate.
func (s *CreateDividendReq) GetDeclarationDate() time.Time {
	return s.DeclarationDate
}

// GetExDividendDate returns the value of ExDividendDate.
func (s *CreateDividendReq) GetExDividendDate() time.Time {
	return s.ExDividendDate
}

// GetRecordDate returns the value of RecordDate.
func (s *CreateDividendReq) GetRecordDate() time.Time {
	return s.RecordDate
}

// GetPayDate returns the value of PayDate.
func (s *CreateDividendReq) GetPayDate() time.Time {
	return s.PayDate
}

// GetStock returns the value of Stock.
func (s *CreateDividendReq) GetStock() []int {
	return s.Stock
}

// SetRate sets the value of Rate.
func (s *CreateDividendReq) SetRate(val float64) {
	s.Rate = val
}

// SetDeclarationDate sets the value of DeclarationDate.
func (s *CreateDividendReq) SetDeclarationDate(val time.Time) {
	s.DeclarationDate = val
}

// SetExDividendDate sets the value of ExDividendDate.
func (s *CreateDividendReq) SetExDividendDate(val time.Time) {
	s.ExDividendDate = val
}

// SetRecordDate sets the value of RecordDate.
func (s *CreateDividendReq) SetRecordDate(val time.Time) {
	s.RecordDate = val
}

// SetPayDate sets the value of PayDate.
func (s *CreateDividendReq) SetPayDate(val time.Time) {
	s.PayDate = val
}

// SetStock sets the value of Stock.
func (s *CreateDividendReq) SetStock(val []int) {
	s.Stock = val
}

type CreateEntityReq struct {
	Active      bool      `json:"active"`
	Ticker      string    `json:"ticker"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	ListDate    time.Time `json:"list_date"`
	Options     bool      `json:"options"`
	Tradable    bool      `json:"tradable"`
	Exchanges   []int     `json:"exchanges"`
	Intervals   []int     `json:"intervals"`
	Dividends   []int     `json:"dividends"`
	Splits      []int     `json:"splits"`
	Financials  []int     `json:"financials"`
}

// GetActive returns the value of Active.
func (s *CreateEntityReq) GetActive() bool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *CreateEntityReq) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *CreateEntityReq) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateEntityReq) GetDescription() string {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *CreateEntityReq) GetListDate() time.Time {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *CreateEntityReq) GetOptions() bool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *CreateEntityReq) GetTradable() bool {
	return s.Tradable
}

// GetExchanges returns the value of Exchanges.
func (s *CreateEntityReq) GetExchanges() []int {
	return s.Exchanges
}

// GetIntervals returns the value of Intervals.
func (s *CreateEntityReq) GetIntervals() []int {
	return s.Intervals
}

// GetDividends returns the value of Dividends.
func (s *CreateEntityReq) GetDividends() []int {
	return s.Dividends
}

// GetSplits returns the value of Splits.
func (s *CreateEntityReq) GetSplits() []int {
	return s.Splits
}

// GetFinancials returns the value of Financials.
func (s *CreateEntityReq) GetFinancials() []int {
	return s.Financials
}

// SetActive sets the value of Active.
func (s *CreateEntityReq) SetActive(val bool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *CreateEntityReq) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *CreateEntityReq) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateEntityReq) SetDescription(val string) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *CreateEntityReq) SetListDate(val time.Time) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *CreateEntityReq) SetOptions(val bool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *CreateEntityReq) SetTradable(val bool) {
	s.Tradable = val
}

// SetExchanges sets the value of Exchanges.
func (s *CreateEntityReq) SetExchanges(val []int) {
	s.Exchanges = val
}

// SetIntervals sets the value of Intervals.
func (s *CreateEntityReq) SetIntervals(val []int) {
	s.Intervals = val
}

// SetDividends sets the value of Dividends.
func (s *CreateEntityReq) SetDividends(val []int) {
	s.Dividends = val
}

// SetSplits sets the value of Splits.
func (s *CreateEntityReq) SetSplits(val []int) {
	s.Splits = val
}

// SetFinancials sets the value of Financials.
func (s *CreateEntityReq) SetFinancials(val []int) {
	s.Financials = val
}

type CreateExchangeReq struct {
	Code   string `json:"code"`
	Name   string `json:"name"`
	Stocks []int  `json:"stocks"`
}

// GetCode returns the value of Code.
func (s *CreateExchangeReq) GetCode() string {
	return s.Code
}

// GetName returns the value of Name.
func (s *CreateExchangeReq) GetName() string {
	return s.Name
}

// GetStocks returns the value of Stocks.
func (s *CreateExchangeReq) GetStocks() []int {
	return s.Stocks
}

// SetCode sets the value of Code.
func (s *CreateExchangeReq) SetCode(val string) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *CreateExchangeReq) SetName(val string) {
	s.Name = val
}

// SetStocks sets the value of Stocks.
func (s *CreateExchangeReq) SetStocks(val []int) {
	s.Stocks = val
}

type CreateFinancialReq struct {
	Stock []int `json:"stock"`
}

// GetStock returns the value of Stock.
func (s *CreateFinancialReq) GetStock() []int {
	return s.Stock
}

// SetStock sets the value of Stock.
func (s *CreateFinancialReq) SetStock(val []int) {
	s.Stock = val
}

type CreateIntervalReq struct {
	Active       bool                      `json:"active"`
	Interval     CreateIntervalReqInterval `json:"interval"`
	StockID      int                       `json:"stock_id"`
	DataSourceID int                       `json:"data_source_id"`
	DataSource   int                       `json:"data_source"`
	Stock        int                       `json:"stock"`
	Bars         []int                     `json:"bars"`
	Trades       []int                     `json:"trades"`
}

// GetActive returns the value of Active.
func (s *CreateIntervalReq) GetActive() bool {
	return s.Active
}

// GetInterval returns the value of Interval.
func (s *CreateIntervalReq) GetInterval() CreateIntervalReqInterval {
	return s.Interval
}

// GetStockID returns the value of StockID.
func (s *CreateIntervalReq) GetStockID() int {
	return s.StockID
}

// GetDataSourceID returns the value of DataSourceID.
func (s *CreateIntervalReq) GetDataSourceID() int {
	return s.DataSourceID
}

// GetDataSource returns the value of DataSource.
func (s *CreateIntervalReq) GetDataSource() int {
	return s.DataSource
}

// GetStock returns the value of Stock.
func (s *CreateIntervalReq) GetStock() int {
	return s.Stock
}

// GetBars returns the value of Bars.
func (s *CreateIntervalReq) GetBars() []int {
	return s.Bars
}

// GetTrades returns the value of Trades.
func (s *CreateIntervalReq) GetTrades() []int {
	return s.Trades
}

// SetActive sets the value of Active.
func (s *CreateIntervalReq) SetActive(val bool) {
	s.Active = val
}

// SetInterval sets the value of Interval.
func (s *CreateIntervalReq) SetInterval(val CreateIntervalReqInterval) {
	s.Interval = val
}

// SetStockID sets the value of StockID.
func (s *CreateIntervalReq) SetStockID(val int) {
	s.StockID = val
}

// SetDataSourceID sets the value of DataSourceID.
func (s *CreateIntervalReq) SetDataSourceID(val int) {
	s.DataSourceID = val
}

// SetDataSource sets the value of DataSource.
func (s *CreateIntervalReq) SetDataSource(val int) {
	s.DataSource = val
}

// SetStock sets the value of Stock.
func (s *CreateIntervalReq) SetStock(val int) {
	s.Stock = val
}

// SetBars sets the value of Bars.
func (s *CreateIntervalReq) SetBars(val []int) {
	s.Bars = val
}

// SetTrades sets the value of Trades.
func (s *CreateIntervalReq) SetTrades(val []int) {
	s.Trades = val
}

type CreateIntervalReqInterval string

const (
	CreateIntervalReqIntervalTrades  CreateIntervalReqInterval = "trades"
	CreateIntervalReqInterval1min    CreateIntervalReqInterval = "1min"
	CreateIntervalReqIntervalDaily   CreateIntervalReqInterval = "daily"
	CreateIntervalReqIntervalMonthly CreateIntervalReqInterval = "monthly"
	CreateIntervalReqIntervalYearly  CreateIntervalReqInterval = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateIntervalReqInterval) MarshalText() ([]byte, error) {
	switch s {
	case CreateIntervalReqIntervalTrades:
		return []byte(s), nil
	case CreateIntervalReqInterval1min:
		return []byte(s), nil
	case CreateIntervalReqIntervalDaily:
		return []byte(s), nil
	case CreateIntervalReqIntervalMonthly:
		return []byte(s), nil
	case CreateIntervalReqIntervalYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateIntervalReqInterval) UnmarshalText(data []byte) error {
	switch CreateIntervalReqInterval(data) {
	case CreateIntervalReqIntervalTrades:
		*s = CreateIntervalReqIntervalTrades
		return nil
	case CreateIntervalReqInterval1min:
		*s = CreateIntervalReqInterval1min
		return nil
	case CreateIntervalReqIntervalDaily:
		*s = CreateIntervalReqIntervalDaily
		return nil
	case CreateIntervalReqIntervalMonthly:
		*s = CreateIntervalReqIntervalMonthly
		return nil
	case CreateIntervalReqIntervalYearly:
		*s = CreateIntervalReqIntervalYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateMarketHoursReq struct {
	Date       time.Time `json:"date"`
	StartTime  time.Time `json:"start_time"`
	EndTime    time.Time `json:"end_time"`
	MarketInfo OptInt    `json:"market_info"`
}

// GetDate returns the value of Date.
func (s *CreateMarketHoursReq) GetDate() time.Time {
	return s.Date
}

// GetStartTime returns the value of StartTime.
func (s *CreateMarketHoursReq) GetStartTime() time.Time {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *CreateMarketHoursReq) GetEndTime() time.Time {
	return s.EndTime
}

// GetMarketInfo returns the value of MarketInfo.
func (s *CreateMarketHoursReq) GetMarketInfo() OptInt {
	return s.MarketInfo
}

// SetDate sets the value of Date.
func (s *CreateMarketHoursReq) SetDate(val time.Time) {
	s.Date = val
}

// SetStartTime sets the value of StartTime.
func (s *CreateMarketHoursReq) SetStartTime(val time.Time) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *CreateMarketHoursReq) SetEndTime(val time.Time) {
	s.EndTime = val
}

// SetMarketInfo sets the value of MarketInfo.
func (s *CreateMarketHoursReq) SetMarketInfo(val OptInt) {
	s.MarketInfo = val
}

type CreateMarketInfoReq struct {
	HoursStart time.Time `json:"hours_start"`
	HoursEnd   time.Time `json:"hours_end"`
	Hours      []int     `json:"hours"`
}

// GetHoursStart returns the value of HoursStart.
func (s *CreateMarketInfoReq) GetHoursStart() time.Time {
	return s.HoursStart
}

// GetHoursEnd returns the value of HoursEnd.
func (s *CreateMarketInfoReq) GetHoursEnd() time.Time {
	return s.HoursEnd
}

// GetHours returns the value of Hours.
func (s *CreateMarketInfoReq) GetHours() []int {
	return s.Hours
}

// SetHoursStart sets the value of HoursStart.
func (s *CreateMarketInfoReq) SetHoursStart(val time.Time) {
	s.HoursStart = val
}

// SetHoursEnd sets the value of HoursEnd.
func (s *CreateMarketInfoReq) SetHoursEnd(val time.Time) {
	s.HoursEnd = val
}

// SetHours sets the value of Hours.
func (s *CreateMarketInfoReq) SetHours(val []int) {
	s.Hours = val
}

type CreateSplitReq struct {
	ExecutionDate time.Time `json:"execution_date"`
	From          float64   `json:"from"`
	To            float64   `json:"to"`
	Stock         OptInt    `json:"stock"`
}

// GetExecutionDate returns the value of ExecutionDate.
func (s *CreateSplitReq) GetExecutionDate() time.Time {
	return s.ExecutionDate
}

// GetFrom returns the value of From.
func (s *CreateSplitReq) GetFrom() float64 {
	return s.From
}

// GetTo returns the value of To.
func (s *CreateSplitReq) GetTo() float64 {
	return s.To
}

// GetStock returns the value of Stock.
func (s *CreateSplitReq) GetStock() OptInt {
	return s.Stock
}

// SetExecutionDate sets the value of ExecutionDate.
func (s *CreateSplitReq) SetExecutionDate(val time.Time) {
	s.ExecutionDate = val
}

// SetFrom sets the value of From.
func (s *CreateSplitReq) SetFrom(val float64) {
	s.From = val
}

// SetTo sets the value of To.
func (s *CreateSplitReq) SetTo(val float64) {
	s.To = val
}

// SetStock sets the value of Stock.
func (s *CreateSplitReq) SetStock(val OptInt) {
	s.Stock = val
}

type CreateTradeConditionReq struct {
	Condition string `json:"condition"`
	Record    []int  `json:"record"`
}

// GetCondition returns the value of Condition.
func (s *CreateTradeConditionReq) GetCondition() string {
	return s.Condition
}

// GetRecord returns the value of Record.
func (s *CreateTradeConditionReq) GetRecord() []int {
	return s.Record
}

// SetCondition sets the value of Condition.
func (s *CreateTradeConditionReq) SetCondition(val string) {
	s.Condition = val
}

// SetRecord sets the value of Record.
func (s *CreateTradeConditionReq) SetRecord(val []int) {
	s.Record = val
}

type CreateTradeCorrectionReq struct {
	Correction string `json:"correction"`
	Record     []int  `json:"record"`
}

// GetCorrection returns the value of Correction.
func (s *CreateTradeCorrectionReq) GetCorrection() string {
	return s.Correction
}

// GetRecord returns the value of Record.
func (s *CreateTradeCorrectionReq) GetRecord() []int {
	return s.Record
}

// SetCorrection sets the value of Correction.
func (s *CreateTradeCorrectionReq) SetCorrection(val string) {
	s.Correction = val
}

// SetRecord sets the value of Record.
func (s *CreateTradeCorrectionReq) SetRecord(val []int) {
	s.Record = val
}

type CreateTradeRecordReq struct {
	Price       float64   `json:"price"`
	Timestamp   time.Time `json:"timestamp"`
	Volume      int32     `json:"volume"`
	TimeRangeID int       `json:"time_range_id"`
	TimeRange   int       `json:"time_range"`
	Conditions  []int     `json:"conditions"`
	Correction  []int     `json:"correction"`
	Exchange    []int     `json:"exchange"`
}

// GetPrice returns the value of Price.
func (s *CreateTradeRecordReq) GetPrice() float64 {
	return s.Price
}

// GetTimestamp returns the value of Timestamp.
func (s *CreateTradeRecordReq) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *CreateTradeRecordReq) GetVolume() int32 {
	return s.Volume
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *CreateTradeRecordReq) GetTimeRangeID() int {
	return s.TimeRangeID
}

// GetTimeRange returns the value of TimeRange.
func (s *CreateTradeRecordReq) GetTimeRange() int {
	return s.TimeRange
}

// GetConditions returns the value of Conditions.
func (s *CreateTradeRecordReq) GetConditions() []int {
	return s.Conditions
}

// GetCorrection returns the value of Correction.
func (s *CreateTradeRecordReq) GetCorrection() []int {
	return s.Correction
}

// GetExchange returns the value of Exchange.
func (s *CreateTradeRecordReq) GetExchange() []int {
	return s.Exchange
}

// SetPrice sets the value of Price.
func (s *CreateTradeRecordReq) SetPrice(val float64) {
	s.Price = val
}

// SetTimestamp sets the value of Timestamp.
func (s *CreateTradeRecordReq) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *CreateTradeRecordReq) SetVolume(val int32) {
	s.Volume = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *CreateTradeRecordReq) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

// SetTimeRange sets the value of TimeRange.
func (s *CreateTradeRecordReq) SetTimeRange(val int) {
	s.TimeRange = val
}

// SetConditions sets the value of Conditions.
func (s *CreateTradeRecordReq) SetConditions(val []int) {
	s.Conditions = val
}

// SetCorrection sets the value of Correction.
func (s *CreateTradeRecordReq) SetCorrection(val []int) {
	s.Correction = val
}

// SetExchange sets the value of Exchange.
func (s *CreateTradeRecordReq) SetExchange(val []int) {
	s.Exchange = val
}

type CreateTradeTimeRangeReq struct {
	Start      time.Time `json:"start"`
	End        time.Time `json:"end"`
	IntervalID int       `json:"interval_id"`
	Interval   int       `json:"interval"`
	Records    []int     `json:"records"`
}

// GetStart returns the value of Start.
func (s *CreateTradeTimeRangeReq) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *CreateTradeTimeRangeReq) GetEnd() time.Time {
	return s.End
}

// GetIntervalID returns the value of IntervalID.
func (s *CreateTradeTimeRangeReq) GetIntervalID() int {
	return s.IntervalID
}

// GetInterval returns the value of Interval.
func (s *CreateTradeTimeRangeReq) GetInterval() int {
	return s.Interval
}

// GetRecords returns the value of Records.
func (s *CreateTradeTimeRangeReq) GetRecords() []int {
	return s.Records
}

// SetStart sets the value of Start.
func (s *CreateTradeTimeRangeReq) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *CreateTradeTimeRangeReq) SetEnd(val time.Time) {
	s.End = val
}

// SetIntervalID sets the value of IntervalID.
func (s *CreateTradeTimeRangeReq) SetIntervalID(val int) {
	s.IntervalID = val
}

// SetInterval sets the value of Interval.
func (s *CreateTradeTimeRangeReq) SetInterval(val int) {
	s.Interval = val
}

// SetRecords sets the value of Records.
func (s *CreateTradeTimeRangeReq) SetRecords(val []int) {
	s.Records = val
}

// Ref: #/components/schemas/DataSourceCreate
type DataSourceCreate struct {
	ID      int    `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
}

// GetID returns the value of ID.
func (s *DataSourceCreate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *DataSourceCreate) GetName() string {
	return s.Name
}

// GetAddress returns the value of Address.
func (s *DataSourceCreate) GetAddress() string {
	return s.Address
}

// SetID sets the value of ID.
func (s *DataSourceCreate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DataSourceCreate) SetName(val string) {
	s.Name = val
}

// SetAddress sets the value of Address.
func (s *DataSourceCreate) SetAddress(val string) {
	s.Address = val
}

func (*DataSourceCreate) createDataSourceRes() {}

// Ref: #/components/schemas/DataSource_IntervalsList
type DataSourceIntervalsList struct {
	ID           int                             `json:"id"`
	Active       bool                            `json:"active"`
	Interval     DataSourceIntervalsListInterval `json:"interval"`
	StockID      int                             `json:"stock_id"`
	DataSourceID int                             `json:"data_source_id"`
}

// GetID returns the value of ID.
func (s *DataSourceIntervalsList) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *DataSourceIntervalsList) GetActive() bool {
	return s.Active
}

// GetInterval returns the value of Interval.
func (s *DataSourceIntervalsList) GetInterval() DataSourceIntervalsListInterval {
	return s.Interval
}

// GetStockID returns the value of StockID.
func (s *DataSourceIntervalsList) GetStockID() int {
	return s.StockID
}

// GetDataSourceID returns the value of DataSourceID.
func (s *DataSourceIntervalsList) GetDataSourceID() int {
	return s.DataSourceID
}

// SetID sets the value of ID.
func (s *DataSourceIntervalsList) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *DataSourceIntervalsList) SetActive(val bool) {
	s.Active = val
}

// SetInterval sets the value of Interval.
func (s *DataSourceIntervalsList) SetInterval(val DataSourceIntervalsListInterval) {
	s.Interval = val
}

// SetStockID sets the value of StockID.
func (s *DataSourceIntervalsList) SetStockID(val int) {
	s.StockID = val
}

// SetDataSourceID sets the value of DataSourceID.
func (s *DataSourceIntervalsList) SetDataSourceID(val int) {
	s.DataSourceID = val
}

type DataSourceIntervalsListInterval string

const (
	DataSourceIntervalsListIntervalTrades  DataSourceIntervalsListInterval = "trades"
	DataSourceIntervalsListInterval1min    DataSourceIntervalsListInterval = "1min"
	DataSourceIntervalsListIntervalDaily   DataSourceIntervalsListInterval = "daily"
	DataSourceIntervalsListIntervalMonthly DataSourceIntervalsListInterval = "monthly"
	DataSourceIntervalsListIntervalYearly  DataSourceIntervalsListInterval = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s DataSourceIntervalsListInterval) MarshalText() ([]byte, error) {
	switch s {
	case DataSourceIntervalsListIntervalTrades:
		return []byte(s), nil
	case DataSourceIntervalsListInterval1min:
		return []byte(s), nil
	case DataSourceIntervalsListIntervalDaily:
		return []byte(s), nil
	case DataSourceIntervalsListIntervalMonthly:
		return []byte(s), nil
	case DataSourceIntervalsListIntervalYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataSourceIntervalsListInterval) UnmarshalText(data []byte) error {
	switch DataSourceIntervalsListInterval(data) {
	case DataSourceIntervalsListIntervalTrades:
		*s = DataSourceIntervalsListIntervalTrades
		return nil
	case DataSourceIntervalsListInterval1min:
		*s = DataSourceIntervalsListInterval1min
		return nil
	case DataSourceIntervalsListIntervalDaily:
		*s = DataSourceIntervalsListIntervalDaily
		return nil
	case DataSourceIntervalsListIntervalMonthly:
		*s = DataSourceIntervalsListIntervalMonthly
		return nil
	case DataSourceIntervalsListIntervalYearly:
		*s = DataSourceIntervalsListIntervalYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DataSourceList
type DataSourceList struct {
	ID      int    `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
}

// GetID returns the value of ID.
func (s *DataSourceList) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *DataSourceList) GetName() string {
	return s.Name
}

// GetAddress returns the value of Address.
func (s *DataSourceList) GetAddress() string {
	return s.Address
}

// SetID sets the value of ID.
func (s *DataSourceList) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DataSourceList) SetName(val string) {
	s.Name = val
}

// SetAddress sets the value of Address.
func (s *DataSourceList) SetAddress(val string) {
	s.Address = val
}

// Ref: #/components/schemas/DataSourceRead
type DataSourceRead struct {
	ID      int    `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
}

// GetID returns the value of ID.
func (s *DataSourceRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *DataSourceRead) GetName() string {
	return s.Name
}

// GetAddress returns the value of Address.
func (s *DataSourceRead) GetAddress() string {
	return s.Address
}

// SetID sets the value of ID.
func (s *DataSourceRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DataSourceRead) SetName(val string) {
	s.Name = val
}

// SetAddress sets the value of Address.
func (s *DataSourceRead) SetAddress(val string) {
	s.Address = val
}

func (*DataSourceRead) readDataSourceRes() {}

// Ref: #/components/schemas/DataSourceUpdate
type DataSourceUpdate struct {
	ID      int    `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
}

// GetID returns the value of ID.
func (s *DataSourceUpdate) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *DataSourceUpdate) GetName() string {
	return s.Name
}

// GetAddress returns the value of Address.
func (s *DataSourceUpdate) GetAddress() string {
	return s.Address
}

// SetID sets the value of ID.
func (s *DataSourceUpdate) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DataSourceUpdate) SetName(val string) {
	s.Name = val
}

// SetAddress sets the value of Address.
func (s *DataSourceUpdate) SetAddress(val string) {
	s.Address = val
}

func (*DataSourceUpdate) updateDataSourceRes() {}

// DeleteBarGroupNoContent is response for DeleteBarGroup operation.
type DeleteBarGroupNoContent struct{}

func (*DeleteBarGroupNoContent) deleteBarGroupRes() {}

// DeleteBarRecordNoContent is response for DeleteBarRecord operation.
type DeleteBarRecordNoContent struct{}

func (*DeleteBarRecordNoContent) deleteBarRecordRes() {}

// DeleteBarTimeRangeNoContent is response for DeleteBarTimeRange operation.
type DeleteBarTimeRangeNoContent struct{}

func (*DeleteBarTimeRangeNoContent) deleteBarTimeRangeRes() {}

// DeleteDataSourceNoContent is response for DeleteDataSource operation.
type DeleteDataSourceNoContent struct{}

func (*DeleteDataSourceNoContent) deleteDataSourceRes() {}

// DeleteDividendNoContent is response for DeleteDividend operation.
type DeleteDividendNoContent struct{}

func (*DeleteDividendNoContent) deleteDividendRes() {}

// DeleteEntityNoContent is response for DeleteEntity operation.
type DeleteEntityNoContent struct{}

func (*DeleteEntityNoContent) deleteEntityRes() {}

// DeleteExchangeNoContent is response for DeleteExchange operation.
type DeleteExchangeNoContent struct{}

func (*DeleteExchangeNoContent) deleteExchangeRes() {}

// DeleteFinancialNoContent is response for DeleteFinancial operation.
type DeleteFinancialNoContent struct{}

func (*DeleteFinancialNoContent) deleteFinancialRes() {}

// DeleteIntervalNoContent is response for DeleteInterval operation.
type DeleteIntervalNoContent struct{}

func (*DeleteIntervalNoContent) deleteIntervalRes() {}

// DeleteMarketHoursNoContent is response for DeleteMarketHours operation.
type DeleteMarketHoursNoContent struct{}

func (*DeleteMarketHoursNoContent) deleteMarketHoursRes() {}

// DeleteMarketInfoNoContent is response for DeleteMarketInfo operation.
type DeleteMarketInfoNoContent struct{}

func (*DeleteMarketInfoNoContent) deleteMarketInfoRes() {}

// DeleteSplitNoContent is response for DeleteSplit operation.
type DeleteSplitNoContent struct{}

func (*DeleteSplitNoContent) deleteSplitRes() {}

// DeleteTradeConditionNoContent is response for DeleteTradeCondition operation.
type DeleteTradeConditionNoContent struct{}

func (*DeleteTradeConditionNoContent) deleteTradeConditionRes() {}

// DeleteTradeCorrectionNoContent is response for DeleteTradeCorrection operation.
type DeleteTradeCorrectionNoContent struct{}

func (*DeleteTradeCorrectionNoContent) deleteTradeCorrectionRes() {}

// DeleteTradeRecordNoContent is response for DeleteTradeRecord operation.
type DeleteTradeRecordNoContent struct{}

func (*DeleteTradeRecordNoContent) deleteTradeRecordRes() {}

// DeleteTradeTimeRangeNoContent is response for DeleteTradeTimeRange operation.
type DeleteTradeTimeRangeNoContent struct{}

func (*DeleteTradeTimeRangeNoContent) deleteTradeTimeRangeRes() {}

// Ref: #/components/schemas/DividendCreate
type DividendCreate struct {
	ID              int       `json:"id"`
	Rate            float64   `json:"rate"`
	DeclarationDate time.Time `json:"declaration_date"`
	ExDividendDate  time.Time `json:"ex_dividend_date"`
	RecordDate      time.Time `json:"record_date"`
	PayDate         time.Time `json:"pay_date"`
}

// GetID returns the value of ID.
func (s *DividendCreate) GetID() int {
	return s.ID
}

// GetRate returns the value of Rate.
func (s *DividendCreate) GetRate() float64 {
	return s.Rate
}

// GetDeclarationDate returns the value of DeclarationDate.
func (s *DividendCreate) GetDeclarationDate() time.Time {
	return s.DeclarationDate
}

// GetExDividendDate returns the value of ExDividendDate.
func (s *DividendCreate) GetExDividendDate() time.Time {
	return s.ExDividendDate
}

// GetRecordDate returns the value of RecordDate.
func (s *DividendCreate) GetRecordDate() time.Time {
	return s.RecordDate
}

// GetPayDate returns the value of PayDate.
func (s *DividendCreate) GetPayDate() time.Time {
	return s.PayDate
}

// SetID sets the value of ID.
func (s *DividendCreate) SetID(val int) {
	s.ID = val
}

// SetRate sets the value of Rate.
func (s *DividendCreate) SetRate(val float64) {
	s.Rate = val
}

// SetDeclarationDate sets the value of DeclarationDate.
func (s *DividendCreate) SetDeclarationDate(val time.Time) {
	s.DeclarationDate = val
}

// SetExDividendDate sets the value of ExDividendDate.
func (s *DividendCreate) SetExDividendDate(val time.Time) {
	s.ExDividendDate = val
}

// SetRecordDate sets the value of RecordDate.
func (s *DividendCreate) SetRecordDate(val time.Time) {
	s.RecordDate = val
}

// SetPayDate sets the value of PayDate.
func (s *DividendCreate) SetPayDate(val time.Time) {
	s.PayDate = val
}

func (*DividendCreate) createDividendRes() {}

// Ref: #/components/schemas/DividendList
type DividendList struct {
	ID              int       `json:"id"`
	Rate            float64   `json:"rate"`
	DeclarationDate time.Time `json:"declaration_date"`
	ExDividendDate  time.Time `json:"ex_dividend_date"`
	RecordDate      time.Time `json:"record_date"`
	PayDate         time.Time `json:"pay_date"`
}

// GetID returns the value of ID.
func (s *DividendList) GetID() int {
	return s.ID
}

// GetRate returns the value of Rate.
func (s *DividendList) GetRate() float64 {
	return s.Rate
}

// GetDeclarationDate returns the value of DeclarationDate.
func (s *DividendList) GetDeclarationDate() time.Time {
	return s.DeclarationDate
}

// GetExDividendDate returns the value of ExDividendDate.
func (s *DividendList) GetExDividendDate() time.Time {
	return s.ExDividendDate
}

// GetRecordDate returns the value of RecordDate.
func (s *DividendList) GetRecordDate() time.Time {
	return s.RecordDate
}

// GetPayDate returns the value of PayDate.
func (s *DividendList) GetPayDate() time.Time {
	return s.PayDate
}

// SetID sets the value of ID.
func (s *DividendList) SetID(val int) {
	s.ID = val
}

// SetRate sets the value of Rate.
func (s *DividendList) SetRate(val float64) {
	s.Rate = val
}

// SetDeclarationDate sets the value of DeclarationDate.
func (s *DividendList) SetDeclarationDate(val time.Time) {
	s.DeclarationDate = val
}

// SetExDividendDate sets the value of ExDividendDate.
func (s *DividendList) SetExDividendDate(val time.Time) {
	s.ExDividendDate = val
}

// SetRecordDate sets the value of RecordDate.
func (s *DividendList) SetRecordDate(val time.Time) {
	s.RecordDate = val
}

// SetPayDate sets the value of PayDate.
func (s *DividendList) SetPayDate(val time.Time) {
	s.PayDate = val
}

// Ref: #/components/schemas/DividendRead
type DividendRead struct {
	ID              int       `json:"id"`
	Rate            float64   `json:"rate"`
	DeclarationDate time.Time `json:"declaration_date"`
	ExDividendDate  time.Time `json:"ex_dividend_date"`
	RecordDate      time.Time `json:"record_date"`
	PayDate         time.Time `json:"pay_date"`
}

// GetID returns the value of ID.
func (s *DividendRead) GetID() int {
	return s.ID
}

// GetRate returns the value of Rate.
func (s *DividendRead) GetRate() float64 {
	return s.Rate
}

// GetDeclarationDate returns the value of DeclarationDate.
func (s *DividendRead) GetDeclarationDate() time.Time {
	return s.DeclarationDate
}

// GetExDividendDate returns the value of ExDividendDate.
func (s *DividendRead) GetExDividendDate() time.Time {
	return s.ExDividendDate
}

// GetRecordDate returns the value of RecordDate.
func (s *DividendRead) GetRecordDate() time.Time {
	return s.RecordDate
}

// GetPayDate returns the value of PayDate.
func (s *DividendRead) GetPayDate() time.Time {
	return s.PayDate
}

// SetID sets the value of ID.
func (s *DividendRead) SetID(val int) {
	s.ID = val
}

// SetRate sets the value of Rate.
func (s *DividendRead) SetRate(val float64) {
	s.Rate = val
}

// SetDeclarationDate sets the value of DeclarationDate.
func (s *DividendRead) SetDeclarationDate(val time.Time) {
	s.DeclarationDate = val
}

// SetExDividendDate sets the value of ExDividendDate.
func (s *DividendRead) SetExDividendDate(val time.Time) {
	s.ExDividendDate = val
}

// SetRecordDate sets the value of RecordDate.
func (s *DividendRead) SetRecordDate(val time.Time) {
	s.RecordDate = val
}

// SetPayDate sets the value of PayDate.
func (s *DividendRead) SetPayDate(val time.Time) {
	s.PayDate = val
}

func (*DividendRead) readDividendRes() {}

// Ref: #/components/schemas/Dividend_StockList
type DividendStockList struct {
	ID          int       `json:"id"`
	Active      bool      `json:"active"`
	Ticker      string    `json:"ticker"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	ListDate    time.Time `json:"list_date"`
	Options     bool      `json:"options"`
	Tradable    bool      `json:"tradable"`
}

// GetID returns the value of ID.
func (s *DividendStockList) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *DividendStockList) GetActive() bool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *DividendStockList) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *DividendStockList) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *DividendStockList) GetDescription() string {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *DividendStockList) GetListDate() time.Time {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *DividendStockList) GetOptions() bool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *DividendStockList) GetTradable() bool {
	return s.Tradable
}

// SetID sets the value of ID.
func (s *DividendStockList) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *DividendStockList) SetActive(val bool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *DividendStockList) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *DividendStockList) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *DividendStockList) SetDescription(val string) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *DividendStockList) SetListDate(val time.Time) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *DividendStockList) SetOptions(val bool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *DividendStockList) SetTradable(val bool) {
	s.Tradable = val
}

// Ref: #/components/schemas/DividendUpdate
type DividendUpdate struct {
	ID              int       `json:"id"`
	Rate            float64   `json:"rate"`
	DeclarationDate time.Time `json:"declaration_date"`
	ExDividendDate  time.Time `json:"ex_dividend_date"`
	RecordDate      time.Time `json:"record_date"`
	PayDate         time.Time `json:"pay_date"`
}

// GetID returns the value of ID.
func (s *DividendUpdate) GetID() int {
	return s.ID
}

// GetRate returns the value of Rate.
func (s *DividendUpdate) GetRate() float64 {
	return s.Rate
}

// GetDeclarationDate returns the value of DeclarationDate.
func (s *DividendUpdate) GetDeclarationDate() time.Time {
	return s.DeclarationDate
}

// GetExDividendDate returns the value of ExDividendDate.
func (s *DividendUpdate) GetExDividendDate() time.Time {
	return s.ExDividendDate
}

// GetRecordDate returns the value of RecordDate.
func (s *DividendUpdate) GetRecordDate() time.Time {
	return s.RecordDate
}

// GetPayDate returns the value of PayDate.
func (s *DividendUpdate) GetPayDate() time.Time {
	return s.PayDate
}

// SetID sets the value of ID.
func (s *DividendUpdate) SetID(val int) {
	s.ID = val
}

// SetRate sets the value of Rate.
func (s *DividendUpdate) SetRate(val float64) {
	s.Rate = val
}

// SetDeclarationDate sets the value of DeclarationDate.
func (s *DividendUpdate) SetDeclarationDate(val time.Time) {
	s.DeclarationDate = val
}

// SetExDividendDate sets the value of ExDividendDate.
func (s *DividendUpdate) SetExDividendDate(val time.Time) {
	s.ExDividendDate = val
}

// SetRecordDate sets the value of RecordDate.
func (s *DividendUpdate) SetRecordDate(val time.Time) {
	s.RecordDate = val
}

// SetPayDate sets the value of PayDate.
func (s *DividendUpdate) SetPayDate(val time.Time) {
	s.PayDate = val
}

func (*DividendUpdate) updateDividendRes() {}

// Ref: #/components/schemas/EntityCreate
type EntityCreate struct {
	ID          int       `json:"id"`
	Active      bool      `json:"active"`
	Ticker      string    `json:"ticker"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	ListDate    time.Time `json:"list_date"`
	Options     bool      `json:"options"`
	Tradable    bool      `json:"tradable"`
}

// GetID returns the value of ID.
func (s *EntityCreate) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *EntityCreate) GetActive() bool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *EntityCreate) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *EntityCreate) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *EntityCreate) GetDescription() string {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *EntityCreate) GetListDate() time.Time {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *EntityCreate) GetOptions() bool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *EntityCreate) GetTradable() bool {
	return s.Tradable
}

// SetID sets the value of ID.
func (s *EntityCreate) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *EntityCreate) SetActive(val bool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *EntityCreate) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *EntityCreate) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *EntityCreate) SetDescription(val string) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *EntityCreate) SetListDate(val time.Time) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *EntityCreate) SetOptions(val bool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *EntityCreate) SetTradable(val bool) {
	s.Tradable = val
}

func (*EntityCreate) createEntityRes() {}

// Ref: #/components/schemas/Entity_DividendsList
type EntityDividendsList struct {
	ID              int       `json:"id"`
	Rate            float64   `json:"rate"`
	DeclarationDate time.Time `json:"declaration_date"`
	ExDividendDate  time.Time `json:"ex_dividend_date"`
	RecordDate      time.Time `json:"record_date"`
	PayDate         time.Time `json:"pay_date"`
}

// GetID returns the value of ID.
func (s *EntityDividendsList) GetID() int {
	return s.ID
}

// GetRate returns the value of Rate.
func (s *EntityDividendsList) GetRate() float64 {
	return s.Rate
}

// GetDeclarationDate returns the value of DeclarationDate.
func (s *EntityDividendsList) GetDeclarationDate() time.Time {
	return s.DeclarationDate
}

// GetExDividendDate returns the value of ExDividendDate.
func (s *EntityDividendsList) GetExDividendDate() time.Time {
	return s.ExDividendDate
}

// GetRecordDate returns the value of RecordDate.
func (s *EntityDividendsList) GetRecordDate() time.Time {
	return s.RecordDate
}

// GetPayDate returns the value of PayDate.
func (s *EntityDividendsList) GetPayDate() time.Time {
	return s.PayDate
}

// SetID sets the value of ID.
func (s *EntityDividendsList) SetID(val int) {
	s.ID = val
}

// SetRate sets the value of Rate.
func (s *EntityDividendsList) SetRate(val float64) {
	s.Rate = val
}

// SetDeclarationDate sets the value of DeclarationDate.
func (s *EntityDividendsList) SetDeclarationDate(val time.Time) {
	s.DeclarationDate = val
}

// SetExDividendDate sets the value of ExDividendDate.
func (s *EntityDividendsList) SetExDividendDate(val time.Time) {
	s.ExDividendDate = val
}

// SetRecordDate sets the value of RecordDate.
func (s *EntityDividendsList) SetRecordDate(val time.Time) {
	s.RecordDate = val
}

// SetPayDate sets the value of PayDate.
func (s *EntityDividendsList) SetPayDate(val time.Time) {
	s.PayDate = val
}

// Ref: #/components/schemas/Entity_ExchangesList
type EntityExchangesList struct {
	ID   int    `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *EntityExchangesList) GetID() int {
	return s.ID
}

// GetCode returns the value of Code.
func (s *EntityExchangesList) GetCode() string {
	return s.Code
}

// GetName returns the value of Name.
func (s *EntityExchangesList) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *EntityExchangesList) SetID(val int) {
	s.ID = val
}

// SetCode sets the value of Code.
func (s *EntityExchangesList) SetCode(val string) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *EntityExchangesList) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/Entity_FinancialsList
type EntityFinancialsList struct {
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *EntityFinancialsList) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *EntityFinancialsList) SetID(val int) {
	s.ID = val
}

// Ref: #/components/schemas/Entity_IntervalsList
type EntityIntervalsList struct {
	ID           int                         `json:"id"`
	Active       bool                        `json:"active"`
	Interval     EntityIntervalsListInterval `json:"interval"`
	StockID      int                         `json:"stock_id"`
	DataSourceID int                         `json:"data_source_id"`
}

// GetID returns the value of ID.
func (s *EntityIntervalsList) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *EntityIntervalsList) GetActive() bool {
	return s.Active
}

// GetInterval returns the value of Interval.
func (s *EntityIntervalsList) GetInterval() EntityIntervalsListInterval {
	return s.Interval
}

// GetStockID returns the value of StockID.
func (s *EntityIntervalsList) GetStockID() int {
	return s.StockID
}

// GetDataSourceID returns the value of DataSourceID.
func (s *EntityIntervalsList) GetDataSourceID() int {
	return s.DataSourceID
}

// SetID sets the value of ID.
func (s *EntityIntervalsList) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *EntityIntervalsList) SetActive(val bool) {
	s.Active = val
}

// SetInterval sets the value of Interval.
func (s *EntityIntervalsList) SetInterval(val EntityIntervalsListInterval) {
	s.Interval = val
}

// SetStockID sets the value of StockID.
func (s *EntityIntervalsList) SetStockID(val int) {
	s.StockID = val
}

// SetDataSourceID sets the value of DataSourceID.
func (s *EntityIntervalsList) SetDataSourceID(val int) {
	s.DataSourceID = val
}

type EntityIntervalsListInterval string

const (
	EntityIntervalsListIntervalTrades  EntityIntervalsListInterval = "trades"
	EntityIntervalsListInterval1min    EntityIntervalsListInterval = "1min"
	EntityIntervalsListIntervalDaily   EntityIntervalsListInterval = "daily"
	EntityIntervalsListIntervalMonthly EntityIntervalsListInterval = "monthly"
	EntityIntervalsListIntervalYearly  EntityIntervalsListInterval = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s EntityIntervalsListInterval) MarshalText() ([]byte, error) {
	switch s {
	case EntityIntervalsListIntervalTrades:
		return []byte(s), nil
	case EntityIntervalsListInterval1min:
		return []byte(s), nil
	case EntityIntervalsListIntervalDaily:
		return []byte(s), nil
	case EntityIntervalsListIntervalMonthly:
		return []byte(s), nil
	case EntityIntervalsListIntervalYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EntityIntervalsListInterval) UnmarshalText(data []byte) error {
	switch EntityIntervalsListInterval(data) {
	case EntityIntervalsListIntervalTrades:
		*s = EntityIntervalsListIntervalTrades
		return nil
	case EntityIntervalsListInterval1min:
		*s = EntityIntervalsListInterval1min
		return nil
	case EntityIntervalsListIntervalDaily:
		*s = EntityIntervalsListIntervalDaily
		return nil
	case EntityIntervalsListIntervalMonthly:
		*s = EntityIntervalsListIntervalMonthly
		return nil
	case EntityIntervalsListIntervalYearly:
		*s = EntityIntervalsListIntervalYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EntityList
type EntityList struct {
	ID          int       `json:"id"`
	Active      bool      `json:"active"`
	Ticker      string    `json:"ticker"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	ListDate    time.Time `json:"list_date"`
	Options     bool      `json:"options"`
	Tradable    bool      `json:"tradable"`
}

// GetID returns the value of ID.
func (s *EntityList) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *EntityList) GetActive() bool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *EntityList) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *EntityList) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *EntityList) GetDescription() string {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *EntityList) GetListDate() time.Time {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *EntityList) GetOptions() bool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *EntityList) GetTradable() bool {
	return s.Tradable
}

// SetID sets the value of ID.
func (s *EntityList) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *EntityList) SetActive(val bool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *EntityList) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *EntityList) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *EntityList) SetDescription(val string) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *EntityList) SetListDate(val time.Time) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *EntityList) SetOptions(val bool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *EntityList) SetTradable(val bool) {
	s.Tradable = val
}

// Ref: #/components/schemas/EntityRead
type EntityRead struct {
	ID          int       `json:"id"`
	Active      bool      `json:"active"`
	Ticker      string    `json:"ticker"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	ListDate    time.Time `json:"list_date"`
	Options     bool      `json:"options"`
	Tradable    bool      `json:"tradable"`
}

// GetID returns the value of ID.
func (s *EntityRead) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *EntityRead) GetActive() bool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *EntityRead) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *EntityRead) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *EntityRead) GetDescription() string {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *EntityRead) GetListDate() time.Time {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *EntityRead) GetOptions() bool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *EntityRead) GetTradable() bool {
	return s.Tradable
}

// SetID sets the value of ID.
func (s *EntityRead) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *EntityRead) SetActive(val bool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *EntityRead) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *EntityRead) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *EntityRead) SetDescription(val string) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *EntityRead) SetListDate(val time.Time) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *EntityRead) SetOptions(val bool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *EntityRead) SetTradable(val bool) {
	s.Tradable = val
}

func (*EntityRead) readEntityRes() {}

// Ref: #/components/schemas/Entity_SplitsList
type EntitySplitsList struct {
	ID            int       `json:"id"`
	ExecutionDate time.Time `json:"execution_date"`
	From          float64   `json:"from"`
	To            float64   `json:"to"`
}

// GetID returns the value of ID.
func (s *EntitySplitsList) GetID() int {
	return s.ID
}

// GetExecutionDate returns the value of ExecutionDate.
func (s *EntitySplitsList) GetExecutionDate() time.Time {
	return s.ExecutionDate
}

// GetFrom returns the value of From.
func (s *EntitySplitsList) GetFrom() float64 {
	return s.From
}

// GetTo returns the value of To.
func (s *EntitySplitsList) GetTo() float64 {
	return s.To
}

// SetID sets the value of ID.
func (s *EntitySplitsList) SetID(val int) {
	s.ID = val
}

// SetExecutionDate sets the value of ExecutionDate.
func (s *EntitySplitsList) SetExecutionDate(val time.Time) {
	s.ExecutionDate = val
}

// SetFrom sets the value of From.
func (s *EntitySplitsList) SetFrom(val float64) {
	s.From = val
}

// SetTo sets the value of To.
func (s *EntitySplitsList) SetTo(val float64) {
	s.To = val
}

// Ref: #/components/schemas/EntityUpdate
type EntityUpdate struct {
	ID          int       `json:"id"`
	Active      bool      `json:"active"`
	Ticker      string    `json:"ticker"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	ListDate    time.Time `json:"list_date"`
	Options     bool      `json:"options"`
	Tradable    bool      `json:"tradable"`
}

// GetID returns the value of ID.
func (s *EntityUpdate) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *EntityUpdate) GetActive() bool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *EntityUpdate) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *EntityUpdate) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *EntityUpdate) GetDescription() string {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *EntityUpdate) GetListDate() time.Time {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *EntityUpdate) GetOptions() bool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *EntityUpdate) GetTradable() bool {
	return s.Tradable
}

// SetID sets the value of ID.
func (s *EntityUpdate) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *EntityUpdate) SetActive(val bool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *EntityUpdate) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *EntityUpdate) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *EntityUpdate) SetDescription(val string) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *EntityUpdate) SetListDate(val time.Time) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *EntityUpdate) SetOptions(val bool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *EntityUpdate) SetTradable(val bool) {
	s.Tradable = val
}

func (*EntityUpdate) updateEntityRes() {}

// Ref: #/components/schemas/ExchangeCreate
type ExchangeCreate struct {
	ID   int    `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *ExchangeCreate) GetID() int {
	return s.ID
}

// GetCode returns the value of Code.
func (s *ExchangeCreate) GetCode() string {
	return s.Code
}

// GetName returns the value of Name.
func (s *ExchangeCreate) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *ExchangeCreate) SetID(val int) {
	s.ID = val
}

// SetCode sets the value of Code.
func (s *ExchangeCreate) SetCode(val string) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *ExchangeCreate) SetName(val string) {
	s.Name = val
}

func (*ExchangeCreate) createExchangeRes() {}

// Ref: #/components/schemas/ExchangeList
type ExchangeList struct {
	ID   int    `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *ExchangeList) GetID() int {
	return s.ID
}

// GetCode returns the value of Code.
func (s *ExchangeList) GetCode() string {
	return s.Code
}

// GetName returns the value of Name.
func (s *ExchangeList) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *ExchangeList) SetID(val int) {
	s.ID = val
}

// SetCode sets the value of Code.
func (s *ExchangeList) SetCode(val string) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *ExchangeList) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/ExchangeRead
type ExchangeRead struct {
	ID   int    `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *ExchangeRead) GetID() int {
	return s.ID
}

// GetCode returns the value of Code.
func (s *ExchangeRead) GetCode() string {
	return s.Code
}

// GetName returns the value of Name.
func (s *ExchangeRead) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *ExchangeRead) SetID(val int) {
	s.ID = val
}

// SetCode sets the value of Code.
func (s *ExchangeRead) SetCode(val string) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *ExchangeRead) SetName(val string) {
	s.Name = val
}

func (*ExchangeRead) readExchangeRes() {}

// Ref: #/components/schemas/Exchange_StocksList
type ExchangeStocksList struct {
	ID          int       `json:"id"`
	Active      bool      `json:"active"`
	Ticker      string    `json:"ticker"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	ListDate    time.Time `json:"list_date"`
	Options     bool      `json:"options"`
	Tradable    bool      `json:"tradable"`
}

// GetID returns the value of ID.
func (s *ExchangeStocksList) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *ExchangeStocksList) GetActive() bool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *ExchangeStocksList) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *ExchangeStocksList) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ExchangeStocksList) GetDescription() string {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *ExchangeStocksList) GetListDate() time.Time {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *ExchangeStocksList) GetOptions() bool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *ExchangeStocksList) GetTradable() bool {
	return s.Tradable
}

// SetID sets the value of ID.
func (s *ExchangeStocksList) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *ExchangeStocksList) SetActive(val bool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *ExchangeStocksList) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *ExchangeStocksList) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ExchangeStocksList) SetDescription(val string) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *ExchangeStocksList) SetListDate(val time.Time) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *ExchangeStocksList) SetOptions(val bool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *ExchangeStocksList) SetTradable(val bool) {
	s.Tradable = val
}

// Ref: #/components/schemas/ExchangeUpdate
type ExchangeUpdate struct {
	ID   int    `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *ExchangeUpdate) GetID() int {
	return s.ID
}

// GetCode returns the value of Code.
func (s *ExchangeUpdate) GetCode() string {
	return s.Code
}

// GetName returns the value of Name.
func (s *ExchangeUpdate) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *ExchangeUpdate) SetID(val int) {
	s.ID = val
}

// SetCode sets the value of Code.
func (s *ExchangeUpdate) SetCode(val string) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *ExchangeUpdate) SetName(val string) {
	s.Name = val
}

func (*ExchangeUpdate) updateExchangeRes() {}

// Ref: #/components/schemas/FinancialCreate
type FinancialCreate struct {
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *FinancialCreate) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *FinancialCreate) SetID(val int) {
	s.ID = val
}

func (*FinancialCreate) createFinancialRes() {}

// Ref: #/components/schemas/FinancialList
type FinancialList struct {
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *FinancialList) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *FinancialList) SetID(val int) {
	s.ID = val
}

// Ref: #/components/schemas/FinancialRead
type FinancialRead struct {
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *FinancialRead) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *FinancialRead) SetID(val int) {
	s.ID = val
}

func (*FinancialRead) readFinancialRes() {}

// Ref: #/components/schemas/Financial_StockList
type FinancialStockList struct {
	ID          int       `json:"id"`
	Active      bool      `json:"active"`
	Ticker      string    `json:"ticker"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	ListDate    time.Time `json:"list_date"`
	Options     bool      `json:"options"`
	Tradable    bool      `json:"tradable"`
}

// GetID returns the value of ID.
func (s *FinancialStockList) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *FinancialStockList) GetActive() bool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *FinancialStockList) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *FinancialStockList) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *FinancialStockList) GetDescription() string {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *FinancialStockList) GetListDate() time.Time {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *FinancialStockList) GetOptions() bool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *FinancialStockList) GetTradable() bool {
	return s.Tradable
}

// SetID sets the value of ID.
func (s *FinancialStockList) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *FinancialStockList) SetActive(val bool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *FinancialStockList) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *FinancialStockList) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *FinancialStockList) SetDescription(val string) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *FinancialStockList) SetListDate(val time.Time) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *FinancialStockList) SetOptions(val bool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *FinancialStockList) SetTradable(val bool) {
	s.Tradable = val
}

// Ref: #/components/schemas/FinancialUpdate
type FinancialUpdate struct {
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *FinancialUpdate) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *FinancialUpdate) SetID(val int) {
	s.ID = val
}

func (*FinancialUpdate) updateFinancialRes() {}

// Ref: #/components/schemas/Interval_BarsList
type IntervalBarsList struct {
	ID         int                    `json:"id"`
	Start      time.Time              `json:"start"`
	End        time.Time              `json:"end"`
	Count      int                    `json:"count"`
	IntervalID int                    `json:"interval_id"`
	Status     IntervalBarsListStatus `json:"status"`
	UpdateTime time.Time              `json:"update_time"`
}

// GetID returns the value of ID.
func (s *IntervalBarsList) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *IntervalBarsList) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *IntervalBarsList) GetEnd() time.Time {
	return s.End
}

// GetCount returns the value of Count.
func (s *IntervalBarsList) GetCount() int {
	return s.Count
}

// GetIntervalID returns the value of IntervalID.
func (s *IntervalBarsList) GetIntervalID() int {
	return s.IntervalID
}

// GetStatus returns the value of Status.
func (s *IntervalBarsList) GetStatus() IntervalBarsListStatus {
	return s.Status
}

// GetUpdateTime returns the value of UpdateTime.
func (s *IntervalBarsList) GetUpdateTime() time.Time {
	return s.UpdateTime
}

// SetID sets the value of ID.
func (s *IntervalBarsList) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *IntervalBarsList) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *IntervalBarsList) SetEnd(val time.Time) {
	s.End = val
}

// SetCount sets the value of Count.
func (s *IntervalBarsList) SetCount(val int) {
	s.Count = val
}

// SetIntervalID sets the value of IntervalID.
func (s *IntervalBarsList) SetIntervalID(val int) {
	s.IntervalID = val
}

// SetStatus sets the value of Status.
func (s *IntervalBarsList) SetStatus(val IntervalBarsListStatus) {
	s.Status = val
}

// SetUpdateTime sets the value of UpdateTime.
func (s *IntervalBarsList) SetUpdateTime(val time.Time) {
	s.UpdateTime = val
}

type IntervalBarsListStatus string

const (
	IntervalBarsListStatusPending      IntervalBarsListStatus = "pending"
	IntervalBarsListStatusCreated      IntervalBarsListStatus = "created"
	IntervalBarsListStatusClean        IntervalBarsListStatus = "clean"
	IntervalBarsListStatusConsolidated IntervalBarsListStatus = "consolidated"
)

// MarshalText implements encoding.TextMarshaler.
func (s IntervalBarsListStatus) MarshalText() ([]byte, error) {
	switch s {
	case IntervalBarsListStatusPending:
		return []byte(s), nil
	case IntervalBarsListStatusCreated:
		return []byte(s), nil
	case IntervalBarsListStatusClean:
		return []byte(s), nil
	case IntervalBarsListStatusConsolidated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IntervalBarsListStatus) UnmarshalText(data []byte) error {
	switch IntervalBarsListStatus(data) {
	case IntervalBarsListStatusPending:
		*s = IntervalBarsListStatusPending
		return nil
	case IntervalBarsListStatusCreated:
		*s = IntervalBarsListStatusCreated
		return nil
	case IntervalBarsListStatusClean:
		*s = IntervalBarsListStatusClean
		return nil
	case IntervalBarsListStatusConsolidated:
		*s = IntervalBarsListStatusConsolidated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/IntervalCreate
type IntervalCreate struct {
	ID           int                    `json:"id"`
	Active       bool                   `json:"active"`
	Interval     IntervalCreateInterval `json:"interval"`
	StockID      int                    `json:"stock_id"`
	DataSourceID int                    `json:"data_source_id"`
}

// GetID returns the value of ID.
func (s *IntervalCreate) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *IntervalCreate) GetActive() bool {
	return s.Active
}

// GetInterval returns the value of Interval.
func (s *IntervalCreate) GetInterval() IntervalCreateInterval {
	return s.Interval
}

// GetStockID returns the value of StockID.
func (s *IntervalCreate) GetStockID() int {
	return s.StockID
}

// GetDataSourceID returns the value of DataSourceID.
func (s *IntervalCreate) GetDataSourceID() int {
	return s.DataSourceID
}

// SetID sets the value of ID.
func (s *IntervalCreate) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *IntervalCreate) SetActive(val bool) {
	s.Active = val
}

// SetInterval sets the value of Interval.
func (s *IntervalCreate) SetInterval(val IntervalCreateInterval) {
	s.Interval = val
}

// SetStockID sets the value of StockID.
func (s *IntervalCreate) SetStockID(val int) {
	s.StockID = val
}

// SetDataSourceID sets the value of DataSourceID.
func (s *IntervalCreate) SetDataSourceID(val int) {
	s.DataSourceID = val
}

func (*IntervalCreate) createIntervalRes() {}

type IntervalCreateInterval string

const (
	IntervalCreateIntervalTrades  IntervalCreateInterval = "trades"
	IntervalCreateInterval1min    IntervalCreateInterval = "1min"
	IntervalCreateIntervalDaily   IntervalCreateInterval = "daily"
	IntervalCreateIntervalMonthly IntervalCreateInterval = "monthly"
	IntervalCreateIntervalYearly  IntervalCreateInterval = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s IntervalCreateInterval) MarshalText() ([]byte, error) {
	switch s {
	case IntervalCreateIntervalTrades:
		return []byte(s), nil
	case IntervalCreateInterval1min:
		return []byte(s), nil
	case IntervalCreateIntervalDaily:
		return []byte(s), nil
	case IntervalCreateIntervalMonthly:
		return []byte(s), nil
	case IntervalCreateIntervalYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IntervalCreateInterval) UnmarshalText(data []byte) error {
	switch IntervalCreateInterval(data) {
	case IntervalCreateIntervalTrades:
		*s = IntervalCreateIntervalTrades
		return nil
	case IntervalCreateInterval1min:
		*s = IntervalCreateInterval1min
		return nil
	case IntervalCreateIntervalDaily:
		*s = IntervalCreateIntervalDaily
		return nil
	case IntervalCreateIntervalMonthly:
		*s = IntervalCreateIntervalMonthly
		return nil
	case IntervalCreateIntervalYearly:
		*s = IntervalCreateIntervalYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Interval_DataSourceRead
type IntervalDataSourceRead struct {
	ID      int    `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
}

// GetID returns the value of ID.
func (s *IntervalDataSourceRead) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *IntervalDataSourceRead) GetName() string {
	return s.Name
}

// GetAddress returns the value of Address.
func (s *IntervalDataSourceRead) GetAddress() string {
	return s.Address
}

// SetID sets the value of ID.
func (s *IntervalDataSourceRead) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *IntervalDataSourceRead) SetName(val string) {
	s.Name = val
}

// SetAddress sets the value of Address.
func (s *IntervalDataSourceRead) SetAddress(val string) {
	s.Address = val
}

func (*IntervalDataSourceRead) readIntervalDataSourceRes() {}

// Ref: #/components/schemas/IntervalList
type IntervalList struct {
	ID           int                  `json:"id"`
	Active       bool                 `json:"active"`
	Interval     IntervalListInterval `json:"interval"`
	StockID      int                  `json:"stock_id"`
	DataSourceID int                  `json:"data_source_id"`
}

// GetID returns the value of ID.
func (s *IntervalList) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *IntervalList) GetActive() bool {
	return s.Active
}

// GetInterval returns the value of Interval.
func (s *IntervalList) GetInterval() IntervalListInterval {
	return s.Interval
}

// GetStockID returns the value of StockID.
func (s *IntervalList) GetStockID() int {
	return s.StockID
}

// GetDataSourceID returns the value of DataSourceID.
func (s *IntervalList) GetDataSourceID() int {
	return s.DataSourceID
}

// SetID sets the value of ID.
func (s *IntervalList) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *IntervalList) SetActive(val bool) {
	s.Active = val
}

// SetInterval sets the value of Interval.
func (s *IntervalList) SetInterval(val IntervalListInterval) {
	s.Interval = val
}

// SetStockID sets the value of StockID.
func (s *IntervalList) SetStockID(val int) {
	s.StockID = val
}

// SetDataSourceID sets the value of DataSourceID.
func (s *IntervalList) SetDataSourceID(val int) {
	s.DataSourceID = val
}

type IntervalListInterval string

const (
	IntervalListIntervalTrades  IntervalListInterval = "trades"
	IntervalListInterval1min    IntervalListInterval = "1min"
	IntervalListIntervalDaily   IntervalListInterval = "daily"
	IntervalListIntervalMonthly IntervalListInterval = "monthly"
	IntervalListIntervalYearly  IntervalListInterval = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s IntervalListInterval) MarshalText() ([]byte, error) {
	switch s {
	case IntervalListIntervalTrades:
		return []byte(s), nil
	case IntervalListInterval1min:
		return []byte(s), nil
	case IntervalListIntervalDaily:
		return []byte(s), nil
	case IntervalListIntervalMonthly:
		return []byte(s), nil
	case IntervalListIntervalYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IntervalListInterval) UnmarshalText(data []byte) error {
	switch IntervalListInterval(data) {
	case IntervalListIntervalTrades:
		*s = IntervalListIntervalTrades
		return nil
	case IntervalListInterval1min:
		*s = IntervalListInterval1min
		return nil
	case IntervalListIntervalDaily:
		*s = IntervalListIntervalDaily
		return nil
	case IntervalListIntervalMonthly:
		*s = IntervalListIntervalMonthly
		return nil
	case IntervalListIntervalYearly:
		*s = IntervalListIntervalYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/IntervalRead
type IntervalRead struct {
	ID           int                  `json:"id"`
	Active       bool                 `json:"active"`
	Interval     IntervalReadInterval `json:"interval"`
	StockID      int                  `json:"stock_id"`
	DataSourceID int                  `json:"data_source_id"`
}

// GetID returns the value of ID.
func (s *IntervalRead) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *IntervalRead) GetActive() bool {
	return s.Active
}

// GetInterval returns the value of Interval.
func (s *IntervalRead) GetInterval() IntervalReadInterval {
	return s.Interval
}

// GetStockID returns the value of StockID.
func (s *IntervalRead) GetStockID() int {
	return s.StockID
}

// GetDataSourceID returns the value of DataSourceID.
func (s *IntervalRead) GetDataSourceID() int {
	return s.DataSourceID
}

// SetID sets the value of ID.
func (s *IntervalRead) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *IntervalRead) SetActive(val bool) {
	s.Active = val
}

// SetInterval sets the value of Interval.
func (s *IntervalRead) SetInterval(val IntervalReadInterval) {
	s.Interval = val
}

// SetStockID sets the value of StockID.
func (s *IntervalRead) SetStockID(val int) {
	s.StockID = val
}

// SetDataSourceID sets the value of DataSourceID.
func (s *IntervalRead) SetDataSourceID(val int) {
	s.DataSourceID = val
}

func (*IntervalRead) readIntervalRes() {}

type IntervalReadInterval string

const (
	IntervalReadIntervalTrades  IntervalReadInterval = "trades"
	IntervalReadInterval1min    IntervalReadInterval = "1min"
	IntervalReadIntervalDaily   IntervalReadInterval = "daily"
	IntervalReadIntervalMonthly IntervalReadInterval = "monthly"
	IntervalReadIntervalYearly  IntervalReadInterval = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s IntervalReadInterval) MarshalText() ([]byte, error) {
	switch s {
	case IntervalReadIntervalTrades:
		return []byte(s), nil
	case IntervalReadInterval1min:
		return []byte(s), nil
	case IntervalReadIntervalDaily:
		return []byte(s), nil
	case IntervalReadIntervalMonthly:
		return []byte(s), nil
	case IntervalReadIntervalYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IntervalReadInterval) UnmarshalText(data []byte) error {
	switch IntervalReadInterval(data) {
	case IntervalReadIntervalTrades:
		*s = IntervalReadIntervalTrades
		return nil
	case IntervalReadInterval1min:
		*s = IntervalReadInterval1min
		return nil
	case IntervalReadIntervalDaily:
		*s = IntervalReadIntervalDaily
		return nil
	case IntervalReadIntervalMonthly:
		*s = IntervalReadIntervalMonthly
		return nil
	case IntervalReadIntervalYearly:
		*s = IntervalReadIntervalYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Interval_StockRead
type IntervalStockRead struct {
	ID          int       `json:"id"`
	Active      bool      `json:"active"`
	Ticker      string    `json:"ticker"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	ListDate    time.Time `json:"list_date"`
	Options     bool      `json:"options"`
	Tradable    bool      `json:"tradable"`
}

// GetID returns the value of ID.
func (s *IntervalStockRead) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *IntervalStockRead) GetActive() bool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *IntervalStockRead) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *IntervalStockRead) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *IntervalStockRead) GetDescription() string {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *IntervalStockRead) GetListDate() time.Time {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *IntervalStockRead) GetOptions() bool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *IntervalStockRead) GetTradable() bool {
	return s.Tradable
}

// SetID sets the value of ID.
func (s *IntervalStockRead) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *IntervalStockRead) SetActive(val bool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *IntervalStockRead) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *IntervalStockRead) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *IntervalStockRead) SetDescription(val string) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *IntervalStockRead) SetListDate(val time.Time) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *IntervalStockRead) SetOptions(val bool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *IntervalStockRead) SetTradable(val bool) {
	s.Tradable = val
}

func (*IntervalStockRead) readIntervalStockRes() {}

// Ref: #/components/schemas/Interval_TradesList
type IntervalTradesList struct {
	ID         int       `json:"id"`
	Start      time.Time `json:"start"`
	End        time.Time `json:"end"`
	IntervalID int       `json:"interval_id"`
}

// GetID returns the value of ID.
func (s *IntervalTradesList) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *IntervalTradesList) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *IntervalTradesList) GetEnd() time.Time {
	return s.End
}

// GetIntervalID returns the value of IntervalID.
func (s *IntervalTradesList) GetIntervalID() int {
	return s.IntervalID
}

// SetID sets the value of ID.
func (s *IntervalTradesList) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *IntervalTradesList) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *IntervalTradesList) SetEnd(val time.Time) {
	s.End = val
}

// SetIntervalID sets the value of IntervalID.
func (s *IntervalTradesList) SetIntervalID(val int) {
	s.IntervalID = val
}

// Ref: #/components/schemas/IntervalUpdate
type IntervalUpdate struct {
	ID           int                    `json:"id"`
	Active       bool                   `json:"active"`
	Interval     IntervalUpdateInterval `json:"interval"`
	StockID      int                    `json:"stock_id"`
	DataSourceID int                    `json:"data_source_id"`
}

// GetID returns the value of ID.
func (s *IntervalUpdate) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *IntervalUpdate) GetActive() bool {
	return s.Active
}

// GetInterval returns the value of Interval.
func (s *IntervalUpdate) GetInterval() IntervalUpdateInterval {
	return s.Interval
}

// GetStockID returns the value of StockID.
func (s *IntervalUpdate) GetStockID() int {
	return s.StockID
}

// GetDataSourceID returns the value of DataSourceID.
func (s *IntervalUpdate) GetDataSourceID() int {
	return s.DataSourceID
}

// SetID sets the value of ID.
func (s *IntervalUpdate) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *IntervalUpdate) SetActive(val bool) {
	s.Active = val
}

// SetInterval sets the value of Interval.
func (s *IntervalUpdate) SetInterval(val IntervalUpdateInterval) {
	s.Interval = val
}

// SetStockID sets the value of StockID.
func (s *IntervalUpdate) SetStockID(val int) {
	s.StockID = val
}

// SetDataSourceID sets the value of DataSourceID.
func (s *IntervalUpdate) SetDataSourceID(val int) {
	s.DataSourceID = val
}

func (*IntervalUpdate) updateIntervalRes() {}

type IntervalUpdateInterval string

const (
	IntervalUpdateIntervalTrades  IntervalUpdateInterval = "trades"
	IntervalUpdateInterval1min    IntervalUpdateInterval = "1min"
	IntervalUpdateIntervalDaily   IntervalUpdateInterval = "daily"
	IntervalUpdateIntervalMonthly IntervalUpdateInterval = "monthly"
	IntervalUpdateIntervalYearly  IntervalUpdateInterval = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s IntervalUpdateInterval) MarshalText() ([]byte, error) {
	switch s {
	case IntervalUpdateIntervalTrades:
		return []byte(s), nil
	case IntervalUpdateInterval1min:
		return []byte(s), nil
	case IntervalUpdateIntervalDaily:
		return []byte(s), nil
	case IntervalUpdateIntervalMonthly:
		return []byte(s), nil
	case IntervalUpdateIntervalYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *IntervalUpdateInterval) UnmarshalText(data []byte) error {
	switch IntervalUpdateInterval(data) {
	case IntervalUpdateIntervalTrades:
		*s = IntervalUpdateIntervalTrades
		return nil
	case IntervalUpdateInterval1min:
		*s = IntervalUpdateInterval1min
		return nil
	case IntervalUpdateIntervalDaily:
		*s = IntervalUpdateIntervalDaily
		return nil
	case IntervalUpdateIntervalMonthly:
		*s = IntervalUpdateIntervalMonthly
		return nil
	case IntervalUpdateIntervalYearly:
		*s = IntervalUpdateIntervalYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListBarGroupOKApplicationJSON []BarGroupList

func (*ListBarGroupOKApplicationJSON) listBarGroupRes() {}

type ListBarGroupRecordsOKApplicationJSON []BarGroupRecordsList

func (*ListBarGroupRecordsOKApplicationJSON) listBarGroupRecordsRes() {}

type ListBarRecordOKApplicationJSON []BarRecordList

func (*ListBarRecordOKApplicationJSON) listBarRecordRes() {}

type ListBarTimeRangeGroupsOKApplicationJSON []BarTimeRangeGroupsList

func (*ListBarTimeRangeGroupsOKApplicationJSON) listBarTimeRangeGroupsRes() {}

type ListBarTimeRangeOKApplicationJSON []BarTimeRangeList

func (*ListBarTimeRangeOKApplicationJSON) listBarTimeRangeRes() {}

type ListDataSourceIntervalsOKApplicationJSON []DataSourceIntervalsList

func (*ListDataSourceIntervalsOKApplicationJSON) listDataSourceIntervalsRes() {}

type ListDataSourceOKApplicationJSON []DataSourceList

func (*ListDataSourceOKApplicationJSON) listDataSourceRes() {}

type ListDividendOKApplicationJSON []DividendList

func (*ListDividendOKApplicationJSON) listDividendRes() {}

type ListDividendStockOKApplicationJSON []DividendStockList

func (*ListDividendStockOKApplicationJSON) listDividendStockRes() {}

type ListEntityDividendsOKApplicationJSON []EntityDividendsList

func (*ListEntityDividendsOKApplicationJSON) listEntityDividendsRes() {}

type ListEntityExchangesOKApplicationJSON []EntityExchangesList

func (*ListEntityExchangesOKApplicationJSON) listEntityExchangesRes() {}

type ListEntityFinancialsOKApplicationJSON []EntityFinancialsList

func (*ListEntityFinancialsOKApplicationJSON) listEntityFinancialsRes() {}

type ListEntityIntervalsOKApplicationJSON []EntityIntervalsList

func (*ListEntityIntervalsOKApplicationJSON) listEntityIntervalsRes() {}

type ListEntityOKApplicationJSON []EntityList

func (*ListEntityOKApplicationJSON) listEntityRes() {}

type ListEntitySplitsOKApplicationJSON []EntitySplitsList

func (*ListEntitySplitsOKApplicationJSON) listEntitySplitsRes() {}

type ListExchangeOKApplicationJSON []ExchangeList

func (*ListExchangeOKApplicationJSON) listExchangeRes() {}

type ListExchangeStocksOKApplicationJSON []ExchangeStocksList

func (*ListExchangeStocksOKApplicationJSON) listExchangeStocksRes() {}

type ListFinancialOKApplicationJSON []FinancialList

func (*ListFinancialOKApplicationJSON) listFinancialRes() {}

type ListFinancialStockOKApplicationJSON []FinancialStockList

func (*ListFinancialStockOKApplicationJSON) listFinancialStockRes() {}

type ListIntervalBarsOKApplicationJSON []IntervalBarsList

func (*ListIntervalBarsOKApplicationJSON) listIntervalBarsRes() {}

type ListIntervalOKApplicationJSON []IntervalList

func (*ListIntervalOKApplicationJSON) listIntervalRes() {}

type ListIntervalTradesOKApplicationJSON []IntervalTradesList

func (*ListIntervalTradesOKApplicationJSON) listIntervalTradesRes() {}

type ListMarketHoursOKApplicationJSON []MarketHoursList

func (*ListMarketHoursOKApplicationJSON) listMarketHoursRes() {}

type ListMarketInfoHoursOKApplicationJSON []MarketInfoHoursList

func (*ListMarketInfoHoursOKApplicationJSON) listMarketInfoHoursRes() {}

type ListMarketInfoOKApplicationJSON []MarketInfoList

func (*ListMarketInfoOKApplicationJSON) listMarketInfoRes() {}

type ListSplitOKApplicationJSON []SplitList

func (*ListSplitOKApplicationJSON) listSplitRes() {}

type ListTradeConditionOKApplicationJSON []TradeConditionList

func (*ListTradeConditionOKApplicationJSON) listTradeConditionRes() {}

type ListTradeConditionRecordOKApplicationJSON []TradeConditionRecordList

func (*ListTradeConditionRecordOKApplicationJSON) listTradeConditionRecordRes() {}

type ListTradeCorrectionOKApplicationJSON []TradeCorrectionList

func (*ListTradeCorrectionOKApplicationJSON) listTradeCorrectionRes() {}

type ListTradeCorrectionRecordOKApplicationJSON []TradeCorrectionRecordList

func (*ListTradeCorrectionRecordOKApplicationJSON) listTradeCorrectionRecordRes() {}

type ListTradeRecordConditionsOKApplicationJSON []TradeRecordConditionsList

func (*ListTradeRecordConditionsOKApplicationJSON) listTradeRecordConditionsRes() {}

type ListTradeRecordCorrectionOKApplicationJSON []TradeRecordCorrectionList

func (*ListTradeRecordCorrectionOKApplicationJSON) listTradeRecordCorrectionRes() {}

type ListTradeRecordExchangeOKApplicationJSON []TradeRecordExchangeList

func (*ListTradeRecordExchangeOKApplicationJSON) listTradeRecordExchangeRes() {}

type ListTradeRecordOKApplicationJSON []TradeRecordList

func (*ListTradeRecordOKApplicationJSON) listTradeRecordRes() {}

type ListTradeTimeRangeOKApplicationJSON []TradeTimeRangeList

func (*ListTradeTimeRangeOKApplicationJSON) listTradeTimeRangeRes() {}

type ListTradeTimeRangeRecordsOKApplicationJSON []TradeTimeRangeRecordsList

func (*ListTradeTimeRangeRecordsOKApplicationJSON) listTradeTimeRangeRecordsRes() {}

// Ref: #/components/schemas/MarketHoursCreate
type MarketHoursCreate struct {
	ID        int       `json:"id"`
	Date      time.Time `json:"date"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

// GetID returns the value of ID.
func (s *MarketHoursCreate) GetID() int {
	return s.ID
}

// GetDate returns the value of Date.
func (s *MarketHoursCreate) GetDate() time.Time {
	return s.Date
}

// GetStartTime returns the value of StartTime.
func (s *MarketHoursCreate) GetStartTime() time.Time {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *MarketHoursCreate) GetEndTime() time.Time {
	return s.EndTime
}

// SetID sets the value of ID.
func (s *MarketHoursCreate) SetID(val int) {
	s.ID = val
}

// SetDate sets the value of Date.
func (s *MarketHoursCreate) SetDate(val time.Time) {
	s.Date = val
}

// SetStartTime sets the value of StartTime.
func (s *MarketHoursCreate) SetStartTime(val time.Time) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *MarketHoursCreate) SetEndTime(val time.Time) {
	s.EndTime = val
}

func (*MarketHoursCreate) createMarketHoursRes() {}

// Ref: #/components/schemas/MarketHoursList
type MarketHoursList struct {
	ID        int       `json:"id"`
	Date      time.Time `json:"date"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

// GetID returns the value of ID.
func (s *MarketHoursList) GetID() int {
	return s.ID
}

// GetDate returns the value of Date.
func (s *MarketHoursList) GetDate() time.Time {
	return s.Date
}

// GetStartTime returns the value of StartTime.
func (s *MarketHoursList) GetStartTime() time.Time {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *MarketHoursList) GetEndTime() time.Time {
	return s.EndTime
}

// SetID sets the value of ID.
func (s *MarketHoursList) SetID(val int) {
	s.ID = val
}

// SetDate sets the value of Date.
func (s *MarketHoursList) SetDate(val time.Time) {
	s.Date = val
}

// SetStartTime sets the value of StartTime.
func (s *MarketHoursList) SetStartTime(val time.Time) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *MarketHoursList) SetEndTime(val time.Time) {
	s.EndTime = val
}

// Ref: #/components/schemas/MarketHours_MarketInfoRead
type MarketHoursMarketInfoRead struct {
	ID         int       `json:"id"`
	HoursStart time.Time `json:"hours_start"`
	HoursEnd   time.Time `json:"hours_end"`
}

// GetID returns the value of ID.
func (s *MarketHoursMarketInfoRead) GetID() int {
	return s.ID
}

// GetHoursStart returns the value of HoursStart.
func (s *MarketHoursMarketInfoRead) GetHoursStart() time.Time {
	return s.HoursStart
}

// GetHoursEnd returns the value of HoursEnd.
func (s *MarketHoursMarketInfoRead) GetHoursEnd() time.Time {
	return s.HoursEnd
}

// SetID sets the value of ID.
func (s *MarketHoursMarketInfoRead) SetID(val int) {
	s.ID = val
}

// SetHoursStart sets the value of HoursStart.
func (s *MarketHoursMarketInfoRead) SetHoursStart(val time.Time) {
	s.HoursStart = val
}

// SetHoursEnd sets the value of HoursEnd.
func (s *MarketHoursMarketInfoRead) SetHoursEnd(val time.Time) {
	s.HoursEnd = val
}

func (*MarketHoursMarketInfoRead) readMarketHoursMarketInfoRes() {}

// Ref: #/components/schemas/MarketHoursRead
type MarketHoursRead struct {
	ID        int       `json:"id"`
	Date      time.Time `json:"date"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

// GetID returns the value of ID.
func (s *MarketHoursRead) GetID() int {
	return s.ID
}

// GetDate returns the value of Date.
func (s *MarketHoursRead) GetDate() time.Time {
	return s.Date
}

// GetStartTime returns the value of StartTime.
func (s *MarketHoursRead) GetStartTime() time.Time {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *MarketHoursRead) GetEndTime() time.Time {
	return s.EndTime
}

// SetID sets the value of ID.
func (s *MarketHoursRead) SetID(val int) {
	s.ID = val
}

// SetDate sets the value of Date.
func (s *MarketHoursRead) SetDate(val time.Time) {
	s.Date = val
}

// SetStartTime sets the value of StartTime.
func (s *MarketHoursRead) SetStartTime(val time.Time) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *MarketHoursRead) SetEndTime(val time.Time) {
	s.EndTime = val
}

func (*MarketHoursRead) readMarketHoursRes() {}

// Ref: #/components/schemas/MarketHoursUpdate
type MarketHoursUpdate struct {
	ID        int       `json:"id"`
	Date      time.Time `json:"date"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

// GetID returns the value of ID.
func (s *MarketHoursUpdate) GetID() int {
	return s.ID
}

// GetDate returns the value of Date.
func (s *MarketHoursUpdate) GetDate() time.Time {
	return s.Date
}

// GetStartTime returns the value of StartTime.
func (s *MarketHoursUpdate) GetStartTime() time.Time {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *MarketHoursUpdate) GetEndTime() time.Time {
	return s.EndTime
}

// SetID sets the value of ID.
func (s *MarketHoursUpdate) SetID(val int) {
	s.ID = val
}

// SetDate sets the value of Date.
func (s *MarketHoursUpdate) SetDate(val time.Time) {
	s.Date = val
}

// SetStartTime sets the value of StartTime.
func (s *MarketHoursUpdate) SetStartTime(val time.Time) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *MarketHoursUpdate) SetEndTime(val time.Time) {
	s.EndTime = val
}

func (*MarketHoursUpdate) updateMarketHoursRes() {}

// Ref: #/components/schemas/MarketInfoCreate
type MarketInfoCreate struct {
	ID         int       `json:"id"`
	HoursStart time.Time `json:"hours_start"`
	HoursEnd   time.Time `json:"hours_end"`
}

// GetID returns the value of ID.
func (s *MarketInfoCreate) GetID() int {
	return s.ID
}

// GetHoursStart returns the value of HoursStart.
func (s *MarketInfoCreate) GetHoursStart() time.Time {
	return s.HoursStart
}

// GetHoursEnd returns the value of HoursEnd.
func (s *MarketInfoCreate) GetHoursEnd() time.Time {
	return s.HoursEnd
}

// SetID sets the value of ID.
func (s *MarketInfoCreate) SetID(val int) {
	s.ID = val
}

// SetHoursStart sets the value of HoursStart.
func (s *MarketInfoCreate) SetHoursStart(val time.Time) {
	s.HoursStart = val
}

// SetHoursEnd sets the value of HoursEnd.
func (s *MarketInfoCreate) SetHoursEnd(val time.Time) {
	s.HoursEnd = val
}

func (*MarketInfoCreate) createMarketInfoRes() {}

// Ref: #/components/schemas/MarketInfo_HoursList
type MarketInfoHoursList struct {
	ID        int       `json:"id"`
	Date      time.Time `json:"date"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

// GetID returns the value of ID.
func (s *MarketInfoHoursList) GetID() int {
	return s.ID
}

// GetDate returns the value of Date.
func (s *MarketInfoHoursList) GetDate() time.Time {
	return s.Date
}

// GetStartTime returns the value of StartTime.
func (s *MarketInfoHoursList) GetStartTime() time.Time {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *MarketInfoHoursList) GetEndTime() time.Time {
	return s.EndTime
}

// SetID sets the value of ID.
func (s *MarketInfoHoursList) SetID(val int) {
	s.ID = val
}

// SetDate sets the value of Date.
func (s *MarketInfoHoursList) SetDate(val time.Time) {
	s.Date = val
}

// SetStartTime sets the value of StartTime.
func (s *MarketInfoHoursList) SetStartTime(val time.Time) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *MarketInfoHoursList) SetEndTime(val time.Time) {
	s.EndTime = val
}

// Ref: #/components/schemas/MarketInfoList
type MarketInfoList struct {
	ID         int       `json:"id"`
	HoursStart time.Time `json:"hours_start"`
	HoursEnd   time.Time `json:"hours_end"`
}

// GetID returns the value of ID.
func (s *MarketInfoList) GetID() int {
	return s.ID
}

// GetHoursStart returns the value of HoursStart.
func (s *MarketInfoList) GetHoursStart() time.Time {
	return s.HoursStart
}

// GetHoursEnd returns the value of HoursEnd.
func (s *MarketInfoList) GetHoursEnd() time.Time {
	return s.HoursEnd
}

// SetID sets the value of ID.
func (s *MarketInfoList) SetID(val int) {
	s.ID = val
}

// SetHoursStart sets the value of HoursStart.
func (s *MarketInfoList) SetHoursStart(val time.Time) {
	s.HoursStart = val
}

// SetHoursEnd sets the value of HoursEnd.
func (s *MarketInfoList) SetHoursEnd(val time.Time) {
	s.HoursEnd = val
}

// Ref: #/components/schemas/MarketInfoRead
type MarketInfoRead struct {
	ID         int       `json:"id"`
	HoursStart time.Time `json:"hours_start"`
	HoursEnd   time.Time `json:"hours_end"`
}

// GetID returns the value of ID.
func (s *MarketInfoRead) GetID() int {
	return s.ID
}

// GetHoursStart returns the value of HoursStart.
func (s *MarketInfoRead) GetHoursStart() time.Time {
	return s.HoursStart
}

// GetHoursEnd returns the value of HoursEnd.
func (s *MarketInfoRead) GetHoursEnd() time.Time {
	return s.HoursEnd
}

// SetID sets the value of ID.
func (s *MarketInfoRead) SetID(val int) {
	s.ID = val
}

// SetHoursStart sets the value of HoursStart.
func (s *MarketInfoRead) SetHoursStart(val time.Time) {
	s.HoursStart = val
}

// SetHoursEnd sets the value of HoursEnd.
func (s *MarketInfoRead) SetHoursEnd(val time.Time) {
	s.HoursEnd = val
}

func (*MarketInfoRead) readMarketInfoRes() {}

// Ref: #/components/schemas/MarketInfoUpdate
type MarketInfoUpdate struct {
	ID         int       `json:"id"`
	HoursStart time.Time `json:"hours_start"`
	HoursEnd   time.Time `json:"hours_end"`
}

// GetID returns the value of ID.
func (s *MarketInfoUpdate) GetID() int {
	return s.ID
}

// GetHoursStart returns the value of HoursStart.
func (s *MarketInfoUpdate) GetHoursStart() time.Time {
	return s.HoursStart
}

// GetHoursEnd returns the value of HoursEnd.
func (s *MarketInfoUpdate) GetHoursEnd() time.Time {
	return s.HoursEnd
}

// SetID sets the value of ID.
func (s *MarketInfoUpdate) SetID(val int) {
	s.ID = val
}

// SetHoursStart sets the value of HoursStart.
func (s *MarketInfoUpdate) SetHoursStart(val time.Time) {
	s.HoursStart = val
}

// SetHoursEnd sets the value of HoursEnd.
func (s *MarketInfoUpdate) SetHoursEnd(val time.Time) {
	s.HoursEnd = val
}

func (*MarketInfoUpdate) updateMarketInfoRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateBarTimeRangeReqStatus returns new OptUpdateBarTimeRangeReqStatus with value set to v.
func NewOptUpdateBarTimeRangeReqStatus(v UpdateBarTimeRangeReqStatus) OptUpdateBarTimeRangeReqStatus {
	return OptUpdateBarTimeRangeReqStatus{
		Value: v,
		Set:   true,
	}
}

// OptUpdateBarTimeRangeReqStatus is optional UpdateBarTimeRangeReqStatus.
type OptUpdateBarTimeRangeReqStatus struct {
	Value UpdateBarTimeRangeReqStatus
	Set   bool
}

// IsSet returns true if OptUpdateBarTimeRangeReqStatus was set.
func (o OptUpdateBarTimeRangeReqStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateBarTimeRangeReqStatus) Reset() {
	var v UpdateBarTimeRangeReqStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateBarTimeRangeReqStatus) SetTo(v UpdateBarTimeRangeReqStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateBarTimeRangeReqStatus) Get() (v UpdateBarTimeRangeReqStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateBarTimeRangeReqStatus) Or(d UpdateBarTimeRangeReqStatus) UpdateBarTimeRangeReqStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateIntervalReqInterval returns new OptUpdateIntervalReqInterval with value set to v.
func NewOptUpdateIntervalReqInterval(v UpdateIntervalReqInterval) OptUpdateIntervalReqInterval {
	return OptUpdateIntervalReqInterval{
		Value: v,
		Set:   true,
	}
}

// OptUpdateIntervalReqInterval is optional UpdateIntervalReqInterval.
type OptUpdateIntervalReqInterval struct {
	Value UpdateIntervalReqInterval
	Set   bool
}

// IsSet returns true if OptUpdateIntervalReqInterval was set.
func (o OptUpdateIntervalReqInterval) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateIntervalReqInterval) Reset() {
	var v UpdateIntervalReqInterval
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateIntervalReqInterval) SetTo(v UpdateIntervalReqInterval) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateIntervalReqInterval) Get() (v UpdateIntervalReqInterval, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateIntervalReqInterval) Or(d UpdateIntervalReqInterval) UpdateIntervalReqInterval {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R400) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R400) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R400) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R400) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R400) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R400) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R400) createBarGroupRes()             {}
func (*R400) createBarRecordRes()            {}
func (*R400) createBarTimeRangeRes()         {}
func (*R400) createDataSourceRes()           {}
func (*R400) createDividendRes()             {}
func (*R400) createEntityRes()               {}
func (*R400) createExchangeRes()             {}
func (*R400) createFinancialRes()            {}
func (*R400) createIntervalRes()             {}
func (*R400) createMarketHoursRes()          {}
func (*R400) createMarketInfoRes()           {}
func (*R400) createSplitRes()                {}
func (*R400) createTradeConditionRes()       {}
func (*R400) createTradeCorrectionRes()      {}
func (*R400) createTradeRecordRes()          {}
func (*R400) createTradeTimeRangeRes()       {}
func (*R400) deleteBarGroupRes()             {}
func (*R400) deleteBarRecordRes()            {}
func (*R400) deleteBarTimeRangeRes()         {}
func (*R400) deleteDataSourceRes()           {}
func (*R400) deleteDividendRes()             {}
func (*R400) deleteEntityRes()               {}
func (*R400) deleteExchangeRes()             {}
func (*R400) deleteFinancialRes()            {}
func (*R400) deleteIntervalRes()             {}
func (*R400) deleteMarketHoursRes()          {}
func (*R400) deleteMarketInfoRes()           {}
func (*R400) deleteSplitRes()                {}
func (*R400) deleteTradeConditionRes()       {}
func (*R400) deleteTradeCorrectionRes()      {}
func (*R400) deleteTradeRecordRes()          {}
func (*R400) deleteTradeTimeRangeRes()       {}
func (*R400) listBarGroupRecordsRes()        {}
func (*R400) listBarGroupRes()               {}
func (*R400) listBarRecordRes()              {}
func (*R400) listBarTimeRangeGroupsRes()     {}
func (*R400) listBarTimeRangeRes()           {}
func (*R400) listDataSourceIntervalsRes()    {}
func (*R400) listDataSourceRes()             {}
func (*R400) listDividendRes()               {}
func (*R400) listDividendStockRes()          {}
func (*R400) listEntityDividendsRes()        {}
func (*R400) listEntityExchangesRes()        {}
func (*R400) listEntityFinancialsRes()       {}
func (*R400) listEntityIntervalsRes()        {}
func (*R400) listEntityRes()                 {}
func (*R400) listEntitySplitsRes()           {}
func (*R400) listExchangeRes()               {}
func (*R400) listExchangeStocksRes()         {}
func (*R400) listFinancialRes()              {}
func (*R400) listFinancialStockRes()         {}
func (*R400) listIntervalBarsRes()           {}
func (*R400) listIntervalRes()               {}
func (*R400) listIntervalTradesRes()         {}
func (*R400) listMarketHoursRes()            {}
func (*R400) listMarketInfoHoursRes()        {}
func (*R400) listMarketInfoRes()             {}
func (*R400) listSplitRes()                  {}
func (*R400) listTradeConditionRecordRes()   {}
func (*R400) listTradeConditionRes()         {}
func (*R400) listTradeCorrectionRecordRes()  {}
func (*R400) listTradeCorrectionRes()        {}
func (*R400) listTradeRecordConditionsRes()  {}
func (*R400) listTradeRecordCorrectionRes()  {}
func (*R400) listTradeRecordExchangeRes()    {}
func (*R400) listTradeRecordRes()            {}
func (*R400) listTradeTimeRangeRecordsRes()  {}
func (*R400) listTradeTimeRangeRes()         {}
func (*R400) readBarGroupRes()               {}
func (*R400) readBarGroupTimeRangeRes()      {}
func (*R400) readBarRecordGroupRes()         {}
func (*R400) readBarRecordRes()              {}
func (*R400) readBarTimeRangeIntervalRes()   {}
func (*R400) readBarTimeRangeRes()           {}
func (*R400) readDataSourceRes()             {}
func (*R400) readDividendRes()               {}
func (*R400) readEntityRes()                 {}
func (*R400) readExchangeRes()               {}
func (*R400) readFinancialRes()              {}
func (*R400) readIntervalDataSourceRes()     {}
func (*R400) readIntervalRes()               {}
func (*R400) readIntervalStockRes()          {}
func (*R400) readMarketHoursMarketInfoRes()  {}
func (*R400) readMarketHoursRes()            {}
func (*R400) readMarketInfoRes()             {}
func (*R400) readSplitRes()                  {}
func (*R400) readSplitStockRes()             {}
func (*R400) readTradeConditionRes()         {}
func (*R400) readTradeCorrectionRes()        {}
func (*R400) readTradeRecordRes()            {}
func (*R400) readTradeRecordTimeRangeRes()   {}
func (*R400) readTradeTimeRangeIntervalRes() {}
func (*R400) readTradeTimeRangeRes()         {}
func (*R400) updateBarGroupRes()             {}
func (*R400) updateBarRecordRes()            {}
func (*R400) updateBarTimeRangeRes()         {}
func (*R400) updateDataSourceRes()           {}
func (*R400) updateDividendRes()             {}
func (*R400) updateEntityRes()               {}
func (*R400) updateExchangeRes()             {}
func (*R400) updateFinancialRes()            {}
func (*R400) updateIntervalRes()             {}
func (*R400) updateMarketHoursRes()          {}
func (*R400) updateMarketInfoRes()           {}
func (*R400) updateSplitRes()                {}
func (*R400) updateTradeConditionRes()       {}
func (*R400) updateTradeCorrectionRes()      {}
func (*R400) updateTradeRecordRes()          {}
func (*R400) updateTradeTimeRangeRes()       {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R404) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R404) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R404) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R404) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R404) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R404) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R404) deleteBarGroupRes()             {}
func (*R404) deleteBarRecordRes()            {}
func (*R404) deleteBarTimeRangeRes()         {}
func (*R404) deleteDataSourceRes()           {}
func (*R404) deleteDividendRes()             {}
func (*R404) deleteEntityRes()               {}
func (*R404) deleteExchangeRes()             {}
func (*R404) deleteFinancialRes()            {}
func (*R404) deleteIntervalRes()             {}
func (*R404) deleteMarketHoursRes()          {}
func (*R404) deleteMarketInfoRes()           {}
func (*R404) deleteSplitRes()                {}
func (*R404) deleteTradeConditionRes()       {}
func (*R404) deleteTradeCorrectionRes()      {}
func (*R404) deleteTradeRecordRes()          {}
func (*R404) deleteTradeTimeRangeRes()       {}
func (*R404) listBarGroupRecordsRes()        {}
func (*R404) listBarGroupRes()               {}
func (*R404) listBarRecordRes()              {}
func (*R404) listBarTimeRangeGroupsRes()     {}
func (*R404) listBarTimeRangeRes()           {}
func (*R404) listDataSourceIntervalsRes()    {}
func (*R404) listDataSourceRes()             {}
func (*R404) listDividendRes()               {}
func (*R404) listDividendStockRes()          {}
func (*R404) listEntityDividendsRes()        {}
func (*R404) listEntityExchangesRes()        {}
func (*R404) listEntityFinancialsRes()       {}
func (*R404) listEntityIntervalsRes()        {}
func (*R404) listEntityRes()                 {}
func (*R404) listEntitySplitsRes()           {}
func (*R404) listExchangeRes()               {}
func (*R404) listExchangeStocksRes()         {}
func (*R404) listFinancialRes()              {}
func (*R404) listFinancialStockRes()         {}
func (*R404) listIntervalBarsRes()           {}
func (*R404) listIntervalRes()               {}
func (*R404) listIntervalTradesRes()         {}
func (*R404) listMarketHoursRes()            {}
func (*R404) listMarketInfoHoursRes()        {}
func (*R404) listMarketInfoRes()             {}
func (*R404) listSplitRes()                  {}
func (*R404) listTradeConditionRecordRes()   {}
func (*R404) listTradeConditionRes()         {}
func (*R404) listTradeCorrectionRecordRes()  {}
func (*R404) listTradeCorrectionRes()        {}
func (*R404) listTradeRecordConditionsRes()  {}
func (*R404) listTradeRecordCorrectionRes()  {}
func (*R404) listTradeRecordExchangeRes()    {}
func (*R404) listTradeRecordRes()            {}
func (*R404) listTradeTimeRangeRecordsRes()  {}
func (*R404) listTradeTimeRangeRes()         {}
func (*R404) readBarGroupRes()               {}
func (*R404) readBarGroupTimeRangeRes()      {}
func (*R404) readBarRecordGroupRes()         {}
func (*R404) readBarRecordRes()              {}
func (*R404) readBarTimeRangeIntervalRes()   {}
func (*R404) readBarTimeRangeRes()           {}
func (*R404) readDataSourceRes()             {}
func (*R404) readDividendRes()               {}
func (*R404) readEntityRes()                 {}
func (*R404) readExchangeRes()               {}
func (*R404) readFinancialRes()              {}
func (*R404) readIntervalDataSourceRes()     {}
func (*R404) readIntervalRes()               {}
func (*R404) readIntervalStockRes()          {}
func (*R404) readMarketHoursMarketInfoRes()  {}
func (*R404) readMarketHoursRes()            {}
func (*R404) readMarketInfoRes()             {}
func (*R404) readSplitRes()                  {}
func (*R404) readSplitStockRes()             {}
func (*R404) readTradeConditionRes()         {}
func (*R404) readTradeCorrectionRes()        {}
func (*R404) readTradeRecordRes()            {}
func (*R404) readTradeRecordTimeRangeRes()   {}
func (*R404) readTradeTimeRangeIntervalRes() {}
func (*R404) readTradeTimeRangeRes()         {}
func (*R404) updateBarGroupRes()             {}
func (*R404) updateBarRecordRes()            {}
func (*R404) updateBarTimeRangeRes()         {}
func (*R404) updateDataSourceRes()           {}
func (*R404) updateDividendRes()             {}
func (*R404) updateEntityRes()               {}
func (*R404) updateExchangeRes()             {}
func (*R404) updateFinancialRes()            {}
func (*R404) updateIntervalRes()             {}
func (*R404) updateMarketHoursRes()          {}
func (*R404) updateMarketInfoRes()           {}
func (*R404) updateSplitRes()                {}
func (*R404) updateTradeConditionRes()       {}
func (*R404) updateTradeCorrectionRes()      {}
func (*R404) updateTradeRecordRes()          {}
func (*R404) updateTradeTimeRangeRes()       {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R409) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R409) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R409) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R409) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R409) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R409) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R409) createBarGroupRes()             {}
func (*R409) createBarRecordRes()            {}
func (*R409) createBarTimeRangeRes()         {}
func (*R409) createDataSourceRes()           {}
func (*R409) createDividendRes()             {}
func (*R409) createEntityRes()               {}
func (*R409) createExchangeRes()             {}
func (*R409) createFinancialRes()            {}
func (*R409) createIntervalRes()             {}
func (*R409) createMarketHoursRes()          {}
func (*R409) createMarketInfoRes()           {}
func (*R409) createSplitRes()                {}
func (*R409) createTradeConditionRes()       {}
func (*R409) createTradeCorrectionRes()      {}
func (*R409) createTradeRecordRes()          {}
func (*R409) createTradeTimeRangeRes()       {}
func (*R409) deleteBarGroupRes()             {}
func (*R409) deleteBarRecordRes()            {}
func (*R409) deleteBarTimeRangeRes()         {}
func (*R409) deleteDataSourceRes()           {}
func (*R409) deleteDividendRes()             {}
func (*R409) deleteEntityRes()               {}
func (*R409) deleteExchangeRes()             {}
func (*R409) deleteFinancialRes()            {}
func (*R409) deleteIntervalRes()             {}
func (*R409) deleteMarketHoursRes()          {}
func (*R409) deleteMarketInfoRes()           {}
func (*R409) deleteSplitRes()                {}
func (*R409) deleteTradeConditionRes()       {}
func (*R409) deleteTradeCorrectionRes()      {}
func (*R409) deleteTradeRecordRes()          {}
func (*R409) deleteTradeTimeRangeRes()       {}
func (*R409) listBarGroupRecordsRes()        {}
func (*R409) listBarGroupRes()               {}
func (*R409) listBarRecordRes()              {}
func (*R409) listBarTimeRangeGroupsRes()     {}
func (*R409) listBarTimeRangeRes()           {}
func (*R409) listDataSourceIntervalsRes()    {}
func (*R409) listDataSourceRes()             {}
func (*R409) listDividendRes()               {}
func (*R409) listDividendStockRes()          {}
func (*R409) listEntityDividendsRes()        {}
func (*R409) listEntityExchangesRes()        {}
func (*R409) listEntityFinancialsRes()       {}
func (*R409) listEntityIntervalsRes()        {}
func (*R409) listEntityRes()                 {}
func (*R409) listEntitySplitsRes()           {}
func (*R409) listExchangeRes()               {}
func (*R409) listExchangeStocksRes()         {}
func (*R409) listFinancialRes()              {}
func (*R409) listFinancialStockRes()         {}
func (*R409) listIntervalBarsRes()           {}
func (*R409) listIntervalRes()               {}
func (*R409) listIntervalTradesRes()         {}
func (*R409) listMarketHoursRes()            {}
func (*R409) listMarketInfoHoursRes()        {}
func (*R409) listMarketInfoRes()             {}
func (*R409) listSplitRes()                  {}
func (*R409) listTradeConditionRecordRes()   {}
func (*R409) listTradeConditionRes()         {}
func (*R409) listTradeCorrectionRecordRes()  {}
func (*R409) listTradeCorrectionRes()        {}
func (*R409) listTradeRecordConditionsRes()  {}
func (*R409) listTradeRecordCorrectionRes()  {}
func (*R409) listTradeRecordExchangeRes()    {}
func (*R409) listTradeRecordRes()            {}
func (*R409) listTradeTimeRangeRecordsRes()  {}
func (*R409) listTradeTimeRangeRes()         {}
func (*R409) readBarGroupRes()               {}
func (*R409) readBarGroupTimeRangeRes()      {}
func (*R409) readBarRecordGroupRes()         {}
func (*R409) readBarRecordRes()              {}
func (*R409) readBarTimeRangeIntervalRes()   {}
func (*R409) readBarTimeRangeRes()           {}
func (*R409) readDataSourceRes()             {}
func (*R409) readDividendRes()               {}
func (*R409) readEntityRes()                 {}
func (*R409) readExchangeRes()               {}
func (*R409) readFinancialRes()              {}
func (*R409) readIntervalDataSourceRes()     {}
func (*R409) readIntervalRes()               {}
func (*R409) readIntervalStockRes()          {}
func (*R409) readMarketHoursMarketInfoRes()  {}
func (*R409) readMarketHoursRes()            {}
func (*R409) readMarketInfoRes()             {}
func (*R409) readSplitRes()                  {}
func (*R409) readSplitStockRes()             {}
func (*R409) readTradeConditionRes()         {}
func (*R409) readTradeCorrectionRes()        {}
func (*R409) readTradeRecordRes()            {}
func (*R409) readTradeRecordTimeRangeRes()   {}
func (*R409) readTradeTimeRangeIntervalRes() {}
func (*R409) readTradeTimeRangeRes()         {}
func (*R409) updateBarGroupRes()             {}
func (*R409) updateBarRecordRes()            {}
func (*R409) updateBarTimeRangeRes()         {}
func (*R409) updateDataSourceRes()           {}
func (*R409) updateDividendRes()             {}
func (*R409) updateEntityRes()               {}
func (*R409) updateExchangeRes()             {}
func (*R409) updateFinancialRes()            {}
func (*R409) updateIntervalRes()             {}
func (*R409) updateMarketHoursRes()          {}
func (*R409) updateMarketInfoRes()           {}
func (*R409) updateSplitRes()                {}
func (*R409) updateTradeConditionRes()       {}
func (*R409) updateTradeCorrectionRes()      {}
func (*R409) updateTradeRecordRes()          {}
func (*R409) updateTradeTimeRangeRes()       {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R500) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R500) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R500) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R500) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R500) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R500) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R500) createBarGroupRes()             {}
func (*R500) createBarRecordRes()            {}
func (*R500) createBarTimeRangeRes()         {}
func (*R500) createDataSourceRes()           {}
func (*R500) createDividendRes()             {}
func (*R500) createEntityRes()               {}
func (*R500) createExchangeRes()             {}
func (*R500) createFinancialRes()            {}
func (*R500) createIntervalRes()             {}
func (*R500) createMarketHoursRes()          {}
func (*R500) createMarketInfoRes()           {}
func (*R500) createSplitRes()                {}
func (*R500) createTradeConditionRes()       {}
func (*R500) createTradeCorrectionRes()      {}
func (*R500) createTradeRecordRes()          {}
func (*R500) createTradeTimeRangeRes()       {}
func (*R500) deleteBarGroupRes()             {}
func (*R500) deleteBarRecordRes()            {}
func (*R500) deleteBarTimeRangeRes()         {}
func (*R500) deleteDataSourceRes()           {}
func (*R500) deleteDividendRes()             {}
func (*R500) deleteEntityRes()               {}
func (*R500) deleteExchangeRes()             {}
func (*R500) deleteFinancialRes()            {}
func (*R500) deleteIntervalRes()             {}
func (*R500) deleteMarketHoursRes()          {}
func (*R500) deleteMarketInfoRes()           {}
func (*R500) deleteSplitRes()                {}
func (*R500) deleteTradeConditionRes()       {}
func (*R500) deleteTradeCorrectionRes()      {}
func (*R500) deleteTradeRecordRes()          {}
func (*R500) deleteTradeTimeRangeRes()       {}
func (*R500) listBarGroupRecordsRes()        {}
func (*R500) listBarGroupRes()               {}
func (*R500) listBarRecordRes()              {}
func (*R500) listBarTimeRangeGroupsRes()     {}
func (*R500) listBarTimeRangeRes()           {}
func (*R500) listDataSourceIntervalsRes()    {}
func (*R500) listDataSourceRes()             {}
func (*R500) listDividendRes()               {}
func (*R500) listDividendStockRes()          {}
func (*R500) listEntityDividendsRes()        {}
func (*R500) listEntityExchangesRes()        {}
func (*R500) listEntityFinancialsRes()       {}
func (*R500) listEntityIntervalsRes()        {}
func (*R500) listEntityRes()                 {}
func (*R500) listEntitySplitsRes()           {}
func (*R500) listExchangeRes()               {}
func (*R500) listExchangeStocksRes()         {}
func (*R500) listFinancialRes()              {}
func (*R500) listFinancialStockRes()         {}
func (*R500) listIntervalBarsRes()           {}
func (*R500) listIntervalRes()               {}
func (*R500) listIntervalTradesRes()         {}
func (*R500) listMarketHoursRes()            {}
func (*R500) listMarketInfoHoursRes()        {}
func (*R500) listMarketInfoRes()             {}
func (*R500) listSplitRes()                  {}
func (*R500) listTradeConditionRecordRes()   {}
func (*R500) listTradeConditionRes()         {}
func (*R500) listTradeCorrectionRecordRes()  {}
func (*R500) listTradeCorrectionRes()        {}
func (*R500) listTradeRecordConditionsRes()  {}
func (*R500) listTradeRecordCorrectionRes()  {}
func (*R500) listTradeRecordExchangeRes()    {}
func (*R500) listTradeRecordRes()            {}
func (*R500) listTradeTimeRangeRecordsRes()  {}
func (*R500) listTradeTimeRangeRes()         {}
func (*R500) readBarGroupRes()               {}
func (*R500) readBarGroupTimeRangeRes()      {}
func (*R500) readBarRecordGroupRes()         {}
func (*R500) readBarRecordRes()              {}
func (*R500) readBarTimeRangeIntervalRes()   {}
func (*R500) readBarTimeRangeRes()           {}
func (*R500) readDataSourceRes()             {}
func (*R500) readDividendRes()               {}
func (*R500) readEntityRes()                 {}
func (*R500) readExchangeRes()               {}
func (*R500) readFinancialRes()              {}
func (*R500) readIntervalDataSourceRes()     {}
func (*R500) readIntervalRes()               {}
func (*R500) readIntervalStockRes()          {}
func (*R500) readMarketHoursMarketInfoRes()  {}
func (*R500) readMarketHoursRes()            {}
func (*R500) readMarketInfoRes()             {}
func (*R500) readSplitRes()                  {}
func (*R500) readSplitStockRes()             {}
func (*R500) readTradeConditionRes()         {}
func (*R500) readTradeCorrectionRes()        {}
func (*R500) readTradeRecordRes()            {}
func (*R500) readTradeRecordTimeRangeRes()   {}
func (*R500) readTradeTimeRangeIntervalRes() {}
func (*R500) readTradeTimeRangeRes()         {}
func (*R500) updateBarGroupRes()             {}
func (*R500) updateBarRecordRes()            {}
func (*R500) updateBarTimeRangeRes()         {}
func (*R500) updateDataSourceRes()           {}
func (*R500) updateDividendRes()             {}
func (*R500) updateEntityRes()               {}
func (*R500) updateExchangeRes()             {}
func (*R500) updateFinancialRes()            {}
func (*R500) updateIntervalRes()             {}
func (*R500) updateMarketHoursRes()          {}
func (*R500) updateMarketInfoRes()           {}
func (*R500) updateSplitRes()                {}
func (*R500) updateTradeConditionRes()       {}
func (*R500) updateTradeCorrectionRes()      {}
func (*R500) updateTradeRecordRes()          {}
func (*R500) updateTradeTimeRangeRes()       {}

type SearchTickerOK struct {
	Status  jx.Raw                      `json:"status"`
	Results []SearchTickerOKResultsItem `json:"results"`
	Errors  jx.Raw                      `json:"errors"`
}

// GetStatus returns the value of Status.
func (s *SearchTickerOK) GetStatus() jx.Raw {
	return s.Status
}

// GetResults returns the value of Results.
func (s *SearchTickerOK) GetResults() []SearchTickerOKResultsItem {
	return s.Results
}

// GetErrors returns the value of Errors.
func (s *SearchTickerOK) GetErrors() jx.Raw {
	return s.Errors
}

// SetStatus sets the value of Status.
func (s *SearchTickerOK) SetStatus(val jx.Raw) {
	s.Status = val
}

// SetResults sets the value of Results.
func (s *SearchTickerOK) SetResults(val []SearchTickerOKResultsItem) {
	s.Results = val
}

// SetErrors sets the value of Errors.
func (s *SearchTickerOK) SetErrors(val jx.Raw) {
	s.Errors = val
}

type SearchTickerOKResultsItem struct {
	Ticker string `json:"ticker"`
	Name   string `json:"name"`
}

// GetTicker returns the value of Ticker.
func (s *SearchTickerOKResultsItem) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *SearchTickerOKResultsItem) GetName() string {
	return s.Name
}

// SetTicker sets the value of Ticker.
func (s *SearchTickerOKResultsItem) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *SearchTickerOKResultsItem) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/SplitCreate
type SplitCreate struct {
	ID            int       `json:"id"`
	ExecutionDate time.Time `json:"execution_date"`
	From          float64   `json:"from"`
	To            float64   `json:"to"`
}

// GetID returns the value of ID.
func (s *SplitCreate) GetID() int {
	return s.ID
}

// GetExecutionDate returns the value of ExecutionDate.
func (s *SplitCreate) GetExecutionDate() time.Time {
	return s.ExecutionDate
}

// GetFrom returns the value of From.
func (s *SplitCreate) GetFrom() float64 {
	return s.From
}

// GetTo returns the value of To.
func (s *SplitCreate) GetTo() float64 {
	return s.To
}

// SetID sets the value of ID.
func (s *SplitCreate) SetID(val int) {
	s.ID = val
}

// SetExecutionDate sets the value of ExecutionDate.
func (s *SplitCreate) SetExecutionDate(val time.Time) {
	s.ExecutionDate = val
}

// SetFrom sets the value of From.
func (s *SplitCreate) SetFrom(val float64) {
	s.From = val
}

// SetTo sets the value of To.
func (s *SplitCreate) SetTo(val float64) {
	s.To = val
}

func (*SplitCreate) createSplitRes() {}

// Ref: #/components/schemas/SplitList
type SplitList struct {
	ID            int       `json:"id"`
	ExecutionDate time.Time `json:"execution_date"`
	From          float64   `json:"from"`
	To            float64   `json:"to"`
}

// GetID returns the value of ID.
func (s *SplitList) GetID() int {
	return s.ID
}

// GetExecutionDate returns the value of ExecutionDate.
func (s *SplitList) GetExecutionDate() time.Time {
	return s.ExecutionDate
}

// GetFrom returns the value of From.
func (s *SplitList) GetFrom() float64 {
	return s.From
}

// GetTo returns the value of To.
func (s *SplitList) GetTo() float64 {
	return s.To
}

// SetID sets the value of ID.
func (s *SplitList) SetID(val int) {
	s.ID = val
}

// SetExecutionDate sets the value of ExecutionDate.
func (s *SplitList) SetExecutionDate(val time.Time) {
	s.ExecutionDate = val
}

// SetFrom sets the value of From.
func (s *SplitList) SetFrom(val float64) {
	s.From = val
}

// SetTo sets the value of To.
func (s *SplitList) SetTo(val float64) {
	s.To = val
}

// Ref: #/components/schemas/SplitRead
type SplitRead struct {
	ID            int       `json:"id"`
	ExecutionDate time.Time `json:"execution_date"`
	From          float64   `json:"from"`
	To            float64   `json:"to"`
}

// GetID returns the value of ID.
func (s *SplitRead) GetID() int {
	return s.ID
}

// GetExecutionDate returns the value of ExecutionDate.
func (s *SplitRead) GetExecutionDate() time.Time {
	return s.ExecutionDate
}

// GetFrom returns the value of From.
func (s *SplitRead) GetFrom() float64 {
	return s.From
}

// GetTo returns the value of To.
func (s *SplitRead) GetTo() float64 {
	return s.To
}

// SetID sets the value of ID.
func (s *SplitRead) SetID(val int) {
	s.ID = val
}

// SetExecutionDate sets the value of ExecutionDate.
func (s *SplitRead) SetExecutionDate(val time.Time) {
	s.ExecutionDate = val
}

// SetFrom sets the value of From.
func (s *SplitRead) SetFrom(val float64) {
	s.From = val
}

// SetTo sets the value of To.
func (s *SplitRead) SetTo(val float64) {
	s.To = val
}

func (*SplitRead) readSplitRes() {}

// Ref: #/components/schemas/Split_StockRead
type SplitStockRead struct {
	ID          int       `json:"id"`
	Active      bool      `json:"active"`
	Ticker      string    `json:"ticker"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	ListDate    time.Time `json:"list_date"`
	Options     bool      `json:"options"`
	Tradable    bool      `json:"tradable"`
}

// GetID returns the value of ID.
func (s *SplitStockRead) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *SplitStockRead) GetActive() bool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *SplitStockRead) GetTicker() string {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *SplitStockRead) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *SplitStockRead) GetDescription() string {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *SplitStockRead) GetListDate() time.Time {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *SplitStockRead) GetOptions() bool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *SplitStockRead) GetTradable() bool {
	return s.Tradable
}

// SetID sets the value of ID.
func (s *SplitStockRead) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *SplitStockRead) SetActive(val bool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *SplitStockRead) SetTicker(val string) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *SplitStockRead) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *SplitStockRead) SetDescription(val string) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *SplitStockRead) SetListDate(val time.Time) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *SplitStockRead) SetOptions(val bool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *SplitStockRead) SetTradable(val bool) {
	s.Tradable = val
}

func (*SplitStockRead) readSplitStockRes() {}

// Ref: #/components/schemas/SplitUpdate
type SplitUpdate struct {
	ID            int       `json:"id"`
	ExecutionDate time.Time `json:"execution_date"`
	From          float64   `json:"from"`
	To            float64   `json:"to"`
}

// GetID returns the value of ID.
func (s *SplitUpdate) GetID() int {
	return s.ID
}

// GetExecutionDate returns the value of ExecutionDate.
func (s *SplitUpdate) GetExecutionDate() time.Time {
	return s.ExecutionDate
}

// GetFrom returns the value of From.
func (s *SplitUpdate) GetFrom() float64 {
	return s.From
}

// GetTo returns the value of To.
func (s *SplitUpdate) GetTo() float64 {
	return s.To
}

// SetID sets the value of ID.
func (s *SplitUpdate) SetID(val int) {
	s.ID = val
}

// SetExecutionDate sets the value of ExecutionDate.
func (s *SplitUpdate) SetExecutionDate(val time.Time) {
	s.ExecutionDate = val
}

// SetFrom sets the value of From.
func (s *SplitUpdate) SetFrom(val float64) {
	s.From = val
}

// SetTo sets the value of To.
func (s *SplitUpdate) SetTo(val float64) {
	s.To = val
}

func (*SplitUpdate) updateSplitRes() {}

// Ref: #/components/schemas/TradeConditionCreate
type TradeConditionCreate struct {
	ID        int    `json:"id"`
	Condition string `json:"condition"`
}

// GetID returns the value of ID.
func (s *TradeConditionCreate) GetID() int {
	return s.ID
}

// GetCondition returns the value of Condition.
func (s *TradeConditionCreate) GetCondition() string {
	return s.Condition
}

// SetID sets the value of ID.
func (s *TradeConditionCreate) SetID(val int) {
	s.ID = val
}

// SetCondition sets the value of Condition.
func (s *TradeConditionCreate) SetCondition(val string) {
	s.Condition = val
}

func (*TradeConditionCreate) createTradeConditionRes() {}

// Ref: #/components/schemas/TradeConditionList
type TradeConditionList struct {
	ID        int    `json:"id"`
	Condition string `json:"condition"`
}

// GetID returns the value of ID.
func (s *TradeConditionList) GetID() int {
	return s.ID
}

// GetCondition returns the value of Condition.
func (s *TradeConditionList) GetCondition() string {
	return s.Condition
}

// SetID sets the value of ID.
func (s *TradeConditionList) SetID(val int) {
	s.ID = val
}

// SetCondition sets the value of Condition.
func (s *TradeConditionList) SetCondition(val string) {
	s.Condition = val
}

// Ref: #/components/schemas/TradeConditionRead
type TradeConditionRead struct {
	ID        int    `json:"id"`
	Condition string `json:"condition"`
}

// GetID returns the value of ID.
func (s *TradeConditionRead) GetID() int {
	return s.ID
}

// GetCondition returns the value of Condition.
func (s *TradeConditionRead) GetCondition() string {
	return s.Condition
}

// SetID sets the value of ID.
func (s *TradeConditionRead) SetID(val int) {
	s.ID = val
}

// SetCondition sets the value of Condition.
func (s *TradeConditionRead) SetCondition(val string) {
	s.Condition = val
}

func (*TradeConditionRead) readTradeConditionRes() {}

// Ref: #/components/schemas/TradeCondition_RecordList
type TradeConditionRecordList struct {
	ID          int       `json:"id"`
	Price       float64   `json:"price"`
	Timestamp   time.Time `json:"timestamp"`
	Volume      int32     `json:"volume"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *TradeConditionRecordList) GetID() int {
	return s.ID
}

// GetPrice returns the value of Price.
func (s *TradeConditionRecordList) GetPrice() float64 {
	return s.Price
}

// GetTimestamp returns the value of Timestamp.
func (s *TradeConditionRecordList) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *TradeConditionRecordList) GetVolume() int32 {
	return s.Volume
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *TradeConditionRecordList) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *TradeConditionRecordList) SetID(val int) {
	s.ID = val
}

// SetPrice sets the value of Price.
func (s *TradeConditionRecordList) SetPrice(val float64) {
	s.Price = val
}

// SetTimestamp sets the value of Timestamp.
func (s *TradeConditionRecordList) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *TradeConditionRecordList) SetVolume(val int32) {
	s.Volume = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *TradeConditionRecordList) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

// Ref: #/components/schemas/TradeConditionUpdate
type TradeConditionUpdate struct {
	ID        int    `json:"id"`
	Condition string `json:"condition"`
}

// GetID returns the value of ID.
func (s *TradeConditionUpdate) GetID() int {
	return s.ID
}

// GetCondition returns the value of Condition.
func (s *TradeConditionUpdate) GetCondition() string {
	return s.Condition
}

// SetID sets the value of ID.
func (s *TradeConditionUpdate) SetID(val int) {
	s.ID = val
}

// SetCondition sets the value of Condition.
func (s *TradeConditionUpdate) SetCondition(val string) {
	s.Condition = val
}

func (*TradeConditionUpdate) updateTradeConditionRes() {}

// Ref: #/components/schemas/TradeCorrectionCreate
type TradeCorrectionCreate struct {
	ID         int    `json:"id"`
	Correction string `json:"correction"`
}

// GetID returns the value of ID.
func (s *TradeCorrectionCreate) GetID() int {
	return s.ID
}

// GetCorrection returns the value of Correction.
func (s *TradeCorrectionCreate) GetCorrection() string {
	return s.Correction
}

// SetID sets the value of ID.
func (s *TradeCorrectionCreate) SetID(val int) {
	s.ID = val
}

// SetCorrection sets the value of Correction.
func (s *TradeCorrectionCreate) SetCorrection(val string) {
	s.Correction = val
}

func (*TradeCorrectionCreate) createTradeCorrectionRes() {}

// Ref: #/components/schemas/TradeCorrectionList
type TradeCorrectionList struct {
	ID         int    `json:"id"`
	Correction string `json:"correction"`
}

// GetID returns the value of ID.
func (s *TradeCorrectionList) GetID() int {
	return s.ID
}

// GetCorrection returns the value of Correction.
func (s *TradeCorrectionList) GetCorrection() string {
	return s.Correction
}

// SetID sets the value of ID.
func (s *TradeCorrectionList) SetID(val int) {
	s.ID = val
}

// SetCorrection sets the value of Correction.
func (s *TradeCorrectionList) SetCorrection(val string) {
	s.Correction = val
}

// Ref: #/components/schemas/TradeCorrectionRead
type TradeCorrectionRead struct {
	ID         int    `json:"id"`
	Correction string `json:"correction"`
}

// GetID returns the value of ID.
func (s *TradeCorrectionRead) GetID() int {
	return s.ID
}

// GetCorrection returns the value of Correction.
func (s *TradeCorrectionRead) GetCorrection() string {
	return s.Correction
}

// SetID sets the value of ID.
func (s *TradeCorrectionRead) SetID(val int) {
	s.ID = val
}

// SetCorrection sets the value of Correction.
func (s *TradeCorrectionRead) SetCorrection(val string) {
	s.Correction = val
}

func (*TradeCorrectionRead) readTradeCorrectionRes() {}

// Ref: #/components/schemas/TradeCorrection_RecordList
type TradeCorrectionRecordList struct {
	ID          int       `json:"id"`
	Price       float64   `json:"price"`
	Timestamp   time.Time `json:"timestamp"`
	Volume      int32     `json:"volume"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *TradeCorrectionRecordList) GetID() int {
	return s.ID
}

// GetPrice returns the value of Price.
func (s *TradeCorrectionRecordList) GetPrice() float64 {
	return s.Price
}

// GetTimestamp returns the value of Timestamp.
func (s *TradeCorrectionRecordList) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *TradeCorrectionRecordList) GetVolume() int32 {
	return s.Volume
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *TradeCorrectionRecordList) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *TradeCorrectionRecordList) SetID(val int) {
	s.ID = val
}

// SetPrice sets the value of Price.
func (s *TradeCorrectionRecordList) SetPrice(val float64) {
	s.Price = val
}

// SetTimestamp sets the value of Timestamp.
func (s *TradeCorrectionRecordList) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *TradeCorrectionRecordList) SetVolume(val int32) {
	s.Volume = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *TradeCorrectionRecordList) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

// Ref: #/components/schemas/TradeCorrectionUpdate
type TradeCorrectionUpdate struct {
	ID         int    `json:"id"`
	Correction string `json:"correction"`
}

// GetID returns the value of ID.
func (s *TradeCorrectionUpdate) GetID() int {
	return s.ID
}

// GetCorrection returns the value of Correction.
func (s *TradeCorrectionUpdate) GetCorrection() string {
	return s.Correction
}

// SetID sets the value of ID.
func (s *TradeCorrectionUpdate) SetID(val int) {
	s.ID = val
}

// SetCorrection sets the value of Correction.
func (s *TradeCorrectionUpdate) SetCorrection(val string) {
	s.Correction = val
}

func (*TradeCorrectionUpdate) updateTradeCorrectionRes() {}

// Ref: #/components/schemas/TradeRecord_ConditionsList
type TradeRecordConditionsList struct {
	ID        int    `json:"id"`
	Condition string `json:"condition"`
}

// GetID returns the value of ID.
func (s *TradeRecordConditionsList) GetID() int {
	return s.ID
}

// GetCondition returns the value of Condition.
func (s *TradeRecordConditionsList) GetCondition() string {
	return s.Condition
}

// SetID sets the value of ID.
func (s *TradeRecordConditionsList) SetID(val int) {
	s.ID = val
}

// SetCondition sets the value of Condition.
func (s *TradeRecordConditionsList) SetCondition(val string) {
	s.Condition = val
}

// Ref: #/components/schemas/TradeRecord_CorrectionList
type TradeRecordCorrectionList struct {
	ID         int    `json:"id"`
	Correction string `json:"correction"`
}

// GetID returns the value of ID.
func (s *TradeRecordCorrectionList) GetID() int {
	return s.ID
}

// GetCorrection returns the value of Correction.
func (s *TradeRecordCorrectionList) GetCorrection() string {
	return s.Correction
}

// SetID sets the value of ID.
func (s *TradeRecordCorrectionList) SetID(val int) {
	s.ID = val
}

// SetCorrection sets the value of Correction.
func (s *TradeRecordCorrectionList) SetCorrection(val string) {
	s.Correction = val
}

// Ref: #/components/schemas/TradeRecordCreate
type TradeRecordCreate struct {
	ID          int       `json:"id"`
	Price       float64   `json:"price"`
	Timestamp   time.Time `json:"timestamp"`
	Volume      int32     `json:"volume"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *TradeRecordCreate) GetID() int {
	return s.ID
}

// GetPrice returns the value of Price.
func (s *TradeRecordCreate) GetPrice() float64 {
	return s.Price
}

// GetTimestamp returns the value of Timestamp.
func (s *TradeRecordCreate) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *TradeRecordCreate) GetVolume() int32 {
	return s.Volume
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *TradeRecordCreate) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *TradeRecordCreate) SetID(val int) {
	s.ID = val
}

// SetPrice sets the value of Price.
func (s *TradeRecordCreate) SetPrice(val float64) {
	s.Price = val
}

// SetTimestamp sets the value of Timestamp.
func (s *TradeRecordCreate) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *TradeRecordCreate) SetVolume(val int32) {
	s.Volume = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *TradeRecordCreate) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

func (*TradeRecordCreate) createTradeRecordRes() {}

// Ref: #/components/schemas/TradeRecord_ExchangeList
type TradeRecordExchangeList struct {
	ID   int    `json:"id"`
	Code string `json:"code"`
	Name string `json:"name"`
}

// GetID returns the value of ID.
func (s *TradeRecordExchangeList) GetID() int {
	return s.ID
}

// GetCode returns the value of Code.
func (s *TradeRecordExchangeList) GetCode() string {
	return s.Code
}

// GetName returns the value of Name.
func (s *TradeRecordExchangeList) GetName() string {
	return s.Name
}

// SetID sets the value of ID.
func (s *TradeRecordExchangeList) SetID(val int) {
	s.ID = val
}

// SetCode sets the value of Code.
func (s *TradeRecordExchangeList) SetCode(val string) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *TradeRecordExchangeList) SetName(val string) {
	s.Name = val
}

// Ref: #/components/schemas/TradeRecordList
type TradeRecordList struct {
	ID          int       `json:"id"`
	Price       float64   `json:"price"`
	Timestamp   time.Time `json:"timestamp"`
	Volume      int32     `json:"volume"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *TradeRecordList) GetID() int {
	return s.ID
}

// GetPrice returns the value of Price.
func (s *TradeRecordList) GetPrice() float64 {
	return s.Price
}

// GetTimestamp returns the value of Timestamp.
func (s *TradeRecordList) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *TradeRecordList) GetVolume() int32 {
	return s.Volume
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *TradeRecordList) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *TradeRecordList) SetID(val int) {
	s.ID = val
}

// SetPrice sets the value of Price.
func (s *TradeRecordList) SetPrice(val float64) {
	s.Price = val
}

// SetTimestamp sets the value of Timestamp.
func (s *TradeRecordList) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *TradeRecordList) SetVolume(val int32) {
	s.Volume = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *TradeRecordList) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

// Ref: #/components/schemas/TradeRecordRead
type TradeRecordRead struct {
	ID          int       `json:"id"`
	Price       float64   `json:"price"`
	Timestamp   time.Time `json:"timestamp"`
	Volume      int32     `json:"volume"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *TradeRecordRead) GetID() int {
	return s.ID
}

// GetPrice returns the value of Price.
func (s *TradeRecordRead) GetPrice() float64 {
	return s.Price
}

// GetTimestamp returns the value of Timestamp.
func (s *TradeRecordRead) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *TradeRecordRead) GetVolume() int32 {
	return s.Volume
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *TradeRecordRead) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *TradeRecordRead) SetID(val int) {
	s.ID = val
}

// SetPrice sets the value of Price.
func (s *TradeRecordRead) SetPrice(val float64) {
	s.Price = val
}

// SetTimestamp sets the value of Timestamp.
func (s *TradeRecordRead) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *TradeRecordRead) SetVolume(val int32) {
	s.Volume = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *TradeRecordRead) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

func (*TradeRecordRead) readTradeRecordRes() {}

// Ref: #/components/schemas/TradeRecord_TimeRangeRead
type TradeRecordTimeRangeRead struct {
	ID         int       `json:"id"`
	Start      time.Time `json:"start"`
	End        time.Time `json:"end"`
	IntervalID int       `json:"interval_id"`
}

// GetID returns the value of ID.
func (s *TradeRecordTimeRangeRead) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *TradeRecordTimeRangeRead) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TradeRecordTimeRangeRead) GetEnd() time.Time {
	return s.End
}

// GetIntervalID returns the value of IntervalID.
func (s *TradeRecordTimeRangeRead) GetIntervalID() int {
	return s.IntervalID
}

// SetID sets the value of ID.
func (s *TradeRecordTimeRangeRead) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *TradeRecordTimeRangeRead) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TradeRecordTimeRangeRead) SetEnd(val time.Time) {
	s.End = val
}

// SetIntervalID sets the value of IntervalID.
func (s *TradeRecordTimeRangeRead) SetIntervalID(val int) {
	s.IntervalID = val
}

func (*TradeRecordTimeRangeRead) readTradeRecordTimeRangeRes() {}

// Ref: #/components/schemas/TradeRecordUpdate
type TradeRecordUpdate struct {
	ID          int       `json:"id"`
	Price       float64   `json:"price"`
	Timestamp   time.Time `json:"timestamp"`
	Volume      int32     `json:"volume"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *TradeRecordUpdate) GetID() int {
	return s.ID
}

// GetPrice returns the value of Price.
func (s *TradeRecordUpdate) GetPrice() float64 {
	return s.Price
}

// GetTimestamp returns the value of Timestamp.
func (s *TradeRecordUpdate) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *TradeRecordUpdate) GetVolume() int32 {
	return s.Volume
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *TradeRecordUpdate) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *TradeRecordUpdate) SetID(val int) {
	s.ID = val
}

// SetPrice sets the value of Price.
func (s *TradeRecordUpdate) SetPrice(val float64) {
	s.Price = val
}

// SetTimestamp sets the value of Timestamp.
func (s *TradeRecordUpdate) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *TradeRecordUpdate) SetVolume(val int32) {
	s.Volume = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *TradeRecordUpdate) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

func (*TradeRecordUpdate) updateTradeRecordRes() {}

// Ref: #/components/schemas/TradeTimeRangeCreate
type TradeTimeRangeCreate struct {
	ID         int       `json:"id"`
	Start      time.Time `json:"start"`
	End        time.Time `json:"end"`
	IntervalID int       `json:"interval_id"`
}

// GetID returns the value of ID.
func (s *TradeTimeRangeCreate) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *TradeTimeRangeCreate) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TradeTimeRangeCreate) GetEnd() time.Time {
	return s.End
}

// GetIntervalID returns the value of IntervalID.
func (s *TradeTimeRangeCreate) GetIntervalID() int {
	return s.IntervalID
}

// SetID sets the value of ID.
func (s *TradeTimeRangeCreate) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *TradeTimeRangeCreate) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TradeTimeRangeCreate) SetEnd(val time.Time) {
	s.End = val
}

// SetIntervalID sets the value of IntervalID.
func (s *TradeTimeRangeCreate) SetIntervalID(val int) {
	s.IntervalID = val
}

func (*TradeTimeRangeCreate) createTradeTimeRangeRes() {}

// Ref: #/components/schemas/TradeTimeRange_IntervalRead
type TradeTimeRangeIntervalRead struct {
	ID           int                                `json:"id"`
	Active       bool                               `json:"active"`
	Interval     TradeTimeRangeIntervalReadInterval `json:"interval"`
	StockID      int                                `json:"stock_id"`
	DataSourceID int                                `json:"data_source_id"`
}

// GetID returns the value of ID.
func (s *TradeTimeRangeIntervalRead) GetID() int {
	return s.ID
}

// GetActive returns the value of Active.
func (s *TradeTimeRangeIntervalRead) GetActive() bool {
	return s.Active
}

// GetInterval returns the value of Interval.
func (s *TradeTimeRangeIntervalRead) GetInterval() TradeTimeRangeIntervalReadInterval {
	return s.Interval
}

// GetStockID returns the value of StockID.
func (s *TradeTimeRangeIntervalRead) GetStockID() int {
	return s.StockID
}

// GetDataSourceID returns the value of DataSourceID.
func (s *TradeTimeRangeIntervalRead) GetDataSourceID() int {
	return s.DataSourceID
}

// SetID sets the value of ID.
func (s *TradeTimeRangeIntervalRead) SetID(val int) {
	s.ID = val
}

// SetActive sets the value of Active.
func (s *TradeTimeRangeIntervalRead) SetActive(val bool) {
	s.Active = val
}

// SetInterval sets the value of Interval.
func (s *TradeTimeRangeIntervalRead) SetInterval(val TradeTimeRangeIntervalReadInterval) {
	s.Interval = val
}

// SetStockID sets the value of StockID.
func (s *TradeTimeRangeIntervalRead) SetStockID(val int) {
	s.StockID = val
}

// SetDataSourceID sets the value of DataSourceID.
func (s *TradeTimeRangeIntervalRead) SetDataSourceID(val int) {
	s.DataSourceID = val
}

func (*TradeTimeRangeIntervalRead) readTradeTimeRangeIntervalRes() {}

type TradeTimeRangeIntervalReadInterval string

const (
	TradeTimeRangeIntervalReadIntervalTrades  TradeTimeRangeIntervalReadInterval = "trades"
	TradeTimeRangeIntervalReadInterval1min    TradeTimeRangeIntervalReadInterval = "1min"
	TradeTimeRangeIntervalReadIntervalDaily   TradeTimeRangeIntervalReadInterval = "daily"
	TradeTimeRangeIntervalReadIntervalMonthly TradeTimeRangeIntervalReadInterval = "monthly"
	TradeTimeRangeIntervalReadIntervalYearly  TradeTimeRangeIntervalReadInterval = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s TradeTimeRangeIntervalReadInterval) MarshalText() ([]byte, error) {
	switch s {
	case TradeTimeRangeIntervalReadIntervalTrades:
		return []byte(s), nil
	case TradeTimeRangeIntervalReadInterval1min:
		return []byte(s), nil
	case TradeTimeRangeIntervalReadIntervalDaily:
		return []byte(s), nil
	case TradeTimeRangeIntervalReadIntervalMonthly:
		return []byte(s), nil
	case TradeTimeRangeIntervalReadIntervalYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TradeTimeRangeIntervalReadInterval) UnmarshalText(data []byte) error {
	switch TradeTimeRangeIntervalReadInterval(data) {
	case TradeTimeRangeIntervalReadIntervalTrades:
		*s = TradeTimeRangeIntervalReadIntervalTrades
		return nil
	case TradeTimeRangeIntervalReadInterval1min:
		*s = TradeTimeRangeIntervalReadInterval1min
		return nil
	case TradeTimeRangeIntervalReadIntervalDaily:
		*s = TradeTimeRangeIntervalReadIntervalDaily
		return nil
	case TradeTimeRangeIntervalReadIntervalMonthly:
		*s = TradeTimeRangeIntervalReadIntervalMonthly
		return nil
	case TradeTimeRangeIntervalReadIntervalYearly:
		*s = TradeTimeRangeIntervalReadIntervalYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TradeTimeRangeList
type TradeTimeRangeList struct {
	ID         int       `json:"id"`
	Start      time.Time `json:"start"`
	End        time.Time `json:"end"`
	IntervalID int       `json:"interval_id"`
}

// GetID returns the value of ID.
func (s *TradeTimeRangeList) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *TradeTimeRangeList) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TradeTimeRangeList) GetEnd() time.Time {
	return s.End
}

// GetIntervalID returns the value of IntervalID.
func (s *TradeTimeRangeList) GetIntervalID() int {
	return s.IntervalID
}

// SetID sets the value of ID.
func (s *TradeTimeRangeList) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *TradeTimeRangeList) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TradeTimeRangeList) SetEnd(val time.Time) {
	s.End = val
}

// SetIntervalID sets the value of IntervalID.
func (s *TradeTimeRangeList) SetIntervalID(val int) {
	s.IntervalID = val
}

// Ref: #/components/schemas/TradeTimeRangeRead
type TradeTimeRangeRead struct {
	ID         int       `json:"id"`
	Start      time.Time `json:"start"`
	End        time.Time `json:"end"`
	IntervalID int       `json:"interval_id"`
}

// GetID returns the value of ID.
func (s *TradeTimeRangeRead) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *TradeTimeRangeRead) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TradeTimeRangeRead) GetEnd() time.Time {
	return s.End
}

// GetIntervalID returns the value of IntervalID.
func (s *TradeTimeRangeRead) GetIntervalID() int {
	return s.IntervalID
}

// SetID sets the value of ID.
func (s *TradeTimeRangeRead) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *TradeTimeRangeRead) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TradeTimeRangeRead) SetEnd(val time.Time) {
	s.End = val
}

// SetIntervalID sets the value of IntervalID.
func (s *TradeTimeRangeRead) SetIntervalID(val int) {
	s.IntervalID = val
}

func (*TradeTimeRangeRead) readTradeTimeRangeRes() {}

// Ref: #/components/schemas/TradeTimeRange_RecordsList
type TradeTimeRangeRecordsList struct {
	ID          int       `json:"id"`
	Price       float64   `json:"price"`
	Timestamp   time.Time `json:"timestamp"`
	Volume      int32     `json:"volume"`
	TimeRangeID int       `json:"time_range_id"`
}

// GetID returns the value of ID.
func (s *TradeTimeRangeRecordsList) GetID() int {
	return s.ID
}

// GetPrice returns the value of Price.
func (s *TradeTimeRangeRecordsList) GetPrice() float64 {
	return s.Price
}

// GetTimestamp returns the value of Timestamp.
func (s *TradeTimeRangeRecordsList) GetTimestamp() time.Time {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *TradeTimeRangeRecordsList) GetVolume() int32 {
	return s.Volume
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *TradeTimeRangeRecordsList) GetTimeRangeID() int {
	return s.TimeRangeID
}

// SetID sets the value of ID.
func (s *TradeTimeRangeRecordsList) SetID(val int) {
	s.ID = val
}

// SetPrice sets the value of Price.
func (s *TradeTimeRangeRecordsList) SetPrice(val float64) {
	s.Price = val
}

// SetTimestamp sets the value of Timestamp.
func (s *TradeTimeRangeRecordsList) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *TradeTimeRangeRecordsList) SetVolume(val int32) {
	s.Volume = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *TradeTimeRangeRecordsList) SetTimeRangeID(val int) {
	s.TimeRangeID = val
}

// Ref: #/components/schemas/TradeTimeRangeUpdate
type TradeTimeRangeUpdate struct {
	ID         int       `json:"id"`
	Start      time.Time `json:"start"`
	End        time.Time `json:"end"`
	IntervalID int       `json:"interval_id"`
}

// GetID returns the value of ID.
func (s *TradeTimeRangeUpdate) GetID() int {
	return s.ID
}

// GetStart returns the value of Start.
func (s *TradeTimeRangeUpdate) GetStart() time.Time {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TradeTimeRangeUpdate) GetEnd() time.Time {
	return s.End
}

// GetIntervalID returns the value of IntervalID.
func (s *TradeTimeRangeUpdate) GetIntervalID() int {
	return s.IntervalID
}

// SetID sets the value of ID.
func (s *TradeTimeRangeUpdate) SetID(val int) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *TradeTimeRangeUpdate) SetStart(val time.Time) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TradeTimeRangeUpdate) SetEnd(val time.Time) {
	s.End = val
}

// SetIntervalID sets the value of IntervalID.
func (s *TradeTimeRangeUpdate) SetIntervalID(val int) {
	s.IntervalID = val
}

func (*TradeTimeRangeUpdate) updateTradeTimeRangeRes() {}

type UpdateBarGroupReq struct {
	First       OptDateTime `json:"first"`
	Last        OptDateTime `json:"last"`
	Count       OptInt      `json:"count"`
	TimeRangeID OptInt      `json:"time_range_id"`
	TimeRange   OptInt      `json:"time_range"`
	Records     []int       `json:"records"`
}

// GetFirst returns the value of First.
func (s *UpdateBarGroupReq) GetFirst() OptDateTime {
	return s.First
}

// GetLast returns the value of Last.
func (s *UpdateBarGroupReq) GetLast() OptDateTime {
	return s.Last
}

// GetCount returns the value of Count.
func (s *UpdateBarGroupReq) GetCount() OptInt {
	return s.Count
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *UpdateBarGroupReq) GetTimeRangeID() OptInt {
	return s.TimeRangeID
}

// GetTimeRange returns the value of TimeRange.
func (s *UpdateBarGroupReq) GetTimeRange() OptInt {
	return s.TimeRange
}

// GetRecords returns the value of Records.
func (s *UpdateBarGroupReq) GetRecords() []int {
	return s.Records
}

// SetFirst sets the value of First.
func (s *UpdateBarGroupReq) SetFirst(val OptDateTime) {
	s.First = val
}

// SetLast sets the value of Last.
func (s *UpdateBarGroupReq) SetLast(val OptDateTime) {
	s.Last = val
}

// SetCount sets the value of Count.
func (s *UpdateBarGroupReq) SetCount(val OptInt) {
	s.Count = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *UpdateBarGroupReq) SetTimeRangeID(val OptInt) {
	s.TimeRangeID = val
}

// SetTimeRange sets the value of TimeRange.
func (s *UpdateBarGroupReq) SetTimeRange(val OptInt) {
	s.TimeRange = val
}

// SetRecords sets the value of Records.
func (s *UpdateBarGroupReq) SetRecords(val []int) {
	s.Records = val
}

type UpdateBarRecordReq struct {
	Close        OptFloat64  `json:"close"`
	High         OptFloat64  `json:"high"`
	Low          OptFloat64  `json:"low"`
	Open         OptFloat64  `json:"open"`
	Timestamp    OptDateTime `json:"timestamp"`
	Volume       OptFloat64  `json:"volume"`
	Transactions OptInt32    `json:"transactions"`
	Group        OptInt      `json:"group"`
}

// GetClose returns the value of Close.
func (s *UpdateBarRecordReq) GetClose() OptFloat64 {
	return s.Close
}

// GetHigh returns the value of High.
func (s *UpdateBarRecordReq) GetHigh() OptFloat64 {
	return s.High
}

// GetLow returns the value of Low.
func (s *UpdateBarRecordReq) GetLow() OptFloat64 {
	return s.Low
}

// GetOpen returns the value of Open.
func (s *UpdateBarRecordReq) GetOpen() OptFloat64 {
	return s.Open
}

// GetTimestamp returns the value of Timestamp.
func (s *UpdateBarRecordReq) GetTimestamp() OptDateTime {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *UpdateBarRecordReq) GetVolume() OptFloat64 {
	return s.Volume
}

// GetTransactions returns the value of Transactions.
func (s *UpdateBarRecordReq) GetTransactions() OptInt32 {
	return s.Transactions
}

// GetGroup returns the value of Group.
func (s *UpdateBarRecordReq) GetGroup() OptInt {
	return s.Group
}

// SetClose sets the value of Close.
func (s *UpdateBarRecordReq) SetClose(val OptFloat64) {
	s.Close = val
}

// SetHigh sets the value of High.
func (s *UpdateBarRecordReq) SetHigh(val OptFloat64) {
	s.High = val
}

// SetLow sets the value of Low.
func (s *UpdateBarRecordReq) SetLow(val OptFloat64) {
	s.Low = val
}

// SetOpen sets the value of Open.
func (s *UpdateBarRecordReq) SetOpen(val OptFloat64) {
	s.Open = val
}

// SetTimestamp sets the value of Timestamp.
func (s *UpdateBarRecordReq) SetTimestamp(val OptDateTime) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *UpdateBarRecordReq) SetVolume(val OptFloat64) {
	s.Volume = val
}

// SetTransactions sets the value of Transactions.
func (s *UpdateBarRecordReq) SetTransactions(val OptInt32) {
	s.Transactions = val
}

// SetGroup sets the value of Group.
func (s *UpdateBarRecordReq) SetGroup(val OptInt) {
	s.Group = val
}

type UpdateBarTimeRangeReq struct {
	Start      OptDateTime                    `json:"start"`
	End        OptDateTime                    `json:"end"`
	Count      OptInt                         `json:"count"`
	IntervalID OptInt                         `json:"interval_id"`
	Status     OptUpdateBarTimeRangeReqStatus `json:"status"`
	UpdateTime OptDateTime                    `json:"update_time"`
	Interval   OptInt                         `json:"interval"`
	Groups     []int                          `json:"groups"`
}

// GetStart returns the value of Start.
func (s *UpdateBarTimeRangeReq) GetStart() OptDateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *UpdateBarTimeRangeReq) GetEnd() OptDateTime {
	return s.End
}

// GetCount returns the value of Count.
func (s *UpdateBarTimeRangeReq) GetCount() OptInt {
	return s.Count
}

// GetIntervalID returns the value of IntervalID.
func (s *UpdateBarTimeRangeReq) GetIntervalID() OptInt {
	return s.IntervalID
}

// GetStatus returns the value of Status.
func (s *UpdateBarTimeRangeReq) GetStatus() OptUpdateBarTimeRangeReqStatus {
	return s.Status
}

// GetUpdateTime returns the value of UpdateTime.
func (s *UpdateBarTimeRangeReq) GetUpdateTime() OptDateTime {
	return s.UpdateTime
}

// GetInterval returns the value of Interval.
func (s *UpdateBarTimeRangeReq) GetInterval() OptInt {
	return s.Interval
}

// GetGroups returns the value of Groups.
func (s *UpdateBarTimeRangeReq) GetGroups() []int {
	return s.Groups
}

// SetStart sets the value of Start.
func (s *UpdateBarTimeRangeReq) SetStart(val OptDateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *UpdateBarTimeRangeReq) SetEnd(val OptDateTime) {
	s.End = val
}

// SetCount sets the value of Count.
func (s *UpdateBarTimeRangeReq) SetCount(val OptInt) {
	s.Count = val
}

// SetIntervalID sets the value of IntervalID.
func (s *UpdateBarTimeRangeReq) SetIntervalID(val OptInt) {
	s.IntervalID = val
}

// SetStatus sets the value of Status.
func (s *UpdateBarTimeRangeReq) SetStatus(val OptUpdateBarTimeRangeReqStatus) {
	s.Status = val
}

// SetUpdateTime sets the value of UpdateTime.
func (s *UpdateBarTimeRangeReq) SetUpdateTime(val OptDateTime) {
	s.UpdateTime = val
}

// SetInterval sets the value of Interval.
func (s *UpdateBarTimeRangeReq) SetInterval(val OptInt) {
	s.Interval = val
}

// SetGroups sets the value of Groups.
func (s *UpdateBarTimeRangeReq) SetGroups(val []int) {
	s.Groups = val
}

type UpdateBarTimeRangeReqStatus string

const (
	UpdateBarTimeRangeReqStatusPending      UpdateBarTimeRangeReqStatus = "pending"
	UpdateBarTimeRangeReqStatusCreated      UpdateBarTimeRangeReqStatus = "created"
	UpdateBarTimeRangeReqStatusClean        UpdateBarTimeRangeReqStatus = "clean"
	UpdateBarTimeRangeReqStatusConsolidated UpdateBarTimeRangeReqStatus = "consolidated"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateBarTimeRangeReqStatus) MarshalText() ([]byte, error) {
	switch s {
	case UpdateBarTimeRangeReqStatusPending:
		return []byte(s), nil
	case UpdateBarTimeRangeReqStatusCreated:
		return []byte(s), nil
	case UpdateBarTimeRangeReqStatusClean:
		return []byte(s), nil
	case UpdateBarTimeRangeReqStatusConsolidated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateBarTimeRangeReqStatus) UnmarshalText(data []byte) error {
	switch UpdateBarTimeRangeReqStatus(data) {
	case UpdateBarTimeRangeReqStatusPending:
		*s = UpdateBarTimeRangeReqStatusPending
		return nil
	case UpdateBarTimeRangeReqStatusCreated:
		*s = UpdateBarTimeRangeReqStatusCreated
		return nil
	case UpdateBarTimeRangeReqStatusClean:
		*s = UpdateBarTimeRangeReqStatusClean
		return nil
	case UpdateBarTimeRangeReqStatusConsolidated:
		*s = UpdateBarTimeRangeReqStatusConsolidated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateDataSourceReq struct {
	Name      OptString `json:"name"`
	Address   OptString `json:"address"`
	Intervals []int     `json:"intervals"`
}

// GetName returns the value of Name.
func (s *UpdateDataSourceReq) GetName() OptString {
	return s.Name
}

// GetAddress returns the value of Address.
func (s *UpdateDataSourceReq) GetAddress() OptString {
	return s.Address
}

// GetIntervals returns the value of Intervals.
func (s *UpdateDataSourceReq) GetIntervals() []int {
	return s.Intervals
}

// SetName sets the value of Name.
func (s *UpdateDataSourceReq) SetName(val OptString) {
	s.Name = val
}

// SetAddress sets the value of Address.
func (s *UpdateDataSourceReq) SetAddress(val OptString) {
	s.Address = val
}

// SetIntervals sets the value of Intervals.
func (s *UpdateDataSourceReq) SetIntervals(val []int) {
	s.Intervals = val
}

type UpdateDividendReq struct {
	Rate            OptFloat64  `json:"rate"`
	DeclarationDate OptDateTime `json:"declaration_date"`
	ExDividendDate  OptDateTime `json:"ex_dividend_date"`
	RecordDate      OptDateTime `json:"record_date"`
	PayDate         OptDateTime `json:"pay_date"`
	Stock           []int       `json:"stock"`
}

// GetRate returns the value of Rate.
func (s *UpdateDividendReq) GetRate() OptFloat64 {
	return s.Rate
}

// GetDeclarationDate returns the value of DeclarationDate.
func (s *UpdateDividendReq) GetDeclarationDate() OptDateTime {
	return s.DeclarationDate
}

// GetExDividendDate returns the value of ExDividendDate.
func (s *UpdateDividendReq) GetExDividendDate() OptDateTime {
	return s.ExDividendDate
}

// GetRecordDate returns the value of RecordDate.
func (s *UpdateDividendReq) GetRecordDate() OptDateTime {
	return s.RecordDate
}

// GetPayDate returns the value of PayDate.
func (s *UpdateDividendReq) GetPayDate() OptDateTime {
	return s.PayDate
}

// GetStock returns the value of Stock.
func (s *UpdateDividendReq) GetStock() []int {
	return s.Stock
}

// SetRate sets the value of Rate.
func (s *UpdateDividendReq) SetRate(val OptFloat64) {
	s.Rate = val
}

// SetDeclarationDate sets the value of DeclarationDate.
func (s *UpdateDividendReq) SetDeclarationDate(val OptDateTime) {
	s.DeclarationDate = val
}

// SetExDividendDate sets the value of ExDividendDate.
func (s *UpdateDividendReq) SetExDividendDate(val OptDateTime) {
	s.ExDividendDate = val
}

// SetRecordDate sets the value of RecordDate.
func (s *UpdateDividendReq) SetRecordDate(val OptDateTime) {
	s.RecordDate = val
}

// SetPayDate sets the value of PayDate.
func (s *UpdateDividendReq) SetPayDate(val OptDateTime) {
	s.PayDate = val
}

// SetStock sets the value of Stock.
func (s *UpdateDividendReq) SetStock(val []int) {
	s.Stock = val
}

type UpdateEntityReq struct {
	Active      OptBool     `json:"active"`
	Ticker      OptString   `json:"ticker"`
	Name        OptString   `json:"name"`
	Description OptString   `json:"description"`
	ListDate    OptDateTime `json:"list_date"`
	Options     OptBool     `json:"options"`
	Tradable    OptBool     `json:"tradable"`
	Exchanges   []int       `json:"exchanges"`
	Intervals   []int       `json:"intervals"`
	Dividends   []int       `json:"dividends"`
	Splits      []int       `json:"splits"`
	Financials  []int       `json:"financials"`
}

// GetActive returns the value of Active.
func (s *UpdateEntityReq) GetActive() OptBool {
	return s.Active
}

// GetTicker returns the value of Ticker.
func (s *UpdateEntityReq) GetTicker() OptString {
	return s.Ticker
}

// GetName returns the value of Name.
func (s *UpdateEntityReq) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *UpdateEntityReq) GetDescription() OptString {
	return s.Description
}

// GetListDate returns the value of ListDate.
func (s *UpdateEntityReq) GetListDate() OptDateTime {
	return s.ListDate
}

// GetOptions returns the value of Options.
func (s *UpdateEntityReq) GetOptions() OptBool {
	return s.Options
}

// GetTradable returns the value of Tradable.
func (s *UpdateEntityReq) GetTradable() OptBool {
	return s.Tradable
}

// GetExchanges returns the value of Exchanges.
func (s *UpdateEntityReq) GetExchanges() []int {
	return s.Exchanges
}

// GetIntervals returns the value of Intervals.
func (s *UpdateEntityReq) GetIntervals() []int {
	return s.Intervals
}

// GetDividends returns the value of Dividends.
func (s *UpdateEntityReq) GetDividends() []int {
	return s.Dividends
}

// GetSplits returns the value of Splits.
func (s *UpdateEntityReq) GetSplits() []int {
	return s.Splits
}

// GetFinancials returns the value of Financials.
func (s *UpdateEntityReq) GetFinancials() []int {
	return s.Financials
}

// SetActive sets the value of Active.
func (s *UpdateEntityReq) SetActive(val OptBool) {
	s.Active = val
}

// SetTicker sets the value of Ticker.
func (s *UpdateEntityReq) SetTicker(val OptString) {
	s.Ticker = val
}

// SetName sets the value of Name.
func (s *UpdateEntityReq) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *UpdateEntityReq) SetDescription(val OptString) {
	s.Description = val
}

// SetListDate sets the value of ListDate.
func (s *UpdateEntityReq) SetListDate(val OptDateTime) {
	s.ListDate = val
}

// SetOptions sets the value of Options.
func (s *UpdateEntityReq) SetOptions(val OptBool) {
	s.Options = val
}

// SetTradable sets the value of Tradable.
func (s *UpdateEntityReq) SetTradable(val OptBool) {
	s.Tradable = val
}

// SetExchanges sets the value of Exchanges.
func (s *UpdateEntityReq) SetExchanges(val []int) {
	s.Exchanges = val
}

// SetIntervals sets the value of Intervals.
func (s *UpdateEntityReq) SetIntervals(val []int) {
	s.Intervals = val
}

// SetDividends sets the value of Dividends.
func (s *UpdateEntityReq) SetDividends(val []int) {
	s.Dividends = val
}

// SetSplits sets the value of Splits.
func (s *UpdateEntityReq) SetSplits(val []int) {
	s.Splits = val
}

// SetFinancials sets the value of Financials.
func (s *UpdateEntityReq) SetFinancials(val []int) {
	s.Financials = val
}

type UpdateExchangeReq struct {
	Code   OptString `json:"code"`
	Name   OptString `json:"name"`
	Stocks []int     `json:"stocks"`
}

// GetCode returns the value of Code.
func (s *UpdateExchangeReq) GetCode() OptString {
	return s.Code
}

// GetName returns the value of Name.
func (s *UpdateExchangeReq) GetName() OptString {
	return s.Name
}

// GetStocks returns the value of Stocks.
func (s *UpdateExchangeReq) GetStocks() []int {
	return s.Stocks
}

// SetCode sets the value of Code.
func (s *UpdateExchangeReq) SetCode(val OptString) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *UpdateExchangeReq) SetName(val OptString) {
	s.Name = val
}

// SetStocks sets the value of Stocks.
func (s *UpdateExchangeReq) SetStocks(val []int) {
	s.Stocks = val
}

type UpdateFinancialReq struct {
	Stock []int `json:"stock"`
}

// GetStock returns the value of Stock.
func (s *UpdateFinancialReq) GetStock() []int {
	return s.Stock
}

// SetStock sets the value of Stock.
func (s *UpdateFinancialReq) SetStock(val []int) {
	s.Stock = val
}

type UpdateIntervalReq struct {
	Active       OptBool                      `json:"active"`
	Interval     OptUpdateIntervalReqInterval `json:"interval"`
	StockID      OptInt                       `json:"stock_id"`
	DataSourceID OptInt                       `json:"data_source_id"`
	DataSource   OptInt                       `json:"data_source"`
	Stock        OptInt                       `json:"stock"`
	Bars         []int                        `json:"bars"`
	Trades       []int                        `json:"trades"`
}

// GetActive returns the value of Active.
func (s *UpdateIntervalReq) GetActive() OptBool {
	return s.Active
}

// GetInterval returns the value of Interval.
func (s *UpdateIntervalReq) GetInterval() OptUpdateIntervalReqInterval {
	return s.Interval
}

// GetStockID returns the value of StockID.
func (s *UpdateIntervalReq) GetStockID() OptInt {
	return s.StockID
}

// GetDataSourceID returns the value of DataSourceID.
func (s *UpdateIntervalReq) GetDataSourceID() OptInt {
	return s.DataSourceID
}

// GetDataSource returns the value of DataSource.
func (s *UpdateIntervalReq) GetDataSource() OptInt {
	return s.DataSource
}

// GetStock returns the value of Stock.
func (s *UpdateIntervalReq) GetStock() OptInt {
	return s.Stock
}

// GetBars returns the value of Bars.
func (s *UpdateIntervalReq) GetBars() []int {
	return s.Bars
}

// GetTrades returns the value of Trades.
func (s *UpdateIntervalReq) GetTrades() []int {
	return s.Trades
}

// SetActive sets the value of Active.
func (s *UpdateIntervalReq) SetActive(val OptBool) {
	s.Active = val
}

// SetInterval sets the value of Interval.
func (s *UpdateIntervalReq) SetInterval(val OptUpdateIntervalReqInterval) {
	s.Interval = val
}

// SetStockID sets the value of StockID.
func (s *UpdateIntervalReq) SetStockID(val OptInt) {
	s.StockID = val
}

// SetDataSourceID sets the value of DataSourceID.
func (s *UpdateIntervalReq) SetDataSourceID(val OptInt) {
	s.DataSourceID = val
}

// SetDataSource sets the value of DataSource.
func (s *UpdateIntervalReq) SetDataSource(val OptInt) {
	s.DataSource = val
}

// SetStock sets the value of Stock.
func (s *UpdateIntervalReq) SetStock(val OptInt) {
	s.Stock = val
}

// SetBars sets the value of Bars.
func (s *UpdateIntervalReq) SetBars(val []int) {
	s.Bars = val
}

// SetTrades sets the value of Trades.
func (s *UpdateIntervalReq) SetTrades(val []int) {
	s.Trades = val
}

type UpdateIntervalReqInterval string

const (
	UpdateIntervalReqIntervalTrades  UpdateIntervalReqInterval = "trades"
	UpdateIntervalReqInterval1min    UpdateIntervalReqInterval = "1min"
	UpdateIntervalReqIntervalDaily   UpdateIntervalReqInterval = "daily"
	UpdateIntervalReqIntervalMonthly UpdateIntervalReqInterval = "monthly"
	UpdateIntervalReqIntervalYearly  UpdateIntervalReqInterval = "yearly"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateIntervalReqInterval) MarshalText() ([]byte, error) {
	switch s {
	case UpdateIntervalReqIntervalTrades:
		return []byte(s), nil
	case UpdateIntervalReqInterval1min:
		return []byte(s), nil
	case UpdateIntervalReqIntervalDaily:
		return []byte(s), nil
	case UpdateIntervalReqIntervalMonthly:
		return []byte(s), nil
	case UpdateIntervalReqIntervalYearly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateIntervalReqInterval) UnmarshalText(data []byte) error {
	switch UpdateIntervalReqInterval(data) {
	case UpdateIntervalReqIntervalTrades:
		*s = UpdateIntervalReqIntervalTrades
		return nil
	case UpdateIntervalReqInterval1min:
		*s = UpdateIntervalReqInterval1min
		return nil
	case UpdateIntervalReqIntervalDaily:
		*s = UpdateIntervalReqIntervalDaily
		return nil
	case UpdateIntervalReqIntervalMonthly:
		*s = UpdateIntervalReqIntervalMonthly
		return nil
	case UpdateIntervalReqIntervalYearly:
		*s = UpdateIntervalReqIntervalYearly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateMarketHoursReq struct {
	Date       OptDateTime `json:"date"`
	StartTime  OptDateTime `json:"start_time"`
	EndTime    OptDateTime `json:"end_time"`
	MarketInfo OptInt      `json:"market_info"`
}

// GetDate returns the value of Date.
func (s *UpdateMarketHoursReq) GetDate() OptDateTime {
	return s.Date
}

// GetStartTime returns the value of StartTime.
func (s *UpdateMarketHoursReq) GetStartTime() OptDateTime {
	return s.StartTime
}

// GetEndTime returns the value of EndTime.
func (s *UpdateMarketHoursReq) GetEndTime() OptDateTime {
	return s.EndTime
}

// GetMarketInfo returns the value of MarketInfo.
func (s *UpdateMarketHoursReq) GetMarketInfo() OptInt {
	return s.MarketInfo
}

// SetDate sets the value of Date.
func (s *UpdateMarketHoursReq) SetDate(val OptDateTime) {
	s.Date = val
}

// SetStartTime sets the value of StartTime.
func (s *UpdateMarketHoursReq) SetStartTime(val OptDateTime) {
	s.StartTime = val
}

// SetEndTime sets the value of EndTime.
func (s *UpdateMarketHoursReq) SetEndTime(val OptDateTime) {
	s.EndTime = val
}

// SetMarketInfo sets the value of MarketInfo.
func (s *UpdateMarketHoursReq) SetMarketInfo(val OptInt) {
	s.MarketInfo = val
}

type UpdateMarketInfoReq struct {
	HoursStart OptDateTime `json:"hours_start"`
	HoursEnd   OptDateTime `json:"hours_end"`
	Hours      []int       `json:"hours"`
}

// GetHoursStart returns the value of HoursStart.
func (s *UpdateMarketInfoReq) GetHoursStart() OptDateTime {
	return s.HoursStart
}

// GetHoursEnd returns the value of HoursEnd.
func (s *UpdateMarketInfoReq) GetHoursEnd() OptDateTime {
	return s.HoursEnd
}

// GetHours returns the value of Hours.
func (s *UpdateMarketInfoReq) GetHours() []int {
	return s.Hours
}

// SetHoursStart sets the value of HoursStart.
func (s *UpdateMarketInfoReq) SetHoursStart(val OptDateTime) {
	s.HoursStart = val
}

// SetHoursEnd sets the value of HoursEnd.
func (s *UpdateMarketInfoReq) SetHoursEnd(val OptDateTime) {
	s.HoursEnd = val
}

// SetHours sets the value of Hours.
func (s *UpdateMarketInfoReq) SetHours(val []int) {
	s.Hours = val
}

type UpdateSplitReq struct {
	ExecutionDate OptDateTime `json:"execution_date"`
	From          OptFloat64  `json:"from"`
	To            OptFloat64  `json:"to"`
	Stock         OptInt      `json:"stock"`
}

// GetExecutionDate returns the value of ExecutionDate.
func (s *UpdateSplitReq) GetExecutionDate() OptDateTime {
	return s.ExecutionDate
}

// GetFrom returns the value of From.
func (s *UpdateSplitReq) GetFrom() OptFloat64 {
	return s.From
}

// GetTo returns the value of To.
func (s *UpdateSplitReq) GetTo() OptFloat64 {
	return s.To
}

// GetStock returns the value of Stock.
func (s *UpdateSplitReq) GetStock() OptInt {
	return s.Stock
}

// SetExecutionDate sets the value of ExecutionDate.
func (s *UpdateSplitReq) SetExecutionDate(val OptDateTime) {
	s.ExecutionDate = val
}

// SetFrom sets the value of From.
func (s *UpdateSplitReq) SetFrom(val OptFloat64) {
	s.From = val
}

// SetTo sets the value of To.
func (s *UpdateSplitReq) SetTo(val OptFloat64) {
	s.To = val
}

// SetStock sets the value of Stock.
func (s *UpdateSplitReq) SetStock(val OptInt) {
	s.Stock = val
}

type UpdateTradeConditionReq struct {
	Condition OptString `json:"condition"`
	Record    []int     `json:"record"`
}

// GetCondition returns the value of Condition.
func (s *UpdateTradeConditionReq) GetCondition() OptString {
	return s.Condition
}

// GetRecord returns the value of Record.
func (s *UpdateTradeConditionReq) GetRecord() []int {
	return s.Record
}

// SetCondition sets the value of Condition.
func (s *UpdateTradeConditionReq) SetCondition(val OptString) {
	s.Condition = val
}

// SetRecord sets the value of Record.
func (s *UpdateTradeConditionReq) SetRecord(val []int) {
	s.Record = val
}

type UpdateTradeCorrectionReq struct {
	Correction OptString `json:"correction"`
	Record     []int     `json:"record"`
}

// GetCorrection returns the value of Correction.
func (s *UpdateTradeCorrectionReq) GetCorrection() OptString {
	return s.Correction
}

// GetRecord returns the value of Record.
func (s *UpdateTradeCorrectionReq) GetRecord() []int {
	return s.Record
}

// SetCorrection sets the value of Correction.
func (s *UpdateTradeCorrectionReq) SetCorrection(val OptString) {
	s.Correction = val
}

// SetRecord sets the value of Record.
func (s *UpdateTradeCorrectionReq) SetRecord(val []int) {
	s.Record = val
}

type UpdateTradeRecordReq struct {
	Price       OptFloat64  `json:"price"`
	Timestamp   OptDateTime `json:"timestamp"`
	Volume      OptInt32    `json:"volume"`
	TimeRangeID OptInt      `json:"time_range_id"`
	TimeRange   OptInt      `json:"time_range"`
	Conditions  []int       `json:"conditions"`
	Correction  []int       `json:"correction"`
	Exchange    []int       `json:"exchange"`
}

// GetPrice returns the value of Price.
func (s *UpdateTradeRecordReq) GetPrice() OptFloat64 {
	return s.Price
}

// GetTimestamp returns the value of Timestamp.
func (s *UpdateTradeRecordReq) GetTimestamp() OptDateTime {
	return s.Timestamp
}

// GetVolume returns the value of Volume.
func (s *UpdateTradeRecordReq) GetVolume() OptInt32 {
	return s.Volume
}

// GetTimeRangeID returns the value of TimeRangeID.
func (s *UpdateTradeRecordReq) GetTimeRangeID() OptInt {
	return s.TimeRangeID
}

// GetTimeRange returns the value of TimeRange.
func (s *UpdateTradeRecordReq) GetTimeRange() OptInt {
	return s.TimeRange
}

// GetConditions returns the value of Conditions.
func (s *UpdateTradeRecordReq) GetConditions() []int {
	return s.Conditions
}

// GetCorrection returns the value of Correction.
func (s *UpdateTradeRecordReq) GetCorrection() []int {
	return s.Correction
}

// GetExchange returns the value of Exchange.
func (s *UpdateTradeRecordReq) GetExchange() []int {
	return s.Exchange
}

// SetPrice sets the value of Price.
func (s *UpdateTradeRecordReq) SetPrice(val OptFloat64) {
	s.Price = val
}

// SetTimestamp sets the value of Timestamp.
func (s *UpdateTradeRecordReq) SetTimestamp(val OptDateTime) {
	s.Timestamp = val
}

// SetVolume sets the value of Volume.
func (s *UpdateTradeRecordReq) SetVolume(val OptInt32) {
	s.Volume = val
}

// SetTimeRangeID sets the value of TimeRangeID.
func (s *UpdateTradeRecordReq) SetTimeRangeID(val OptInt) {
	s.TimeRangeID = val
}

// SetTimeRange sets the value of TimeRange.
func (s *UpdateTradeRecordReq) SetTimeRange(val OptInt) {
	s.TimeRange = val
}

// SetConditions sets the value of Conditions.
func (s *UpdateTradeRecordReq) SetConditions(val []int) {
	s.Conditions = val
}

// SetCorrection sets the value of Correction.
func (s *UpdateTradeRecordReq) SetCorrection(val []int) {
	s.Correction = val
}

// SetExchange sets the value of Exchange.
func (s *UpdateTradeRecordReq) SetExchange(val []int) {
	s.Exchange = val
}

type UpdateTradeTimeRangeReq struct {
	Start      OptDateTime `json:"start"`
	End        OptDateTime `json:"end"`
	IntervalID OptInt      `json:"interval_id"`
	Interval   OptInt      `json:"interval"`
	Records    []int       `json:"records"`
}

// GetStart returns the value of Start.
func (s *UpdateTradeTimeRangeReq) GetStart() OptDateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *UpdateTradeTimeRangeReq) GetEnd() OptDateTime {
	return s.End
}

// GetIntervalID returns the value of IntervalID.
func (s *UpdateTradeTimeRangeReq) GetIntervalID() OptInt {
	return s.IntervalID
}

// GetInterval returns the value of Interval.
func (s *UpdateTradeTimeRangeReq) GetInterval() OptInt {
	return s.Interval
}

// GetRecords returns the value of Records.
func (s *UpdateTradeTimeRangeReq) GetRecords() []int {
	return s.Records
}

// SetStart sets the value of Start.
func (s *UpdateTradeTimeRangeReq) SetStart(val OptDateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *UpdateTradeTimeRangeReq) SetEnd(val OptDateTime) {
	s.End = val
}

// SetIntervalID sets the value of IntervalID.
func (s *UpdateTradeTimeRangeReq) SetIntervalID(val OptInt) {
	s.IntervalID = val
}

// SetInterval sets the value of Interval.
func (s *UpdateTradeTimeRangeReq) SetInterval(val OptInt) {
	s.Interval = val
}

// SetRecords sets the value of Records.
func (s *UpdateTradeTimeRangeReq) SetRecords(val []int) {
	s.Records = val
}
