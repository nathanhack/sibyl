// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/markethours"
	"github.com/nathanhack/sibyl/ent/marketinfo"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// MarketHoursUpdate is the builder for updating MarketHours entities.
type MarketHoursUpdate struct {
	config
	hooks    []Hook
	mutation *MarketHoursMutation
}

// Where appends a list predicates to the MarketHoursUpdate builder.
func (mhu *MarketHoursUpdate) Where(ps ...predicate.MarketHours) *MarketHoursUpdate {
	mhu.mutation.Where(ps...)
	return mhu
}

// SetDate sets the "date" field.
func (mhu *MarketHoursUpdate) SetDate(t time.Time) *MarketHoursUpdate {
	mhu.mutation.SetDate(t)
	return mhu
}

// SetStartTime sets the "start_time" field.
func (mhu *MarketHoursUpdate) SetStartTime(t time.Time) *MarketHoursUpdate {
	mhu.mutation.SetStartTime(t)
	return mhu
}

// SetEndTime sets the "end_time" field.
func (mhu *MarketHoursUpdate) SetEndTime(t time.Time) *MarketHoursUpdate {
	mhu.mutation.SetEndTime(t)
	return mhu
}

// SetMarketInfoID sets the "market_info" edge to the MarketInfo entity by ID.
func (mhu *MarketHoursUpdate) SetMarketInfoID(id int) *MarketHoursUpdate {
	mhu.mutation.SetMarketInfoID(id)
	return mhu
}

// SetNillableMarketInfoID sets the "market_info" edge to the MarketInfo entity by ID if the given value is not nil.
func (mhu *MarketHoursUpdate) SetNillableMarketInfoID(id *int) *MarketHoursUpdate {
	if id != nil {
		mhu = mhu.SetMarketInfoID(*id)
	}
	return mhu
}

// SetMarketInfo sets the "market_info" edge to the MarketInfo entity.
func (mhu *MarketHoursUpdate) SetMarketInfo(m *MarketInfo) *MarketHoursUpdate {
	return mhu.SetMarketInfoID(m.ID)
}

// Mutation returns the MarketHoursMutation object of the builder.
func (mhu *MarketHoursUpdate) Mutation() *MarketHoursMutation {
	return mhu.mutation
}

// ClearMarketInfo clears the "market_info" edge to the MarketInfo entity.
func (mhu *MarketHoursUpdate) ClearMarketInfo() *MarketHoursUpdate {
	mhu.mutation.ClearMarketInfo()
	return mhu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mhu *MarketHoursUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MarketHoursMutation](ctx, mhu.sqlSave, mhu.mutation, mhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mhu *MarketHoursUpdate) SaveX(ctx context.Context) int {
	affected, err := mhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mhu *MarketHoursUpdate) Exec(ctx context.Context) error {
	_, err := mhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhu *MarketHoursUpdate) ExecX(ctx context.Context) {
	if err := mhu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mhu *MarketHoursUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   markethours.Table,
			Columns: markethours.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: markethours.FieldID,
			},
		},
	}
	if ps := mhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mhu.mutation.Date(); ok {
		_spec.SetField(markethours.FieldDate, field.TypeTime, value)
	}
	if value, ok := mhu.mutation.StartTime(); ok {
		_spec.SetField(markethours.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := mhu.mutation.EndTime(); ok {
		_spec.SetField(markethours.FieldEndTime, field.TypeTime, value)
	}
	if mhu.mutation.MarketInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   markethours.MarketInfoTable,
			Columns: []string{markethours.MarketInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: marketinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhu.mutation.MarketInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   markethours.MarketInfoTable,
			Columns: []string{markethours.MarketInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: marketinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{markethours.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mhu.mutation.done = true
	return n, nil
}

// MarketHoursUpdateOne is the builder for updating a single MarketHours entity.
type MarketHoursUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MarketHoursMutation
}

// SetDate sets the "date" field.
func (mhuo *MarketHoursUpdateOne) SetDate(t time.Time) *MarketHoursUpdateOne {
	mhuo.mutation.SetDate(t)
	return mhuo
}

// SetStartTime sets the "start_time" field.
func (mhuo *MarketHoursUpdateOne) SetStartTime(t time.Time) *MarketHoursUpdateOne {
	mhuo.mutation.SetStartTime(t)
	return mhuo
}

// SetEndTime sets the "end_time" field.
func (mhuo *MarketHoursUpdateOne) SetEndTime(t time.Time) *MarketHoursUpdateOne {
	mhuo.mutation.SetEndTime(t)
	return mhuo
}

// SetMarketInfoID sets the "market_info" edge to the MarketInfo entity by ID.
func (mhuo *MarketHoursUpdateOne) SetMarketInfoID(id int) *MarketHoursUpdateOne {
	mhuo.mutation.SetMarketInfoID(id)
	return mhuo
}

// SetNillableMarketInfoID sets the "market_info" edge to the MarketInfo entity by ID if the given value is not nil.
func (mhuo *MarketHoursUpdateOne) SetNillableMarketInfoID(id *int) *MarketHoursUpdateOne {
	if id != nil {
		mhuo = mhuo.SetMarketInfoID(*id)
	}
	return mhuo
}

// SetMarketInfo sets the "market_info" edge to the MarketInfo entity.
func (mhuo *MarketHoursUpdateOne) SetMarketInfo(m *MarketInfo) *MarketHoursUpdateOne {
	return mhuo.SetMarketInfoID(m.ID)
}

// Mutation returns the MarketHoursMutation object of the builder.
func (mhuo *MarketHoursUpdateOne) Mutation() *MarketHoursMutation {
	return mhuo.mutation
}

// ClearMarketInfo clears the "market_info" edge to the MarketInfo entity.
func (mhuo *MarketHoursUpdateOne) ClearMarketInfo() *MarketHoursUpdateOne {
	mhuo.mutation.ClearMarketInfo()
	return mhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mhuo *MarketHoursUpdateOne) Select(field string, fields ...string) *MarketHoursUpdateOne {
	mhuo.fields = append([]string{field}, fields...)
	return mhuo
}

// Save executes the query and returns the updated MarketHours entity.
func (mhuo *MarketHoursUpdateOne) Save(ctx context.Context) (*MarketHours, error) {
	return withHooks[*MarketHours, MarketHoursMutation](ctx, mhuo.sqlSave, mhuo.mutation, mhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mhuo *MarketHoursUpdateOne) SaveX(ctx context.Context) *MarketHours {
	node, err := mhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mhuo *MarketHoursUpdateOne) Exec(ctx context.Context) error {
	_, err := mhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhuo *MarketHoursUpdateOne) ExecX(ctx context.Context) {
	if err := mhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mhuo *MarketHoursUpdateOne) sqlSave(ctx context.Context) (_node *MarketHours, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   markethours.Table,
			Columns: markethours.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: markethours.FieldID,
			},
		},
	}
	id, ok := mhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MarketHours.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, markethours.FieldID)
		for _, f := range fields {
			if !markethours.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != markethours.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mhuo.mutation.Date(); ok {
		_spec.SetField(markethours.FieldDate, field.TypeTime, value)
	}
	if value, ok := mhuo.mutation.StartTime(); ok {
		_spec.SetField(markethours.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := mhuo.mutation.EndTime(); ok {
		_spec.SetField(markethours.FieldEndTime, field.TypeTime, value)
	}
	if mhuo.mutation.MarketInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   markethours.MarketInfoTable,
			Columns: []string{markethours.MarketInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: marketinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mhuo.mutation.MarketInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   markethours.MarketInfoTable,
			Columns: []string{markethours.MarketInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: marketinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MarketHours{config: mhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{markethours.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mhuo.mutation.done = true
	return _node, nil
}
