// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/bartimerange"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// BarTimeRangeDelete is the builder for deleting a BarTimeRange entity.
type BarTimeRangeDelete struct {
	config
	hooks    []Hook
	mutation *BarTimeRangeMutation
}

// Where appends a list predicates to the BarTimeRangeDelete builder.
func (btrd *BarTimeRangeDelete) Where(ps ...predicate.BarTimeRange) *BarTimeRangeDelete {
	btrd.mutation.Where(ps...)
	return btrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (btrd *BarTimeRangeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, btrd.sqlExec, btrd.mutation, btrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (btrd *BarTimeRangeDelete) ExecX(ctx context.Context) int {
	n, err := btrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (btrd *BarTimeRangeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(bartimerange.Table, sqlgraph.NewFieldSpec(bartimerange.FieldID, field.TypeInt))
	if ps := btrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, btrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	btrd.mutation.done = true
	return affected, err
}

// BarTimeRangeDeleteOne is the builder for deleting a single BarTimeRange entity.
type BarTimeRangeDeleteOne struct {
	btrd *BarTimeRangeDelete
}

// Where appends a list predicates to the BarTimeRangeDelete builder.
func (btrdo *BarTimeRangeDeleteOne) Where(ps ...predicate.BarTimeRange) *BarTimeRangeDeleteOne {
	btrdo.btrd.mutation.Where(ps...)
	return btrdo
}

// Exec executes the deletion query.
func (btrdo *BarTimeRangeDeleteOne) Exec(ctx context.Context) error {
	n, err := btrdo.btrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{bartimerange.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (btrdo *BarTimeRangeDeleteOne) ExecX(ctx context.Context) {
	if err := btrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
