// Code generated by ent, DO NOT EDIT.

package tradecorrection

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldLTE(FieldID, id))
}

// Correction applies equality check predicate on the "correction" field. It's identical to CorrectionEQ.
func Correction(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldEQ(FieldCorrection, v))
}

// CorrectionEQ applies the EQ predicate on the "correction" field.
func CorrectionEQ(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldEQ(FieldCorrection, v))
}

// CorrectionNEQ applies the NEQ predicate on the "correction" field.
func CorrectionNEQ(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldNEQ(FieldCorrection, v))
}

// CorrectionIn applies the In predicate on the "correction" field.
func CorrectionIn(vs ...string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldIn(FieldCorrection, vs...))
}

// CorrectionNotIn applies the NotIn predicate on the "correction" field.
func CorrectionNotIn(vs ...string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldNotIn(FieldCorrection, vs...))
}

// CorrectionGT applies the GT predicate on the "correction" field.
func CorrectionGT(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldGT(FieldCorrection, v))
}

// CorrectionGTE applies the GTE predicate on the "correction" field.
func CorrectionGTE(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldGTE(FieldCorrection, v))
}

// CorrectionLT applies the LT predicate on the "correction" field.
func CorrectionLT(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldLT(FieldCorrection, v))
}

// CorrectionLTE applies the LTE predicate on the "correction" field.
func CorrectionLTE(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldLTE(FieldCorrection, v))
}

// CorrectionContains applies the Contains predicate on the "correction" field.
func CorrectionContains(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldContains(FieldCorrection, v))
}

// CorrectionHasPrefix applies the HasPrefix predicate on the "correction" field.
func CorrectionHasPrefix(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldHasPrefix(FieldCorrection, v))
}

// CorrectionHasSuffix applies the HasSuffix predicate on the "correction" field.
func CorrectionHasSuffix(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldHasSuffix(FieldCorrection, v))
}

// CorrectionEqualFold applies the EqualFold predicate on the "correction" field.
func CorrectionEqualFold(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldEqualFold(FieldCorrection, v))
}

// CorrectionContainsFold applies the ContainsFold predicate on the "correction" field.
func CorrectionContainsFold(v string) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.FieldContainsFold(FieldCorrection, v))
}

// HasRecord applies the HasEdge predicate on the "record" edge.
func HasRecord() predicate.TradeCorrection {
	return predicate.TradeCorrection(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RecordTable, RecordPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecordWith applies the HasEdge predicate on the "record" edge with a given conditions (other predicates).
func HasRecordWith(preds ...predicate.TradeRecord) predicate.TradeCorrection {
	return predicate.TradeCorrection(func(s *sql.Selector) {
		step := newRecordStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TradeCorrection) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TradeCorrection) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TradeCorrection) predicate.TradeCorrection {
	return predicate.TradeCorrection(sql.NotPredicates(p))
}
