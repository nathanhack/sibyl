// Code generated by ent, DO NOT EDIT.

package dividend

import (
	"fmt"
)

const (
	// Label holds the string label denoting the dividend type in the database.
	Label = "dividend"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCashAmount holds the string denoting the cash_amount field in the database.
	FieldCashAmount = "cash_amount"
	// FieldDeclarationDate holds the string denoting the declaration_date field in the database.
	FieldDeclarationDate = "declaration_date"
	// FieldDividendType holds the string denoting the dividend_type field in the database.
	FieldDividendType = "dividend_type"
	// FieldExDividendDate holds the string denoting the ex_dividend_date field in the database.
	FieldExDividendDate = "ex_dividend_date"
	// FieldFrequency holds the string denoting the frequency field in the database.
	FieldFrequency = "frequency"
	// FieldRecordDate holds the string denoting the record_date field in the database.
	FieldRecordDate = "record_date"
	// FieldPayDate holds the string denoting the pay_date field in the database.
	FieldPayDate = "pay_date"
	// EdgeStock holds the string denoting the stock edge name in mutations.
	EdgeStock = "stock"
	// Table holds the table name of the dividend in the database.
	Table = "dividends"
	// StockTable is the table that holds the stock relation/edge. The primary key declared below.
	StockTable = "entity_dividends"
	// StockInverseTable is the table name for the Entity entity.
	// It exists in this package in order to avoid circular dependency with the "entity" package.
	StockInverseTable = "entities"
)

// Columns holds all SQL columns for dividend fields.
var Columns = []string{
	FieldID,
	FieldCashAmount,
	FieldDeclarationDate,
	FieldDividendType,
	FieldExDividendDate,
	FieldFrequency,
	FieldRecordDate,
	FieldPayDate,
}

var (
	// StockPrimaryKey and StockColumn2 are the table columns denoting the
	// primary key for the stock relation (M2M).
	StockPrimaryKey = []string{"entity_id", "dividend_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// DividendType defines the type for the "dividend_type" enum field.
type DividendType string

// DividendType values.
const (
	DividendTypeCD DividendType = "CD"
	DividendTypeSC DividendType = "SC"
	DividendTypeLT DividendType = "LT"
	DividendTypeST DividendType = "ST"
)

func (dt DividendType) String() string {
	return string(dt)
}

// DividendTypeValidator is a validator for the "dividend_type" field enum values. It is called by the builders before save.
func DividendTypeValidator(dt DividendType) error {
	switch dt {
	case DividendTypeCD, DividendTypeSC, DividendTypeLT, DividendTypeST:
		return nil
	default:
		return fmt.Errorf("dividend: invalid enum value for dividend_type field: %q", dt)
	}
}
