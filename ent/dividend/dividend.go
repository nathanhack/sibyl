// Code generated by ent, DO NOT EDIT.

package dividend

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the dividend type in the database.
	Label = "dividend"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRate holds the string denoting the rate field in the database.
	FieldRate = "rate"
	// FieldDeclarationDate holds the string denoting the declaration_date field in the database.
	FieldDeclarationDate = "declaration_date"
	// FieldExDividendDate holds the string denoting the ex_dividend_date field in the database.
	FieldExDividendDate = "ex_dividend_date"
	// FieldRecordDate holds the string denoting the record_date field in the database.
	FieldRecordDate = "record_date"
	// FieldPayDate holds the string denoting the pay_date field in the database.
	FieldPayDate = "pay_date"
	// EdgeStock holds the string denoting the stock edge name in mutations.
	EdgeStock = "stock"
	// Table holds the table name of the dividend in the database.
	Table = "dividends"
	// StockTable is the table that holds the stock relation/edge. The primary key declared below.
	StockTable = "entity_dividends"
	// StockInverseTable is the table name for the Entity entity.
	// It exists in this package in order to avoid circular dependency with the "entity" package.
	StockInverseTable = "entities"
)

// Columns holds all SQL columns for dividend fields.
var Columns = []string{
	FieldID,
	FieldRate,
	FieldDeclarationDate,
	FieldExDividendDate,
	FieldRecordDate,
	FieldPayDate,
}

var (
	// StockPrimaryKey and StockColumn2 are the table columns denoting the
	// primary key for the stock relation (M2M).
	StockPrimaryKey = []string{"entity_id", "dividend_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Dividend queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRate orders the results by the rate field.
func ByRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRate, opts...).ToFunc()
}

// ByDeclarationDate orders the results by the declaration_date field.
func ByDeclarationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeclarationDate, opts...).ToFunc()
}

// ByExDividendDate orders the results by the ex_dividend_date field.
func ByExDividendDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExDividendDate, opts...).ToFunc()
}

// ByRecordDate orders the results by the record_date field.
func ByRecordDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecordDate, opts...).ToFunc()
}

// ByPayDate orders the results by the pay_date field.
func ByPayDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayDate, opts...).ToFunc()
}

// ByStockCount orders the results by stock count.
func ByStockCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStockStep(), opts...)
	}
}

// ByStock orders the results by stock terms.
func ByStock(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStockStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, StockTable, StockPrimaryKey...),
	)
}
