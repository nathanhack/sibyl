// Code generated by ent, DO NOT EDIT.

package dividend

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Dividend {
	return predicate.Dividend(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Dividend {
	return predicate.Dividend(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Dividend {
	return predicate.Dividend(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Dividend {
	return predicate.Dividend(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Dividend {
	return predicate.Dividend(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Dividend {
	return predicate.Dividend(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Dividend {
	return predicate.Dividend(sql.FieldLTE(FieldID, id))
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v float64) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldRate, v))
}

// DeclarationDate applies equality check predicate on the "declaration_date" field. It's identical to DeclarationDateEQ.
func DeclarationDate(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldDeclarationDate, v))
}

// ExDividendDate applies equality check predicate on the "ex_dividend_date" field. It's identical to ExDividendDateEQ.
func ExDividendDate(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldExDividendDate, v))
}

// RecordDate applies equality check predicate on the "record_date" field. It's identical to RecordDateEQ.
func RecordDate(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldRecordDate, v))
}

// PayDate applies equality check predicate on the "pay_date" field. It's identical to PayDateEQ.
func PayDate(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldPayDate, v))
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v float64) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldRate, v))
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v float64) predicate.Dividend {
	return predicate.Dividend(sql.FieldNEQ(FieldRate, v))
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...float64) predicate.Dividend {
	return predicate.Dividend(sql.FieldIn(FieldRate, vs...))
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...float64) predicate.Dividend {
	return predicate.Dividend(sql.FieldNotIn(FieldRate, vs...))
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v float64) predicate.Dividend {
	return predicate.Dividend(sql.FieldGT(FieldRate, v))
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v float64) predicate.Dividend {
	return predicate.Dividend(sql.FieldGTE(FieldRate, v))
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v float64) predicate.Dividend {
	return predicate.Dividend(sql.FieldLT(FieldRate, v))
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v float64) predicate.Dividend {
	return predicate.Dividend(sql.FieldLTE(FieldRate, v))
}

// DeclarationDateEQ applies the EQ predicate on the "declaration_date" field.
func DeclarationDateEQ(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldDeclarationDate, v))
}

// DeclarationDateNEQ applies the NEQ predicate on the "declaration_date" field.
func DeclarationDateNEQ(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldNEQ(FieldDeclarationDate, v))
}

// DeclarationDateIn applies the In predicate on the "declaration_date" field.
func DeclarationDateIn(vs ...time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldIn(FieldDeclarationDate, vs...))
}

// DeclarationDateNotIn applies the NotIn predicate on the "declaration_date" field.
func DeclarationDateNotIn(vs ...time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldNotIn(FieldDeclarationDate, vs...))
}

// DeclarationDateGT applies the GT predicate on the "declaration_date" field.
func DeclarationDateGT(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldGT(FieldDeclarationDate, v))
}

// DeclarationDateGTE applies the GTE predicate on the "declaration_date" field.
func DeclarationDateGTE(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldGTE(FieldDeclarationDate, v))
}

// DeclarationDateLT applies the LT predicate on the "declaration_date" field.
func DeclarationDateLT(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldLT(FieldDeclarationDate, v))
}

// DeclarationDateLTE applies the LTE predicate on the "declaration_date" field.
func DeclarationDateLTE(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldLTE(FieldDeclarationDate, v))
}

// ExDividendDateEQ applies the EQ predicate on the "ex_dividend_date" field.
func ExDividendDateEQ(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldExDividendDate, v))
}

// ExDividendDateNEQ applies the NEQ predicate on the "ex_dividend_date" field.
func ExDividendDateNEQ(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldNEQ(FieldExDividendDate, v))
}

// ExDividendDateIn applies the In predicate on the "ex_dividend_date" field.
func ExDividendDateIn(vs ...time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldIn(FieldExDividendDate, vs...))
}

// ExDividendDateNotIn applies the NotIn predicate on the "ex_dividend_date" field.
func ExDividendDateNotIn(vs ...time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldNotIn(FieldExDividendDate, vs...))
}

// ExDividendDateGT applies the GT predicate on the "ex_dividend_date" field.
func ExDividendDateGT(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldGT(FieldExDividendDate, v))
}

// ExDividendDateGTE applies the GTE predicate on the "ex_dividend_date" field.
func ExDividendDateGTE(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldGTE(FieldExDividendDate, v))
}

// ExDividendDateLT applies the LT predicate on the "ex_dividend_date" field.
func ExDividendDateLT(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldLT(FieldExDividendDate, v))
}

// ExDividendDateLTE applies the LTE predicate on the "ex_dividend_date" field.
func ExDividendDateLTE(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldLTE(FieldExDividendDate, v))
}

// RecordDateEQ applies the EQ predicate on the "record_date" field.
func RecordDateEQ(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldRecordDate, v))
}

// RecordDateNEQ applies the NEQ predicate on the "record_date" field.
func RecordDateNEQ(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldNEQ(FieldRecordDate, v))
}

// RecordDateIn applies the In predicate on the "record_date" field.
func RecordDateIn(vs ...time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldIn(FieldRecordDate, vs...))
}

// RecordDateNotIn applies the NotIn predicate on the "record_date" field.
func RecordDateNotIn(vs ...time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldNotIn(FieldRecordDate, vs...))
}

// RecordDateGT applies the GT predicate on the "record_date" field.
func RecordDateGT(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldGT(FieldRecordDate, v))
}

// RecordDateGTE applies the GTE predicate on the "record_date" field.
func RecordDateGTE(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldGTE(FieldRecordDate, v))
}

// RecordDateLT applies the LT predicate on the "record_date" field.
func RecordDateLT(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldLT(FieldRecordDate, v))
}

// RecordDateLTE applies the LTE predicate on the "record_date" field.
func RecordDateLTE(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldLTE(FieldRecordDate, v))
}

// PayDateEQ applies the EQ predicate on the "pay_date" field.
func PayDateEQ(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldEQ(FieldPayDate, v))
}

// PayDateNEQ applies the NEQ predicate on the "pay_date" field.
func PayDateNEQ(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldNEQ(FieldPayDate, v))
}

// PayDateIn applies the In predicate on the "pay_date" field.
func PayDateIn(vs ...time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldIn(FieldPayDate, vs...))
}

// PayDateNotIn applies the NotIn predicate on the "pay_date" field.
func PayDateNotIn(vs ...time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldNotIn(FieldPayDate, vs...))
}

// PayDateGT applies the GT predicate on the "pay_date" field.
func PayDateGT(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldGT(FieldPayDate, v))
}

// PayDateGTE applies the GTE predicate on the "pay_date" field.
func PayDateGTE(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldGTE(FieldPayDate, v))
}

// PayDateLT applies the LT predicate on the "pay_date" field.
func PayDateLT(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldLT(FieldPayDate, v))
}

// PayDateLTE applies the LTE predicate on the "pay_date" field.
func PayDateLTE(v time.Time) predicate.Dividend {
	return predicate.Dividend(sql.FieldLTE(FieldPayDate, v))
}

// HasStock applies the HasEdge predicate on the "stock" edge.
func HasStock() predicate.Dividend {
	return predicate.Dividend(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, StockTable, StockPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStockWith applies the HasEdge predicate on the "stock" edge with a given conditions (other predicates).
func HasStockWith(preds ...predicate.Entity) predicate.Dividend {
	return predicate.Dividend(func(s *sql.Selector) {
		step := newStockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dividend) predicate.Dividend {
	return predicate.Dividend(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dividend) predicate.Dividend {
	return predicate.Dividend(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dividend) predicate.Dividend {
	return predicate.Dividend(sql.NotPredicates(p))
}
