// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/bartimerange"
	"github.com/nathanhack/sibyl/ent/datasource"
	"github.com/nathanhack/sibyl/ent/entity"
	"github.com/nathanhack/sibyl/ent/interval"
	"github.com/nathanhack/sibyl/ent/predicate"
	"github.com/nathanhack/sibyl/ent/tradetimerange"
)

// IntervalUpdate is the builder for updating Interval entities.
type IntervalUpdate struct {
	config
	hooks    []Hook
	mutation *IntervalMutation
}

// Where appends a list predicates to the IntervalUpdate builder.
func (iu *IntervalUpdate) Where(ps ...predicate.Interval) *IntervalUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetActive sets the "active" field.
func (iu *IntervalUpdate) SetActive(b bool) *IntervalUpdate {
	iu.mutation.SetActive(b)
	return iu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (iu *IntervalUpdate) SetNillableActive(b *bool) *IntervalUpdate {
	if b != nil {
		iu.SetActive(*b)
	}
	return iu
}

// SetInterval sets the "interval" field.
func (iu *IntervalUpdate) SetInterval(i interval.Interval) *IntervalUpdate {
	iu.mutation.SetInterval(i)
	return iu
}

// SetStockID sets the "stock_id" field.
func (iu *IntervalUpdate) SetStockID(i int) *IntervalUpdate {
	iu.mutation.SetStockID(i)
	return iu
}

// SetDataSourceID sets the "data_source_id" field.
func (iu *IntervalUpdate) SetDataSourceID(i int) *IntervalUpdate {
	iu.mutation.SetDataSourceID(i)
	return iu
}

// SetDataSource sets the "data_source" edge to the DataSource entity.
func (iu *IntervalUpdate) SetDataSource(d *DataSource) *IntervalUpdate {
	return iu.SetDataSourceID(d.ID)
}

// SetStock sets the "stock" edge to the Entity entity.
func (iu *IntervalUpdate) SetStock(e *Entity) *IntervalUpdate {
	return iu.SetStockID(e.ID)
}

// AddBarIDs adds the "bars" edge to the BarTimeRange entity by IDs.
func (iu *IntervalUpdate) AddBarIDs(ids ...int) *IntervalUpdate {
	iu.mutation.AddBarIDs(ids...)
	return iu
}

// AddBars adds the "bars" edges to the BarTimeRange entity.
func (iu *IntervalUpdate) AddBars(b ...*BarTimeRange) *IntervalUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.AddBarIDs(ids...)
}

// AddTradeIDs adds the "trades" edge to the TradeTimeRange entity by IDs.
func (iu *IntervalUpdate) AddTradeIDs(ids ...int) *IntervalUpdate {
	iu.mutation.AddTradeIDs(ids...)
	return iu
}

// AddTrades adds the "trades" edges to the TradeTimeRange entity.
func (iu *IntervalUpdate) AddTrades(t ...*TradeTimeRange) *IntervalUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.AddTradeIDs(ids...)
}

// Mutation returns the IntervalMutation object of the builder.
func (iu *IntervalUpdate) Mutation() *IntervalMutation {
	return iu.mutation
}

// ClearDataSource clears the "data_source" edge to the DataSource entity.
func (iu *IntervalUpdate) ClearDataSource() *IntervalUpdate {
	iu.mutation.ClearDataSource()
	return iu
}

// ClearStock clears the "stock" edge to the Entity entity.
func (iu *IntervalUpdate) ClearStock() *IntervalUpdate {
	iu.mutation.ClearStock()
	return iu
}

// ClearBars clears all "bars" edges to the BarTimeRange entity.
func (iu *IntervalUpdate) ClearBars() *IntervalUpdate {
	iu.mutation.ClearBars()
	return iu
}

// RemoveBarIDs removes the "bars" edge to BarTimeRange entities by IDs.
func (iu *IntervalUpdate) RemoveBarIDs(ids ...int) *IntervalUpdate {
	iu.mutation.RemoveBarIDs(ids...)
	return iu
}

// RemoveBars removes "bars" edges to BarTimeRange entities.
func (iu *IntervalUpdate) RemoveBars(b ...*BarTimeRange) *IntervalUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.RemoveBarIDs(ids...)
}

// ClearTrades clears all "trades" edges to the TradeTimeRange entity.
func (iu *IntervalUpdate) ClearTrades() *IntervalUpdate {
	iu.mutation.ClearTrades()
	return iu
}

// RemoveTradeIDs removes the "trades" edge to TradeTimeRange entities by IDs.
func (iu *IntervalUpdate) RemoveTradeIDs(ids ...int) *IntervalUpdate {
	iu.mutation.RemoveTradeIDs(ids...)
	return iu
}

// RemoveTrades removes "trades" edges to TradeTimeRange entities.
func (iu *IntervalUpdate) RemoveTrades(t ...*TradeTimeRange) *IntervalUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.RemoveTradeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IntervalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, IntervalMutation](ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IntervalUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IntervalUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IntervalUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IntervalUpdate) check() error {
	if v, ok := iu.mutation.Interval(); ok {
		if err := interval.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "Interval.interval": %w`, err)}
		}
	}
	if _, ok := iu.mutation.DataSourceID(); iu.mutation.DataSourceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Interval.data_source"`)
	}
	if _, ok := iu.mutation.StockID(); iu.mutation.StockCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Interval.stock"`)
	}
	return nil
}

func (iu *IntervalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   interval.Table,
			Columns: interval.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: interval.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Active(); ok {
		_spec.SetField(interval.FieldActive, field.TypeBool, value)
	}
	if value, ok := iu.mutation.Interval(); ok {
		_spec.SetField(interval.FieldInterval, field.TypeEnum, value)
	}
	if iu.mutation.DataSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interval.DataSourceTable,
			Columns: []string{interval.DataSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: datasource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.DataSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interval.DataSourceTable,
			Columns: []string{interval.DataSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: datasource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interval.StockTable,
			Columns: []string{interval.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interval.StockTable,
			Columns: []string{interval.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.BarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.BarsTable,
			Columns: []string{interval.BarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bartimerange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedBarsIDs(); len(nodes) > 0 && !iu.mutation.BarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.BarsTable,
			Columns: []string{interval.BarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bartimerange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.BarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.BarsTable,
			Columns: []string{interval.BarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bartimerange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.TradesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.TradesTable,
			Columns: []string{interval.TradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradetimerange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedTradesIDs(); len(nodes) > 0 && !iu.mutation.TradesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.TradesTable,
			Columns: []string{interval.TradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradetimerange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TradesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.TradesTable,
			Columns: []string{interval.TradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradetimerange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interval.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IntervalUpdateOne is the builder for updating a single Interval entity.
type IntervalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IntervalMutation
}

// SetActive sets the "active" field.
func (iuo *IntervalUpdateOne) SetActive(b bool) *IntervalUpdateOne {
	iuo.mutation.SetActive(b)
	return iuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (iuo *IntervalUpdateOne) SetNillableActive(b *bool) *IntervalUpdateOne {
	if b != nil {
		iuo.SetActive(*b)
	}
	return iuo
}

// SetInterval sets the "interval" field.
func (iuo *IntervalUpdateOne) SetInterval(i interval.Interval) *IntervalUpdateOne {
	iuo.mutation.SetInterval(i)
	return iuo
}

// SetStockID sets the "stock_id" field.
func (iuo *IntervalUpdateOne) SetStockID(i int) *IntervalUpdateOne {
	iuo.mutation.SetStockID(i)
	return iuo
}

// SetDataSourceID sets the "data_source_id" field.
func (iuo *IntervalUpdateOne) SetDataSourceID(i int) *IntervalUpdateOne {
	iuo.mutation.SetDataSourceID(i)
	return iuo
}

// SetDataSource sets the "data_source" edge to the DataSource entity.
func (iuo *IntervalUpdateOne) SetDataSource(d *DataSource) *IntervalUpdateOne {
	return iuo.SetDataSourceID(d.ID)
}

// SetStock sets the "stock" edge to the Entity entity.
func (iuo *IntervalUpdateOne) SetStock(e *Entity) *IntervalUpdateOne {
	return iuo.SetStockID(e.ID)
}

// AddBarIDs adds the "bars" edge to the BarTimeRange entity by IDs.
func (iuo *IntervalUpdateOne) AddBarIDs(ids ...int) *IntervalUpdateOne {
	iuo.mutation.AddBarIDs(ids...)
	return iuo
}

// AddBars adds the "bars" edges to the BarTimeRange entity.
func (iuo *IntervalUpdateOne) AddBars(b ...*BarTimeRange) *IntervalUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.AddBarIDs(ids...)
}

// AddTradeIDs adds the "trades" edge to the TradeTimeRange entity by IDs.
func (iuo *IntervalUpdateOne) AddTradeIDs(ids ...int) *IntervalUpdateOne {
	iuo.mutation.AddTradeIDs(ids...)
	return iuo
}

// AddTrades adds the "trades" edges to the TradeTimeRange entity.
func (iuo *IntervalUpdateOne) AddTrades(t ...*TradeTimeRange) *IntervalUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.AddTradeIDs(ids...)
}

// Mutation returns the IntervalMutation object of the builder.
func (iuo *IntervalUpdateOne) Mutation() *IntervalMutation {
	return iuo.mutation
}

// ClearDataSource clears the "data_source" edge to the DataSource entity.
func (iuo *IntervalUpdateOne) ClearDataSource() *IntervalUpdateOne {
	iuo.mutation.ClearDataSource()
	return iuo
}

// ClearStock clears the "stock" edge to the Entity entity.
func (iuo *IntervalUpdateOne) ClearStock() *IntervalUpdateOne {
	iuo.mutation.ClearStock()
	return iuo
}

// ClearBars clears all "bars" edges to the BarTimeRange entity.
func (iuo *IntervalUpdateOne) ClearBars() *IntervalUpdateOne {
	iuo.mutation.ClearBars()
	return iuo
}

// RemoveBarIDs removes the "bars" edge to BarTimeRange entities by IDs.
func (iuo *IntervalUpdateOne) RemoveBarIDs(ids ...int) *IntervalUpdateOne {
	iuo.mutation.RemoveBarIDs(ids...)
	return iuo
}

// RemoveBars removes "bars" edges to BarTimeRange entities.
func (iuo *IntervalUpdateOne) RemoveBars(b ...*BarTimeRange) *IntervalUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.RemoveBarIDs(ids...)
}

// ClearTrades clears all "trades" edges to the TradeTimeRange entity.
func (iuo *IntervalUpdateOne) ClearTrades() *IntervalUpdateOne {
	iuo.mutation.ClearTrades()
	return iuo
}

// RemoveTradeIDs removes the "trades" edge to TradeTimeRange entities by IDs.
func (iuo *IntervalUpdateOne) RemoveTradeIDs(ids ...int) *IntervalUpdateOne {
	iuo.mutation.RemoveTradeIDs(ids...)
	return iuo
}

// RemoveTrades removes "trades" edges to TradeTimeRange entities.
func (iuo *IntervalUpdateOne) RemoveTrades(t ...*TradeTimeRange) *IntervalUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.RemoveTradeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IntervalUpdateOne) Select(field string, fields ...string) *IntervalUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Interval entity.
func (iuo *IntervalUpdateOne) Save(ctx context.Context) (*Interval, error) {
	return withHooks[*Interval, IntervalMutation](ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IntervalUpdateOne) SaveX(ctx context.Context) *Interval {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IntervalUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IntervalUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IntervalUpdateOne) check() error {
	if v, ok := iuo.mutation.Interval(); ok {
		if err := interval.IntervalValidator(v); err != nil {
			return &ValidationError{Name: "interval", err: fmt.Errorf(`ent: validator failed for field "Interval.interval": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.DataSourceID(); iuo.mutation.DataSourceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Interval.data_source"`)
	}
	if _, ok := iuo.mutation.StockID(); iuo.mutation.StockCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Interval.stock"`)
	}
	return nil
}

func (iuo *IntervalUpdateOne) sqlSave(ctx context.Context) (_node *Interval, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   interval.Table,
			Columns: interval.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: interval.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Interval.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, interval.FieldID)
		for _, f := range fields {
			if !interval.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != interval.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Active(); ok {
		_spec.SetField(interval.FieldActive, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.Interval(); ok {
		_spec.SetField(interval.FieldInterval, field.TypeEnum, value)
	}
	if iuo.mutation.DataSourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interval.DataSourceTable,
			Columns: []string{interval.DataSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: datasource.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.DataSourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interval.DataSourceTable,
			Columns: []string{interval.DataSourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: datasource.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interval.StockTable,
			Columns: []string{interval.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   interval.StockTable,
			Columns: []string{interval.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.BarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.BarsTable,
			Columns: []string{interval.BarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bartimerange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedBarsIDs(); len(nodes) > 0 && !iuo.mutation.BarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.BarsTable,
			Columns: []string{interval.BarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bartimerange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.BarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.BarsTable,
			Columns: []string{interval.BarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bartimerange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.TradesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.TradesTable,
			Columns: []string{interval.TradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradetimerange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedTradesIDs(); len(nodes) > 0 && !iuo.mutation.TradesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.TradesTable,
			Columns: []string{interval.TradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradetimerange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TradesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   interval.TradesTable,
			Columns: []string{interval.TradesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tradetimerange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Interval{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{interval.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
