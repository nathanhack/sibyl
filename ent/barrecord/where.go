// Code generated by ent, DO NOT EDIT.

package barrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLTE(FieldID, id))
}

// Close applies equality check predicate on the "close" field. It's identical to CloseEQ.
func Close(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldClose, v))
}

// High applies equality check predicate on the "high" field. It's identical to HighEQ.
func High(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldHigh, v))
}

// Low applies equality check predicate on the "low" field. It's identical to LowEQ.
func Low(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldLow, v))
}

// Open applies equality check predicate on the "open" field. It's identical to OpenEQ.
func Open(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldOpen, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldTimestamp, v))
}

// Volume applies equality check predicate on the "volume" field. It's identical to VolumeEQ.
func Volume(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldVolume, v))
}

// Transactions applies equality check predicate on the "transactions" field. It's identical to TransactionsEQ.
func Transactions(v int32) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldTransactions, v))
}

// CloseEQ applies the EQ predicate on the "close" field.
func CloseEQ(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldClose, v))
}

// CloseNEQ applies the NEQ predicate on the "close" field.
func CloseNEQ(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNEQ(FieldClose, v))
}

// CloseIn applies the In predicate on the "close" field.
func CloseIn(vs ...float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldIn(FieldClose, vs...))
}

// CloseNotIn applies the NotIn predicate on the "close" field.
func CloseNotIn(vs ...float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNotIn(FieldClose, vs...))
}

// CloseGT applies the GT predicate on the "close" field.
func CloseGT(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGT(FieldClose, v))
}

// CloseGTE applies the GTE predicate on the "close" field.
func CloseGTE(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGTE(FieldClose, v))
}

// CloseLT applies the LT predicate on the "close" field.
func CloseLT(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLT(FieldClose, v))
}

// CloseLTE applies the LTE predicate on the "close" field.
func CloseLTE(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLTE(FieldClose, v))
}

// HighEQ applies the EQ predicate on the "high" field.
func HighEQ(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldHigh, v))
}

// HighNEQ applies the NEQ predicate on the "high" field.
func HighNEQ(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNEQ(FieldHigh, v))
}

// HighIn applies the In predicate on the "high" field.
func HighIn(vs ...float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldIn(FieldHigh, vs...))
}

// HighNotIn applies the NotIn predicate on the "high" field.
func HighNotIn(vs ...float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNotIn(FieldHigh, vs...))
}

// HighGT applies the GT predicate on the "high" field.
func HighGT(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGT(FieldHigh, v))
}

// HighGTE applies the GTE predicate on the "high" field.
func HighGTE(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGTE(FieldHigh, v))
}

// HighLT applies the LT predicate on the "high" field.
func HighLT(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLT(FieldHigh, v))
}

// HighLTE applies the LTE predicate on the "high" field.
func HighLTE(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLTE(FieldHigh, v))
}

// LowEQ applies the EQ predicate on the "low" field.
func LowEQ(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldLow, v))
}

// LowNEQ applies the NEQ predicate on the "low" field.
func LowNEQ(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNEQ(FieldLow, v))
}

// LowIn applies the In predicate on the "low" field.
func LowIn(vs ...float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldIn(FieldLow, vs...))
}

// LowNotIn applies the NotIn predicate on the "low" field.
func LowNotIn(vs ...float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNotIn(FieldLow, vs...))
}

// LowGT applies the GT predicate on the "low" field.
func LowGT(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGT(FieldLow, v))
}

// LowGTE applies the GTE predicate on the "low" field.
func LowGTE(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGTE(FieldLow, v))
}

// LowLT applies the LT predicate on the "low" field.
func LowLT(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLT(FieldLow, v))
}

// LowLTE applies the LTE predicate on the "low" field.
func LowLTE(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLTE(FieldLow, v))
}

// OpenEQ applies the EQ predicate on the "open" field.
func OpenEQ(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldOpen, v))
}

// OpenNEQ applies the NEQ predicate on the "open" field.
func OpenNEQ(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNEQ(FieldOpen, v))
}

// OpenIn applies the In predicate on the "open" field.
func OpenIn(vs ...float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldIn(FieldOpen, vs...))
}

// OpenNotIn applies the NotIn predicate on the "open" field.
func OpenNotIn(vs ...float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNotIn(FieldOpen, vs...))
}

// OpenGT applies the GT predicate on the "open" field.
func OpenGT(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGT(FieldOpen, v))
}

// OpenGTE applies the GTE predicate on the "open" field.
func OpenGTE(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGTE(FieldOpen, v))
}

// OpenLT applies the LT predicate on the "open" field.
func OpenLT(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLT(FieldOpen, v))
}

// OpenLTE applies the LTE predicate on the "open" field.
func OpenLTE(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLTE(FieldOpen, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLTE(FieldTimestamp, v))
}

// VolumeEQ applies the EQ predicate on the "volume" field.
func VolumeEQ(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldVolume, v))
}

// VolumeNEQ applies the NEQ predicate on the "volume" field.
func VolumeNEQ(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNEQ(FieldVolume, v))
}

// VolumeIn applies the In predicate on the "volume" field.
func VolumeIn(vs ...float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldIn(FieldVolume, vs...))
}

// VolumeNotIn applies the NotIn predicate on the "volume" field.
func VolumeNotIn(vs ...float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNotIn(FieldVolume, vs...))
}

// VolumeGT applies the GT predicate on the "volume" field.
func VolumeGT(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGT(FieldVolume, v))
}

// VolumeGTE applies the GTE predicate on the "volume" field.
func VolumeGTE(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGTE(FieldVolume, v))
}

// VolumeLT applies the LT predicate on the "volume" field.
func VolumeLT(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLT(FieldVolume, v))
}

// VolumeLTE applies the LTE predicate on the "volume" field.
func VolumeLTE(v float64) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLTE(FieldVolume, v))
}

// TransactionsEQ applies the EQ predicate on the "transactions" field.
func TransactionsEQ(v int32) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldEQ(FieldTransactions, v))
}

// TransactionsNEQ applies the NEQ predicate on the "transactions" field.
func TransactionsNEQ(v int32) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNEQ(FieldTransactions, v))
}

// TransactionsIn applies the In predicate on the "transactions" field.
func TransactionsIn(vs ...int32) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldIn(FieldTransactions, vs...))
}

// TransactionsNotIn applies the NotIn predicate on the "transactions" field.
func TransactionsNotIn(vs ...int32) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldNotIn(FieldTransactions, vs...))
}

// TransactionsGT applies the GT predicate on the "transactions" field.
func TransactionsGT(v int32) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGT(FieldTransactions, v))
}

// TransactionsGTE applies the GTE predicate on the "transactions" field.
func TransactionsGTE(v int32) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldGTE(FieldTransactions, v))
}

// TransactionsLT applies the LT predicate on the "transactions" field.
func TransactionsLT(v int32) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLT(FieldTransactions, v))
}

// TransactionsLTE applies the LTE predicate on the "transactions" field.
func TransactionsLTE(v int32) predicate.BarRecord {
	return predicate.BarRecord(sql.FieldLTE(FieldTransactions, v))
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.BarRecord {
	return predicate.BarRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.BarGroup) predicate.BarRecord {
	return predicate.BarRecord(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BarRecord) predicate.BarRecord {
	return predicate.BarRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BarRecord) predicate.BarRecord {
	return predicate.BarRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BarRecord) predicate.BarRecord {
	return predicate.BarRecord(sql.NotPredicates(p))
}
