// Code generated by ent, DO NOT EDIT.

package barrecord

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the barrecord type in the database.
	Label = "bar_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClose holds the string denoting the close field in the database.
	FieldClose = "close"
	// FieldHigh holds the string denoting the high field in the database.
	FieldHigh = "high"
	// FieldLow holds the string denoting the low field in the database.
	FieldLow = "low"
	// FieldOpen holds the string denoting the open field in the database.
	FieldOpen = "open"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// FieldVolume holds the string denoting the volume field in the database.
	FieldVolume = "volume"
	// FieldTransactions holds the string denoting the transactions field in the database.
	FieldTransactions = "transactions"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// Table holds the table name of the barrecord in the database.
	Table = "bar_records"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "bar_records"
	// GroupInverseTable is the table name for the BarGroup entity.
	// It exists in this package in order to avoid circular dependency with the "bargroup" package.
	GroupInverseTable = "bar_groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "bar_group_records"
)

// Columns holds all SQL columns for barrecord fields.
var Columns = []string{
	FieldID,
	FieldClose,
	FieldHigh,
	FieldLow,
	FieldOpen,
	FieldTimestamp,
	FieldVolume,
	FieldTransactions,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "bar_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bar_group_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the BarRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClose orders the results by the close field.
func ByClose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClose, opts...).ToFunc()
}

// ByHigh orders the results by the high field.
func ByHigh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHigh, opts...).ToFunc()
}

// ByLow orders the results by the low field.
func ByLow(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLow, opts...).ToFunc()
}

// ByOpen orders the results by the open field.
func ByOpen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpen, opts...).ToFunc()
}

// ByTimestamp orders the results by the timestamp field.
func ByTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimestamp, opts...).ToFunc()
}

// ByVolume orders the results by the volume field.
func ByVolume(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVolume, opts...).ToFunc()
}

// ByTransactions orders the results by the transactions field.
func ByTransactions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactions, opts...).ToFunc()
}

// ByGroupField orders the results by group field.
func ByGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
	)
}
