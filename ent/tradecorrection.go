// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/tradecorrection"
)

// TradeCorrection is the model entity for the TradeCorrection schema.
type TradeCorrection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Correction holds the value of the "correction" field.
	Correction string `json:"correction,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TradeCorrectionQuery when eager-loading is set.
	Edges TradeCorrectionEdges `json:"edges"`
}

// TradeCorrectionEdges holds the relations/edges for other nodes in the graph.
type TradeCorrectionEdges struct {
	// Record holds the value of the record edge.
	Record []*TradeRecord `json:"record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecordOrErr returns the Record value or an error if the edge
// was not loaded in eager-loading.
func (e TradeCorrectionEdges) RecordOrErr() ([]*TradeRecord, error) {
	if e.loadedTypes[0] {
		return e.Record, nil
	}
	return nil, &NotLoadedError{edge: "record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TradeCorrection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tradecorrection.FieldID:
			values[i] = new(sql.NullInt64)
		case tradecorrection.FieldCorrection:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TradeCorrection", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TradeCorrection fields.
func (tc *TradeCorrection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tradecorrection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int(value.Int64)
		case tradecorrection.FieldCorrection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field correction", values[i])
			} else if value.Valid {
				tc.Correction = value.String
			}
		}
	}
	return nil
}

// QueryRecord queries the "record" edge of the TradeCorrection entity.
func (tc *TradeCorrection) QueryRecord() *TradeRecordQuery {
	return (&TradeCorrectionClient{config: tc.config}).QueryRecord(tc)
}

// Update returns a builder for updating this TradeCorrection.
// Note that you need to call TradeCorrection.Unwrap() before calling this method if this TradeCorrection
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TradeCorrection) Update() *TradeCorrectionUpdateOne {
	return (&TradeCorrectionClient{config: tc.config}).UpdateOne(tc)
}

// Unwrap unwraps the TradeCorrection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TradeCorrection) Unwrap() *TradeCorrection {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TradeCorrection is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TradeCorrection) String() string {
	var builder strings.Builder
	builder.WriteString("TradeCorrection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("correction=")
	builder.WriteString(tc.Correction)
	builder.WriteByte(')')
	return builder.String()
}

// TradeCorrections is a parsable slice of TradeCorrection.
type TradeCorrections []*TradeCorrection

func (tc TradeCorrections) config(cfg config) {
	for _i := range tc {
		tc[_i].config = cfg
	}
}
