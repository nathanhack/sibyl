// Code generated by ent, DO NOT EDIT.

package tradecondition

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tradecondition type in the database.
	Label = "trade_condition"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCondition holds the string denoting the condition field in the database.
	FieldCondition = "condition"
	// EdgeRecord holds the string denoting the record edge name in mutations.
	EdgeRecord = "record"
	// Table holds the table name of the tradecondition in the database.
	Table = "trade_conditions"
	// RecordTable is the table that holds the record relation/edge. The primary key declared below.
	RecordTable = "trade_record_conditions"
	// RecordInverseTable is the table name for the TradeRecord entity.
	// It exists in this package in order to avoid circular dependency with the "traderecord" package.
	RecordInverseTable = "trade_records"
)

// Columns holds all SQL columns for tradecondition fields.
var Columns = []string{
	FieldID,
	FieldCondition,
}

var (
	// RecordPrimaryKey and RecordColumn2 are the table columns denoting the
	// primary key for the record relation (M2M).
	RecordPrimaryKey = []string{"trade_record_id", "trade_condition_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TradeCondition queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCondition orders the results by the condition field.
func ByCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCondition, opts...).ToFunc()
}

// ByRecordCount orders the results by record count.
func ByRecordCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordStep(), opts...)
	}
}

// ByRecord orders the results by record terms.
func ByRecord(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRecordStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RecordTable, RecordPrimaryKey...),
	)
}
