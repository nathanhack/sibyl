// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/datasource"
	"github.com/nathanhack/sibyl/ent/entity"
	"github.com/nathanhack/sibyl/ent/interval"
)

// Interval is the model entity for the Interval schema.
type Interval struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Interval holds the value of the "interval" field.
	Interval interval.Interval `json:"interval,omitempty"`
	// StockID holds the value of the "stock_id" field.
	StockID int `json:"stock_id,omitempty"`
	// DataSourceID holds the value of the "data_source_id" field.
	DataSourceID int `json:"data_source_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IntervalQuery when eager-loading is set.
	Edges IntervalEdges `json:"edges"`
}

// IntervalEdges holds the relations/edges for other nodes in the graph.
type IntervalEdges struct {
	// DataSource holds the value of the data_source edge.
	DataSource *DataSource `json:"data_source,omitempty"`
	// Stock holds the value of the stock edge.
	Stock *Entity `json:"stock,omitempty"`
	// Bars holds the value of the bars edge.
	Bars []*BarTimeRange `json:"bars,omitempty"`
	// Trades holds the value of the trades edge.
	Trades []*TradeTimeRange `json:"trades,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DataSourceOrErr returns the DataSource value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IntervalEdges) DataSourceOrErr() (*DataSource, error) {
	if e.loadedTypes[0] {
		if e.DataSource == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: datasource.Label}
		}
		return e.DataSource, nil
	}
	return nil, &NotLoadedError{edge: "data_source"}
}

// StockOrErr returns the Stock value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IntervalEdges) StockOrErr() (*Entity, error) {
	if e.loadedTypes[1] {
		if e.Stock == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entity.Label}
		}
		return e.Stock, nil
	}
	return nil, &NotLoadedError{edge: "stock"}
}

// BarsOrErr returns the Bars value or an error if the edge
// was not loaded in eager-loading.
func (e IntervalEdges) BarsOrErr() ([]*BarTimeRange, error) {
	if e.loadedTypes[2] {
		return e.Bars, nil
	}
	return nil, &NotLoadedError{edge: "bars"}
}

// TradesOrErr returns the Trades value or an error if the edge
// was not loaded in eager-loading.
func (e IntervalEdges) TradesOrErr() ([]*TradeTimeRange, error) {
	if e.loadedTypes[3] {
		return e.Trades, nil
	}
	return nil, &NotLoadedError{edge: "trades"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Interval) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case interval.FieldActive:
			values[i] = new(sql.NullBool)
		case interval.FieldID, interval.FieldStockID, interval.FieldDataSourceID:
			values[i] = new(sql.NullInt64)
		case interval.FieldInterval:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Interval", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Interval fields.
func (i *Interval) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case interval.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case interval.FieldActive:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[j])
			} else if value.Valid {
				i.Active = value.Bool
			}
		case interval.FieldInterval:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interval", values[j])
			} else if value.Valid {
				i.Interval = interval.Interval(value.String)
			}
		case interval.FieldStockID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock_id", values[j])
			} else if value.Valid {
				i.StockID = int(value.Int64)
			}
		case interval.FieldDataSourceID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field data_source_id", values[j])
			} else if value.Valid {
				i.DataSourceID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDataSource queries the "data_source" edge of the Interval entity.
func (i *Interval) QueryDataSource() *DataSourceQuery {
	return (&IntervalClient{config: i.config}).QueryDataSource(i)
}

// QueryStock queries the "stock" edge of the Interval entity.
func (i *Interval) QueryStock() *EntityQuery {
	return (&IntervalClient{config: i.config}).QueryStock(i)
}

// QueryBars queries the "bars" edge of the Interval entity.
func (i *Interval) QueryBars() *BarTimeRangeQuery {
	return (&IntervalClient{config: i.config}).QueryBars(i)
}

// QueryTrades queries the "trades" edge of the Interval entity.
func (i *Interval) QueryTrades() *TradeTimeRangeQuery {
	return (&IntervalClient{config: i.config}).QueryTrades(i)
}

// Update returns a builder for updating this Interval.
// Note that you need to call Interval.Unwrap() before calling this method if this Interval
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Interval) Update() *IntervalUpdateOne {
	return (&IntervalClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Interval entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Interval) Unwrap() *Interval {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Interval is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Interval) String() string {
	var builder strings.Builder
	builder.WriteString("Interval(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", i.Active))
	builder.WriteString(", ")
	builder.WriteString("interval=")
	builder.WriteString(fmt.Sprintf("%v", i.Interval))
	builder.WriteString(", ")
	builder.WriteString("stock_id=")
	builder.WriteString(fmt.Sprintf("%v", i.StockID))
	builder.WriteString(", ")
	builder.WriteString("data_source_id=")
	builder.WriteString(fmt.Sprintf("%v", i.DataSourceID))
	builder.WriteByte(')')
	return builder.String()
}

// Intervals is a parsable slice of Interval.
type Intervals []*Interval

func (i Intervals) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
