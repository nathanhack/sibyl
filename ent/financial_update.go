// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/entity"
	"github.com/nathanhack/sibyl/ent/financial"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// FinancialUpdate is the builder for updating Financial entities.
type FinancialUpdate struct {
	config
	hooks    []Hook
	mutation *FinancialMutation
}

// Where appends a list predicates to the FinancialUpdate builder.
func (fu *FinancialUpdate) Where(ps ...predicate.Financial) *FinancialUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// AddStockIDs adds the "stock" edge to the Entity entity by IDs.
func (fu *FinancialUpdate) AddStockIDs(ids ...int) *FinancialUpdate {
	fu.mutation.AddStockIDs(ids...)
	return fu
}

// AddStock adds the "stock" edges to the Entity entity.
func (fu *FinancialUpdate) AddStock(e ...*Entity) *FinancialUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.AddStockIDs(ids...)
}

// Mutation returns the FinancialMutation object of the builder.
func (fu *FinancialUpdate) Mutation() *FinancialMutation {
	return fu.mutation
}

// ClearStock clears all "stock" edges to the Entity entity.
func (fu *FinancialUpdate) ClearStock() *FinancialUpdate {
	fu.mutation.ClearStock()
	return fu
}

// RemoveStockIDs removes the "stock" edge to Entity entities by IDs.
func (fu *FinancialUpdate) RemoveStockIDs(ids ...int) *FinancialUpdate {
	fu.mutation.RemoveStockIDs(ids...)
	return fu
}

// RemoveStock removes "stock" edges to Entity entities.
func (fu *FinancialUpdate) RemoveStock(e ...*Entity) *FinancialUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.RemoveStockIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FinancialUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, FinancialMutation](ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FinancialUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FinancialUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FinancialUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FinancialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   financial.Table,
			Columns: financial.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: financial.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fu.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   financial.StockTable,
			Columns: financial.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedStockIDs(); len(nodes) > 0 && !fu.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   financial.StockTable,
			Columns: financial.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   financial.StockTable,
			Columns: financial.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{financial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FinancialUpdateOne is the builder for updating a single Financial entity.
type FinancialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FinancialMutation
}

// AddStockIDs adds the "stock" edge to the Entity entity by IDs.
func (fuo *FinancialUpdateOne) AddStockIDs(ids ...int) *FinancialUpdateOne {
	fuo.mutation.AddStockIDs(ids...)
	return fuo
}

// AddStock adds the "stock" edges to the Entity entity.
func (fuo *FinancialUpdateOne) AddStock(e ...*Entity) *FinancialUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.AddStockIDs(ids...)
}

// Mutation returns the FinancialMutation object of the builder.
func (fuo *FinancialUpdateOne) Mutation() *FinancialMutation {
	return fuo.mutation
}

// ClearStock clears all "stock" edges to the Entity entity.
func (fuo *FinancialUpdateOne) ClearStock() *FinancialUpdateOne {
	fuo.mutation.ClearStock()
	return fuo
}

// RemoveStockIDs removes the "stock" edge to Entity entities by IDs.
func (fuo *FinancialUpdateOne) RemoveStockIDs(ids ...int) *FinancialUpdateOne {
	fuo.mutation.RemoveStockIDs(ids...)
	return fuo
}

// RemoveStock removes "stock" edges to Entity entities.
func (fuo *FinancialUpdateOne) RemoveStock(e ...*Entity) *FinancialUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.RemoveStockIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FinancialUpdateOne) Select(field string, fields ...string) *FinancialUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Financial entity.
func (fuo *FinancialUpdateOne) Save(ctx context.Context) (*Financial, error) {
	return withHooks[*Financial, FinancialMutation](ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FinancialUpdateOne) SaveX(ctx context.Context) *Financial {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FinancialUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FinancialUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FinancialUpdateOne) sqlSave(ctx context.Context) (_node *Financial, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   financial.Table,
			Columns: financial.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: financial.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Financial.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, financial.FieldID)
		for _, f := range fields {
			if !financial.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != financial.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fuo.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   financial.StockTable,
			Columns: financial.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedStockIDs(); len(nodes) > 0 && !fuo.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   financial.StockTable,
			Columns: financial.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   financial.StockTable,
			Columns: financial.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Financial{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{financial.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
