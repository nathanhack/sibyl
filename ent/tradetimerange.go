// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/interval"
	"github.com/nathanhack/sibyl/ent/tradetimerange"
)

// TradeTimeRange is the model entity for the TradeTimeRange schema.
type TradeTimeRange struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Start holds the value of the "start" field.
	Start time.Time `json:"start,omitempty"`
	// End holds the value of the "end" field.
	End time.Time `json:"end,omitempty"`
	// IntervalID holds the value of the "interval_id" field.
	IntervalID int `json:"interval_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TradeTimeRangeQuery when eager-loading is set.
	Edges TradeTimeRangeEdges `json:"edges"`
}

// TradeTimeRangeEdges holds the relations/edges for other nodes in the graph.
type TradeTimeRangeEdges struct {
	// Interval holds the value of the interval edge.
	Interval *Interval `json:"interval,omitempty"`
	// Records holds the value of the records edge.
	Records []*TradeRecord `json:"records,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// IntervalOrErr returns the Interval value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TradeTimeRangeEdges) IntervalOrErr() (*Interval, error) {
	if e.loadedTypes[0] {
		if e.Interval == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: interval.Label}
		}
		return e.Interval, nil
	}
	return nil, &NotLoadedError{edge: "interval"}
}

// RecordsOrErr returns the Records value or an error if the edge
// was not loaded in eager-loading.
func (e TradeTimeRangeEdges) RecordsOrErr() ([]*TradeRecord, error) {
	if e.loadedTypes[1] {
		return e.Records, nil
	}
	return nil, &NotLoadedError{edge: "records"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TradeTimeRange) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tradetimerange.FieldID, tradetimerange.FieldIntervalID:
			values[i] = new(sql.NullInt64)
		case tradetimerange.FieldStart, tradetimerange.FieldEnd:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TradeTimeRange", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TradeTimeRange fields.
func (ttr *TradeTimeRange) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tradetimerange.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ttr.ID = int(value.Int64)
		case tradetimerange.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				ttr.Start = value.Time
			}
		case tradetimerange.FieldEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				ttr.End = value.Time
			}
		case tradetimerange.FieldIntervalID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interval_id", values[i])
			} else if value.Valid {
				ttr.IntervalID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryInterval queries the "interval" edge of the TradeTimeRange entity.
func (ttr *TradeTimeRange) QueryInterval() *IntervalQuery {
	return (&TradeTimeRangeClient{config: ttr.config}).QueryInterval(ttr)
}

// QueryRecords queries the "records" edge of the TradeTimeRange entity.
func (ttr *TradeTimeRange) QueryRecords() *TradeRecordQuery {
	return (&TradeTimeRangeClient{config: ttr.config}).QueryRecords(ttr)
}

// Update returns a builder for updating this TradeTimeRange.
// Note that you need to call TradeTimeRange.Unwrap() before calling this method if this TradeTimeRange
// was returned from a transaction, and the transaction was committed or rolled back.
func (ttr *TradeTimeRange) Update() *TradeTimeRangeUpdateOne {
	return (&TradeTimeRangeClient{config: ttr.config}).UpdateOne(ttr)
}

// Unwrap unwraps the TradeTimeRange entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ttr *TradeTimeRange) Unwrap() *TradeTimeRange {
	_tx, ok := ttr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TradeTimeRange is not a transactional entity")
	}
	ttr.config.driver = _tx.drv
	return ttr
}

// String implements the fmt.Stringer.
func (ttr *TradeTimeRange) String() string {
	var builder strings.Builder
	builder.WriteString("TradeTimeRange(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ttr.ID))
	builder.WriteString("start=")
	builder.WriteString(ttr.Start.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(ttr.End.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("interval_id=")
	builder.WriteString(fmt.Sprintf("%v", ttr.IntervalID))
	builder.WriteByte(')')
	return builder.String()
}

// TradeTimeRanges is a parsable slice of TradeTimeRange.
type TradeTimeRanges []*TradeTimeRange

func (ttr TradeTimeRanges) config(cfg config) {
	for _i := range ttr {
		ttr[_i].config = cfg
	}
}
