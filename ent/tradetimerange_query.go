// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/interval"
	"github.com/nathanhack/sibyl/ent/predicate"
	"github.com/nathanhack/sibyl/ent/traderecord"
	"github.com/nathanhack/sibyl/ent/tradetimerange"
)

// TradeTimeRangeQuery is the builder for querying TradeTimeRange entities.
type TradeTimeRangeQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	inters       []Interceptor
	predicates   []predicate.TradeTimeRange
	withInterval *IntervalQuery
	withRecords  *TradeRecordQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TradeTimeRangeQuery builder.
func (ttrq *TradeTimeRangeQuery) Where(ps ...predicate.TradeTimeRange) *TradeTimeRangeQuery {
	ttrq.predicates = append(ttrq.predicates, ps...)
	return ttrq
}

// Limit the number of records to be returned by this query.
func (ttrq *TradeTimeRangeQuery) Limit(limit int) *TradeTimeRangeQuery {
	ttrq.limit = &limit
	return ttrq
}

// Offset to start from.
func (ttrq *TradeTimeRangeQuery) Offset(offset int) *TradeTimeRangeQuery {
	ttrq.offset = &offset
	return ttrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ttrq *TradeTimeRangeQuery) Unique(unique bool) *TradeTimeRangeQuery {
	ttrq.unique = &unique
	return ttrq
}

// Order specifies how the records should be ordered.
func (ttrq *TradeTimeRangeQuery) Order(o ...OrderFunc) *TradeTimeRangeQuery {
	ttrq.order = append(ttrq.order, o...)
	return ttrq
}

// QueryInterval chains the current query on the "interval" edge.
func (ttrq *TradeTimeRangeQuery) QueryInterval() *IntervalQuery {
	query := (&IntervalClient{config: ttrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tradetimerange.Table, tradetimerange.FieldID, selector),
			sqlgraph.To(interval.Table, interval.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tradetimerange.IntervalTable, tradetimerange.IntervalColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRecords chains the current query on the "records" edge.
func (ttrq *TradeTimeRangeQuery) QueryRecords() *TradeRecordQuery {
	query := (&TradeRecordClient{config: ttrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ttrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ttrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tradetimerange.Table, tradetimerange.FieldID, selector),
			sqlgraph.To(traderecord.Table, traderecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tradetimerange.RecordsTable, tradetimerange.RecordsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ttrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TradeTimeRange entity from the query.
// Returns a *NotFoundError when no TradeTimeRange was found.
func (ttrq *TradeTimeRangeQuery) First(ctx context.Context) (*TradeTimeRange, error) {
	nodes, err := ttrq.Limit(1).All(newQueryContext(ctx, TypeTradeTimeRange, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tradetimerange.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ttrq *TradeTimeRangeQuery) FirstX(ctx context.Context) *TradeTimeRange {
	node, err := ttrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TradeTimeRange ID from the query.
// Returns a *NotFoundError when no TradeTimeRange ID was found.
func (ttrq *TradeTimeRangeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ttrq.Limit(1).IDs(newQueryContext(ctx, TypeTradeTimeRange, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tradetimerange.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ttrq *TradeTimeRangeQuery) FirstIDX(ctx context.Context) int {
	id, err := ttrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TradeTimeRange entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TradeTimeRange entity is found.
// Returns a *NotFoundError when no TradeTimeRange entities are found.
func (ttrq *TradeTimeRangeQuery) Only(ctx context.Context) (*TradeTimeRange, error) {
	nodes, err := ttrq.Limit(2).All(newQueryContext(ctx, TypeTradeTimeRange, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tradetimerange.Label}
	default:
		return nil, &NotSingularError{tradetimerange.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ttrq *TradeTimeRangeQuery) OnlyX(ctx context.Context) *TradeTimeRange {
	node, err := ttrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TradeTimeRange ID in the query.
// Returns a *NotSingularError when more than one TradeTimeRange ID is found.
// Returns a *NotFoundError when no entities are found.
func (ttrq *TradeTimeRangeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ttrq.Limit(2).IDs(newQueryContext(ctx, TypeTradeTimeRange, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tradetimerange.Label}
	default:
		err = &NotSingularError{tradetimerange.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ttrq *TradeTimeRangeQuery) OnlyIDX(ctx context.Context) int {
	id, err := ttrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TradeTimeRanges.
func (ttrq *TradeTimeRangeQuery) All(ctx context.Context) ([]*TradeTimeRange, error) {
	ctx = newQueryContext(ctx, TypeTradeTimeRange, "All")
	if err := ttrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TradeTimeRange, *TradeTimeRangeQuery]()
	return withInterceptors[[]*TradeTimeRange](ctx, ttrq, qr, ttrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ttrq *TradeTimeRangeQuery) AllX(ctx context.Context) []*TradeTimeRange {
	nodes, err := ttrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TradeTimeRange IDs.
func (ttrq *TradeTimeRangeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeTradeTimeRange, "IDs")
	if err := ttrq.Select(tradetimerange.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ttrq *TradeTimeRangeQuery) IDsX(ctx context.Context) []int {
	ids, err := ttrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ttrq *TradeTimeRangeQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeTradeTimeRange, "Count")
	if err := ttrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ttrq, querierCount[*TradeTimeRangeQuery](), ttrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ttrq *TradeTimeRangeQuery) CountX(ctx context.Context) int {
	count, err := ttrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ttrq *TradeTimeRangeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeTradeTimeRange, "Exist")
	switch _, err := ttrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ttrq *TradeTimeRangeQuery) ExistX(ctx context.Context) bool {
	exist, err := ttrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TradeTimeRangeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ttrq *TradeTimeRangeQuery) Clone() *TradeTimeRangeQuery {
	if ttrq == nil {
		return nil
	}
	return &TradeTimeRangeQuery{
		config:       ttrq.config,
		limit:        ttrq.limit,
		offset:       ttrq.offset,
		order:        append([]OrderFunc{}, ttrq.order...),
		inters:       append([]Interceptor{}, ttrq.inters...),
		predicates:   append([]predicate.TradeTimeRange{}, ttrq.predicates...),
		withInterval: ttrq.withInterval.Clone(),
		withRecords:  ttrq.withRecords.Clone(),
		// clone intermediate query.
		sql:    ttrq.sql.Clone(),
		path:   ttrq.path,
		unique: ttrq.unique,
	}
}

// WithInterval tells the query-builder to eager-load the nodes that are connected to
// the "interval" edge. The optional arguments are used to configure the query builder of the edge.
func (ttrq *TradeTimeRangeQuery) WithInterval(opts ...func(*IntervalQuery)) *TradeTimeRangeQuery {
	query := (&IntervalClient{config: ttrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttrq.withInterval = query
	return ttrq
}

// WithRecords tells the query-builder to eager-load the nodes that are connected to
// the "records" edge. The optional arguments are used to configure the query builder of the edge.
func (ttrq *TradeTimeRangeQuery) WithRecords(opts ...func(*TradeRecordQuery)) *TradeTimeRangeQuery {
	query := (&TradeRecordClient{config: ttrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ttrq.withRecords = query
	return ttrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Start time.Time `json:"start,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TradeTimeRange.Query().
//		GroupBy(tradetimerange.FieldStart).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ttrq *TradeTimeRangeQuery) GroupBy(field string, fields ...string) *TradeTimeRangeGroupBy {
	ttrq.fields = append([]string{field}, fields...)
	grbuild := &TradeTimeRangeGroupBy{build: ttrq}
	grbuild.flds = &ttrq.fields
	grbuild.label = tradetimerange.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Start time.Time `json:"start,omitempty"`
//	}
//
//	client.TradeTimeRange.Query().
//		Select(tradetimerange.FieldStart).
//		Scan(ctx, &v)
func (ttrq *TradeTimeRangeQuery) Select(fields ...string) *TradeTimeRangeSelect {
	ttrq.fields = append(ttrq.fields, fields...)
	sbuild := &TradeTimeRangeSelect{TradeTimeRangeQuery: ttrq}
	sbuild.label = tradetimerange.Label
	sbuild.flds, sbuild.scan = &ttrq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TradeTimeRangeSelect configured with the given aggregations.
func (ttrq *TradeTimeRangeQuery) Aggregate(fns ...AggregateFunc) *TradeTimeRangeSelect {
	return ttrq.Select().Aggregate(fns...)
}

func (ttrq *TradeTimeRangeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ttrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ttrq); err != nil {
				return err
			}
		}
	}
	for _, f := range ttrq.fields {
		if !tradetimerange.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ttrq.path != nil {
		prev, err := ttrq.path(ctx)
		if err != nil {
			return err
		}
		ttrq.sql = prev
	}
	return nil
}

func (ttrq *TradeTimeRangeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TradeTimeRange, error) {
	var (
		nodes       = []*TradeTimeRange{}
		_spec       = ttrq.querySpec()
		loadedTypes = [2]bool{
			ttrq.withInterval != nil,
			ttrq.withRecords != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TradeTimeRange).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TradeTimeRange{config: ttrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ttrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ttrq.withInterval; query != nil {
		if err := ttrq.loadInterval(ctx, query, nodes, nil,
			func(n *TradeTimeRange, e *Interval) { n.Edges.Interval = e }); err != nil {
			return nil, err
		}
	}
	if query := ttrq.withRecords; query != nil {
		if err := ttrq.loadRecords(ctx, query, nodes,
			func(n *TradeTimeRange) { n.Edges.Records = []*TradeRecord{} },
			func(n *TradeTimeRange, e *TradeRecord) { n.Edges.Records = append(n.Edges.Records, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ttrq *TradeTimeRangeQuery) loadInterval(ctx context.Context, query *IntervalQuery, nodes []*TradeTimeRange, init func(*TradeTimeRange), assign func(*TradeTimeRange, *Interval)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*TradeTimeRange)
	for i := range nodes {
		fk := nodes[i].IntervalID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(interval.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "interval_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ttrq *TradeTimeRangeQuery) loadRecords(ctx context.Context, query *TradeRecordQuery, nodes []*TradeTimeRange, init func(*TradeTimeRange), assign func(*TradeTimeRange, *TradeRecord)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*TradeTimeRange)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.TradeRecord(func(s *sql.Selector) {
		s.Where(sql.InValues(tradetimerange.RecordsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TimeRangeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "time_range_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ttrq *TradeTimeRangeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ttrq.querySpec()
	_spec.Node.Columns = ttrq.fields
	if len(ttrq.fields) > 0 {
		_spec.Unique = ttrq.unique != nil && *ttrq.unique
	}
	return sqlgraph.CountNodes(ctx, ttrq.driver, _spec)
}

func (ttrq *TradeTimeRangeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tradetimerange.Table,
			Columns: tradetimerange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tradetimerange.FieldID,
			},
		},
		From:   ttrq.sql,
		Unique: true,
	}
	if unique := ttrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ttrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tradetimerange.FieldID)
		for i := range fields {
			if fields[i] != tradetimerange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ttrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ttrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ttrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ttrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ttrq *TradeTimeRangeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ttrq.driver.Dialect())
	t1 := builder.Table(tradetimerange.Table)
	columns := ttrq.fields
	if len(columns) == 0 {
		columns = tradetimerange.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ttrq.sql != nil {
		selector = ttrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ttrq.unique != nil && *ttrq.unique {
		selector.Distinct()
	}
	for _, p := range ttrq.predicates {
		p(selector)
	}
	for _, p := range ttrq.order {
		p(selector)
	}
	if offset := ttrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ttrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TradeTimeRangeGroupBy is the group-by builder for TradeTimeRange entities.
type TradeTimeRangeGroupBy struct {
	selector
	build *TradeTimeRangeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ttrgb *TradeTimeRangeGroupBy) Aggregate(fns ...AggregateFunc) *TradeTimeRangeGroupBy {
	ttrgb.fns = append(ttrgb.fns, fns...)
	return ttrgb
}

// Scan applies the selector query and scans the result into the given value.
func (ttrgb *TradeTimeRangeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeTradeTimeRange, "GroupBy")
	if err := ttrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TradeTimeRangeQuery, *TradeTimeRangeGroupBy](ctx, ttrgb.build, ttrgb, ttrgb.build.inters, v)
}

func (ttrgb *TradeTimeRangeGroupBy) sqlScan(ctx context.Context, root *TradeTimeRangeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ttrgb.fns))
	for _, fn := range ttrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ttrgb.flds)+len(ttrgb.fns))
		for _, f := range *ttrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ttrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TradeTimeRangeSelect is the builder for selecting fields of TradeTimeRange entities.
type TradeTimeRangeSelect struct {
	*TradeTimeRangeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ttrs *TradeTimeRangeSelect) Aggregate(fns ...AggregateFunc) *TradeTimeRangeSelect {
	ttrs.fns = append(ttrs.fns, fns...)
	return ttrs
}

// Scan applies the selector query and scans the result into the given value.
func (ttrs *TradeTimeRangeSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeTradeTimeRange, "Select")
	if err := ttrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TradeTimeRangeQuery, *TradeTimeRangeSelect](ctx, ttrs.TradeTimeRangeQuery, ttrs, ttrs.inters, v)
}

func (ttrs *TradeTimeRangeSelect) sqlScan(ctx context.Context, root *TradeTimeRangeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ttrs.fns))
	for _, fn := range ttrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ttrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ttrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
