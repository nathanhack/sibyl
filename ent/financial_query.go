// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/entity"
	"github.com/nathanhack/sibyl/ent/financial"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// FinancialQuery is the builder for querying Financial entities.
type FinancialQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	inters     []Interceptor
	predicates []predicate.Financial
	withStock  *EntityQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FinancialQuery builder.
func (fq *FinancialQuery) Where(ps ...predicate.Financial) *FinancialQuery {
	fq.predicates = append(fq.predicates, ps...)
	return fq
}

// Limit the number of records to be returned by this query.
func (fq *FinancialQuery) Limit(limit int) *FinancialQuery {
	fq.limit = &limit
	return fq
}

// Offset to start from.
func (fq *FinancialQuery) Offset(offset int) *FinancialQuery {
	fq.offset = &offset
	return fq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fq *FinancialQuery) Unique(unique bool) *FinancialQuery {
	fq.unique = &unique
	return fq
}

// Order specifies how the records should be ordered.
func (fq *FinancialQuery) Order(o ...OrderFunc) *FinancialQuery {
	fq.order = append(fq.order, o...)
	return fq
}

// QueryStock chains the current query on the "stock" edge.
func (fq *FinancialQuery) QueryStock() *EntityQuery {
	query := (&EntityClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(financial.Table, financial.FieldID, selector),
			sqlgraph.To(entity.Table, entity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, financial.StockTable, financial.StockPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Financial entity from the query.
// Returns a *NotFoundError when no Financial was found.
func (fq *FinancialQuery) First(ctx context.Context) (*Financial, error) {
	nodes, err := fq.Limit(1).All(newQueryContext(ctx, TypeFinancial, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{financial.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fq *FinancialQuery) FirstX(ctx context.Context) *Financial {
	node, err := fq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Financial ID from the query.
// Returns a *NotFoundError when no Financial ID was found.
func (fq *FinancialQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fq.Limit(1).IDs(newQueryContext(ctx, TypeFinancial, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{financial.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fq *FinancialQuery) FirstIDX(ctx context.Context) int {
	id, err := fq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Financial entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Financial entity is found.
// Returns a *NotFoundError when no Financial entities are found.
func (fq *FinancialQuery) Only(ctx context.Context) (*Financial, error) {
	nodes, err := fq.Limit(2).All(newQueryContext(ctx, TypeFinancial, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{financial.Label}
	default:
		return nil, &NotSingularError{financial.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fq *FinancialQuery) OnlyX(ctx context.Context) *Financial {
	node, err := fq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Financial ID in the query.
// Returns a *NotSingularError when more than one Financial ID is found.
// Returns a *NotFoundError when no entities are found.
func (fq *FinancialQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fq.Limit(2).IDs(newQueryContext(ctx, TypeFinancial, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{financial.Label}
	default:
		err = &NotSingularError{financial.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fq *FinancialQuery) OnlyIDX(ctx context.Context) int {
	id, err := fq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Financials.
func (fq *FinancialQuery) All(ctx context.Context) ([]*Financial, error) {
	ctx = newQueryContext(ctx, TypeFinancial, "All")
	if err := fq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Financial, *FinancialQuery]()
	return withInterceptors[[]*Financial](ctx, fq, qr, fq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fq *FinancialQuery) AllX(ctx context.Context) []*Financial {
	nodes, err := fq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Financial IDs.
func (fq *FinancialQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeFinancial, "IDs")
	if err := fq.Select(financial.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fq *FinancialQuery) IDsX(ctx context.Context) []int {
	ids, err := fq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fq *FinancialQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeFinancial, "Count")
	if err := fq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fq, querierCount[*FinancialQuery](), fq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fq *FinancialQuery) CountX(ctx context.Context) int {
	count, err := fq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fq *FinancialQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeFinancial, "Exist")
	switch _, err := fq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fq *FinancialQuery) ExistX(ctx context.Context) bool {
	exist, err := fq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FinancialQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fq *FinancialQuery) Clone() *FinancialQuery {
	if fq == nil {
		return nil
	}
	return &FinancialQuery{
		config:     fq.config,
		limit:      fq.limit,
		offset:     fq.offset,
		order:      append([]OrderFunc{}, fq.order...),
		inters:     append([]Interceptor{}, fq.inters...),
		predicates: append([]predicate.Financial{}, fq.predicates...),
		withStock:  fq.withStock.Clone(),
		// clone intermediate query.
		sql:    fq.sql.Clone(),
		path:   fq.path,
		unique: fq.unique,
	}
}

// WithStock tells the query-builder to eager-load the nodes that are connected to
// the "stock" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FinancialQuery) WithStock(opts ...func(*EntityQuery)) *FinancialQuery {
	query := (&EntityClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withStock = query
	return fq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (fq *FinancialQuery) GroupBy(field string, fields ...string) *FinancialGroupBy {
	fq.fields = append([]string{field}, fields...)
	grbuild := &FinancialGroupBy{build: fq}
	grbuild.flds = &fq.fields
	grbuild.label = financial.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (fq *FinancialQuery) Select(fields ...string) *FinancialSelect {
	fq.fields = append(fq.fields, fields...)
	sbuild := &FinancialSelect{FinancialQuery: fq}
	sbuild.label = financial.Label
	sbuild.flds, sbuild.scan = &fq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FinancialSelect configured with the given aggregations.
func (fq *FinancialQuery) Aggregate(fns ...AggregateFunc) *FinancialSelect {
	return fq.Select().Aggregate(fns...)
}

func (fq *FinancialQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fq); err != nil {
				return err
			}
		}
	}
	for _, f := range fq.fields {
		if !financial.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fq.path != nil {
		prev, err := fq.path(ctx)
		if err != nil {
			return err
		}
		fq.sql = prev
	}
	return nil
}

func (fq *FinancialQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Financial, error) {
	var (
		nodes       = []*Financial{}
		_spec       = fq.querySpec()
		loadedTypes = [1]bool{
			fq.withStock != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Financial).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Financial{config: fq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fq.withStock; query != nil {
		if err := fq.loadStock(ctx, query, nodes,
			func(n *Financial) { n.Edges.Stock = []*Entity{} },
			func(n *Financial, e *Entity) { n.Edges.Stock = append(n.Edges.Stock, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fq *FinancialQuery) loadStock(ctx context.Context, query *EntityQuery, nodes []*Financial, init func(*Financial), assign func(*Financial, *Entity)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Financial)
	nids := make(map[int]map[*Financial]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(financial.StockTable)
		s.Join(joinT).On(s.C(entity.FieldID), joinT.C(financial.StockPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(financial.StockPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(financial.StockPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Financial]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "stock" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (fq *FinancialQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fq.querySpec()
	_spec.Node.Columns = fq.fields
	if len(fq.fields) > 0 {
		_spec.Unique = fq.unique != nil && *fq.unique
	}
	return sqlgraph.CountNodes(ctx, fq.driver, _spec)
}

func (fq *FinancialQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   financial.Table,
			Columns: financial.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: financial.FieldID,
			},
		},
		From:   fq.sql,
		Unique: true,
	}
	if unique := fq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := fq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, financial.FieldID)
		for i := range fields {
			if fields[i] != financial.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fq *FinancialQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fq.driver.Dialect())
	t1 := builder.Table(financial.Table)
	columns := fq.fields
	if len(columns) == 0 {
		columns = financial.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fq.sql != nil {
		selector = fq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fq.unique != nil && *fq.unique {
		selector.Distinct()
	}
	for _, p := range fq.predicates {
		p(selector)
	}
	for _, p := range fq.order {
		p(selector)
	}
	if offset := fq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FinancialGroupBy is the group-by builder for Financial entities.
type FinancialGroupBy struct {
	selector
	build *FinancialQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fgb *FinancialGroupBy) Aggregate(fns ...AggregateFunc) *FinancialGroupBy {
	fgb.fns = append(fgb.fns, fns...)
	return fgb
}

// Scan applies the selector query and scans the result into the given value.
func (fgb *FinancialGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeFinancial, "GroupBy")
	if err := fgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FinancialQuery, *FinancialGroupBy](ctx, fgb.build, fgb, fgb.build.inters, v)
}

func (fgb *FinancialGroupBy) sqlScan(ctx context.Context, root *FinancialQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fgb.fns))
	for _, fn := range fgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fgb.flds)+len(fgb.fns))
		for _, f := range *fgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FinancialSelect is the builder for selecting fields of Financial entities.
type FinancialSelect struct {
	*FinancialQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fs *FinancialSelect) Aggregate(fns ...AggregateFunc) *FinancialSelect {
	fs.fns = append(fs.fns, fns...)
	return fs
}

// Scan applies the selector query and scans the result into the given value.
func (fs *FinancialSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeFinancial, "Select")
	if err := fs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FinancialQuery, *FinancialSelect](ctx, fs.FinancialQuery, fs, fs.inters, v)
}

func (fs *FinancialSelect) sqlScan(ctx context.Context, root *FinancialQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fs.fns))
	for _, fn := range fs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
