// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/datasource"
	"github.com/nathanhack/sibyl/ent/interval"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// DataSourceUpdate is the builder for updating DataSource entities.
type DataSourceUpdate struct {
	config
	hooks    []Hook
	mutation *DataSourceMutation
}

// Where appends a list predicates to the DataSourceUpdate builder.
func (dsu *DataSourceUpdate) Where(ps ...predicate.DataSource) *DataSourceUpdate {
	dsu.mutation.Where(ps...)
	return dsu
}

// SetName sets the "name" field.
func (dsu *DataSourceUpdate) SetName(s string) *DataSourceUpdate {
	dsu.mutation.SetName(s)
	return dsu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableName(s *string) *DataSourceUpdate {
	if s != nil {
		dsu.SetName(*s)
	}
	return dsu
}

// SetAddress sets the "address" field.
func (dsu *DataSourceUpdate) SetAddress(s string) *DataSourceUpdate {
	dsu.mutation.SetAddress(s)
	return dsu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (dsu *DataSourceUpdate) SetNillableAddress(s *string) *DataSourceUpdate {
	if s != nil {
		dsu.SetAddress(*s)
	}
	return dsu
}

// AddIntervalIDs adds the "intervals" edge to the Interval entity by IDs.
func (dsu *DataSourceUpdate) AddIntervalIDs(ids ...int) *DataSourceUpdate {
	dsu.mutation.AddIntervalIDs(ids...)
	return dsu
}

// AddIntervals adds the "intervals" edges to the Interval entity.
func (dsu *DataSourceUpdate) AddIntervals(i ...*Interval) *DataSourceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return dsu.AddIntervalIDs(ids...)
}

// Mutation returns the DataSourceMutation object of the builder.
func (dsu *DataSourceUpdate) Mutation() *DataSourceMutation {
	return dsu.mutation
}

// ClearIntervals clears all "intervals" edges to the Interval entity.
func (dsu *DataSourceUpdate) ClearIntervals() *DataSourceUpdate {
	dsu.mutation.ClearIntervals()
	return dsu
}

// RemoveIntervalIDs removes the "intervals" edge to Interval entities by IDs.
func (dsu *DataSourceUpdate) RemoveIntervalIDs(ids ...int) *DataSourceUpdate {
	dsu.mutation.RemoveIntervalIDs(ids...)
	return dsu
}

// RemoveIntervals removes "intervals" edges to Interval entities.
func (dsu *DataSourceUpdate) RemoveIntervals(i ...*Interval) *DataSourceUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return dsu.RemoveIntervalIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dsu *DataSourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dsu.sqlSave, dsu.mutation, dsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dsu *DataSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := dsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dsu *DataSourceUpdate) Exec(ctx context.Context) error {
	_, err := dsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsu *DataSourceUpdate) ExecX(ctx context.Context) {
	if err := dsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsu *DataSourceUpdate) check() error {
	if v, ok := dsu.mutation.Name(); ok {
		if err := datasource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DataSource.name": %w`, err)}
		}
	}
	return nil
}

func (dsu *DataSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(datasource.Table, datasource.Columns, sqlgraph.NewFieldSpec(datasource.FieldID, field.TypeInt))
	if ps := dsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsu.mutation.Name(); ok {
		_spec.SetField(datasource.FieldName, field.TypeString, value)
	}
	if value, ok := dsu.mutation.Address(); ok {
		_spec.SetField(datasource.FieldAddress, field.TypeString, value)
	}
	if dsu.mutation.IntervalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasource.IntervalsTable,
			Columns: []string{datasource.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interval.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.RemovedIntervalsIDs(); len(nodes) > 0 && !dsu.mutation.IntervalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasource.IntervalsTable,
			Columns: []string{datasource.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.IntervalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasource.IntervalsTable,
			Columns: []string{datasource.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datasource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dsu.mutation.done = true
	return n, nil
}

// DataSourceUpdateOne is the builder for updating a single DataSource entity.
type DataSourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DataSourceMutation
}

// SetName sets the "name" field.
func (dsuo *DataSourceUpdateOne) SetName(s string) *DataSourceUpdateOne {
	dsuo.mutation.SetName(s)
	return dsuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableName(s *string) *DataSourceUpdateOne {
	if s != nil {
		dsuo.SetName(*s)
	}
	return dsuo
}

// SetAddress sets the "address" field.
func (dsuo *DataSourceUpdateOne) SetAddress(s string) *DataSourceUpdateOne {
	dsuo.mutation.SetAddress(s)
	return dsuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (dsuo *DataSourceUpdateOne) SetNillableAddress(s *string) *DataSourceUpdateOne {
	if s != nil {
		dsuo.SetAddress(*s)
	}
	return dsuo
}

// AddIntervalIDs adds the "intervals" edge to the Interval entity by IDs.
func (dsuo *DataSourceUpdateOne) AddIntervalIDs(ids ...int) *DataSourceUpdateOne {
	dsuo.mutation.AddIntervalIDs(ids...)
	return dsuo
}

// AddIntervals adds the "intervals" edges to the Interval entity.
func (dsuo *DataSourceUpdateOne) AddIntervals(i ...*Interval) *DataSourceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return dsuo.AddIntervalIDs(ids...)
}

// Mutation returns the DataSourceMutation object of the builder.
func (dsuo *DataSourceUpdateOne) Mutation() *DataSourceMutation {
	return dsuo.mutation
}

// ClearIntervals clears all "intervals" edges to the Interval entity.
func (dsuo *DataSourceUpdateOne) ClearIntervals() *DataSourceUpdateOne {
	dsuo.mutation.ClearIntervals()
	return dsuo
}

// RemoveIntervalIDs removes the "intervals" edge to Interval entities by IDs.
func (dsuo *DataSourceUpdateOne) RemoveIntervalIDs(ids ...int) *DataSourceUpdateOne {
	dsuo.mutation.RemoveIntervalIDs(ids...)
	return dsuo
}

// RemoveIntervals removes "intervals" edges to Interval entities.
func (dsuo *DataSourceUpdateOne) RemoveIntervals(i ...*Interval) *DataSourceUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return dsuo.RemoveIntervalIDs(ids...)
}

// Where appends a list predicates to the DataSourceUpdate builder.
func (dsuo *DataSourceUpdateOne) Where(ps ...predicate.DataSource) *DataSourceUpdateOne {
	dsuo.mutation.Where(ps...)
	return dsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dsuo *DataSourceUpdateOne) Select(field string, fields ...string) *DataSourceUpdateOne {
	dsuo.fields = append([]string{field}, fields...)
	return dsuo
}

// Save executes the query and returns the updated DataSource entity.
func (dsuo *DataSourceUpdateOne) Save(ctx context.Context) (*DataSource, error) {
	return withHooks(ctx, dsuo.sqlSave, dsuo.mutation, dsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dsuo *DataSourceUpdateOne) SaveX(ctx context.Context) *DataSource {
	node, err := dsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dsuo *DataSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := dsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsuo *DataSourceUpdateOne) ExecX(ctx context.Context) {
	if err := dsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsuo *DataSourceUpdateOne) check() error {
	if v, ok := dsuo.mutation.Name(); ok {
		if err := datasource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DataSource.name": %w`, err)}
		}
	}
	return nil
}

func (dsuo *DataSourceUpdateOne) sqlSave(ctx context.Context) (_node *DataSource, err error) {
	if err := dsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(datasource.Table, datasource.Columns, sqlgraph.NewFieldSpec(datasource.FieldID, field.TypeInt))
	id, ok := dsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DataSource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, datasource.FieldID)
		for _, f := range fields {
			if !datasource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != datasource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsuo.mutation.Name(); ok {
		_spec.SetField(datasource.FieldName, field.TypeString, value)
	}
	if value, ok := dsuo.mutation.Address(); ok {
		_spec.SetField(datasource.FieldAddress, field.TypeString, value)
	}
	if dsuo.mutation.IntervalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasource.IntervalsTable,
			Columns: []string{datasource.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interval.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.RemovedIntervalsIDs(); len(nodes) > 0 && !dsuo.mutation.IntervalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasource.IntervalsTable,
			Columns: []string{datasource.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.IntervalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasource.IntervalsTable,
			Columns: []string{datasource.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DataSource{config: dsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datasource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dsuo.mutation.done = true
	return _node, nil
}
