// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/datasource"
)

// DataSource is the model entity for the DataSource schema.
type DataSource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DataSourceQuery when eager-loading is set.
	Edges DataSourceEdges `json:"edges"`
}

// DataSourceEdges holds the relations/edges for other nodes in the graph.
type DataSourceEdges struct {
	// Intervals holds the value of the intervals edge.
	Intervals []*Interval `json:"intervals,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IntervalsOrErr returns the Intervals value or an error if the edge
// was not loaded in eager-loading.
func (e DataSourceEdges) IntervalsOrErr() ([]*Interval, error) {
	if e.loadedTypes[0] {
		return e.Intervals, nil
	}
	return nil, &NotLoadedError{edge: "intervals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DataSource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case datasource.FieldID:
			values[i] = new(sql.NullInt64)
		case datasource.FieldName, datasource.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DataSource", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DataSource fields.
func (ds *DataSource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case datasource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ds.ID = int(value.Int64)
		case datasource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ds.Name = value.String
			}
		case datasource.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				ds.Address = value.String
			}
		}
	}
	return nil
}

// QueryIntervals queries the "intervals" edge of the DataSource entity.
func (ds *DataSource) QueryIntervals() *IntervalQuery {
	return (&DataSourceClient{config: ds.config}).QueryIntervals(ds)
}

// Update returns a builder for updating this DataSource.
// Note that you need to call DataSource.Unwrap() before calling this method if this DataSource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ds *DataSource) Update() *DataSourceUpdateOne {
	return (&DataSourceClient{config: ds.config}).UpdateOne(ds)
}

// Unwrap unwraps the DataSource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ds *DataSource) Unwrap() *DataSource {
	_tx, ok := ds.config.driver.(*txDriver)
	if !ok {
		panic("ent: DataSource is not a transactional entity")
	}
	ds.config.driver = _tx.drv
	return ds
}

// String implements the fmt.Stringer.
func (ds *DataSource) String() string {
	var builder strings.Builder
	builder.WriteString("DataSource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ds.ID))
	builder.WriteString("name=")
	builder.WriteString(ds.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(ds.Address)
	builder.WriteByte(')')
	return builder.String()
}

// DataSources is a parsable slice of DataSource.
type DataSources []*DataSource

func (ds DataSources) config(cfg config) {
	for _i := range ds {
		ds[_i].config = cfg
	}
}
