// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/bargroup"
	"github.com/nathanhack/sibyl/ent/bartimerange"
	"github.com/nathanhack/sibyl/ent/interval"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// BarTimeRangeQuery is the builder for querying BarTimeRange entities.
type BarTimeRangeQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	inters       []Interceptor
	predicates   []predicate.BarTimeRange
	withInterval *IntervalQuery
	withGroups   *BarGroupQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BarTimeRangeQuery builder.
func (btrq *BarTimeRangeQuery) Where(ps ...predicate.BarTimeRange) *BarTimeRangeQuery {
	btrq.predicates = append(btrq.predicates, ps...)
	return btrq
}

// Limit the number of records to be returned by this query.
func (btrq *BarTimeRangeQuery) Limit(limit int) *BarTimeRangeQuery {
	btrq.limit = &limit
	return btrq
}

// Offset to start from.
func (btrq *BarTimeRangeQuery) Offset(offset int) *BarTimeRangeQuery {
	btrq.offset = &offset
	return btrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (btrq *BarTimeRangeQuery) Unique(unique bool) *BarTimeRangeQuery {
	btrq.unique = &unique
	return btrq
}

// Order specifies how the records should be ordered.
func (btrq *BarTimeRangeQuery) Order(o ...OrderFunc) *BarTimeRangeQuery {
	btrq.order = append(btrq.order, o...)
	return btrq
}

// QueryInterval chains the current query on the "interval" edge.
func (btrq *BarTimeRangeQuery) QueryInterval() *IntervalQuery {
	query := (&IntervalClient{config: btrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := btrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := btrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bartimerange.Table, bartimerange.FieldID, selector),
			sqlgraph.To(interval.Table, interval.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, bartimerange.IntervalTable, bartimerange.IntervalColumn),
		)
		fromU = sqlgraph.SetNeighbors(btrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroups chains the current query on the "groups" edge.
func (btrq *BarTimeRangeQuery) QueryGroups() *BarGroupQuery {
	query := (&BarGroupClient{config: btrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := btrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := btrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(bartimerange.Table, bartimerange.FieldID, selector),
			sqlgraph.To(bargroup.Table, bargroup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bartimerange.GroupsTable, bartimerange.GroupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(btrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BarTimeRange entity from the query.
// Returns a *NotFoundError when no BarTimeRange was found.
func (btrq *BarTimeRangeQuery) First(ctx context.Context) (*BarTimeRange, error) {
	nodes, err := btrq.Limit(1).All(newQueryContext(ctx, TypeBarTimeRange, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bartimerange.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (btrq *BarTimeRangeQuery) FirstX(ctx context.Context) *BarTimeRange {
	node, err := btrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BarTimeRange ID from the query.
// Returns a *NotFoundError when no BarTimeRange ID was found.
func (btrq *BarTimeRangeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = btrq.Limit(1).IDs(newQueryContext(ctx, TypeBarTimeRange, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bartimerange.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (btrq *BarTimeRangeQuery) FirstIDX(ctx context.Context) int {
	id, err := btrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BarTimeRange entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BarTimeRange entity is found.
// Returns a *NotFoundError when no BarTimeRange entities are found.
func (btrq *BarTimeRangeQuery) Only(ctx context.Context) (*BarTimeRange, error) {
	nodes, err := btrq.Limit(2).All(newQueryContext(ctx, TypeBarTimeRange, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bartimerange.Label}
	default:
		return nil, &NotSingularError{bartimerange.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (btrq *BarTimeRangeQuery) OnlyX(ctx context.Context) *BarTimeRange {
	node, err := btrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BarTimeRange ID in the query.
// Returns a *NotSingularError when more than one BarTimeRange ID is found.
// Returns a *NotFoundError when no entities are found.
func (btrq *BarTimeRangeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = btrq.Limit(2).IDs(newQueryContext(ctx, TypeBarTimeRange, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bartimerange.Label}
	default:
		err = &NotSingularError{bartimerange.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (btrq *BarTimeRangeQuery) OnlyIDX(ctx context.Context) int {
	id, err := btrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BarTimeRanges.
func (btrq *BarTimeRangeQuery) All(ctx context.Context) ([]*BarTimeRange, error) {
	ctx = newQueryContext(ctx, TypeBarTimeRange, "All")
	if err := btrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BarTimeRange, *BarTimeRangeQuery]()
	return withInterceptors[[]*BarTimeRange](ctx, btrq, qr, btrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (btrq *BarTimeRangeQuery) AllX(ctx context.Context) []*BarTimeRange {
	nodes, err := btrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BarTimeRange IDs.
func (btrq *BarTimeRangeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeBarTimeRange, "IDs")
	if err := btrq.Select(bartimerange.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (btrq *BarTimeRangeQuery) IDsX(ctx context.Context) []int {
	ids, err := btrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (btrq *BarTimeRangeQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeBarTimeRange, "Count")
	if err := btrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, btrq, querierCount[*BarTimeRangeQuery](), btrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (btrq *BarTimeRangeQuery) CountX(ctx context.Context) int {
	count, err := btrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (btrq *BarTimeRangeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeBarTimeRange, "Exist")
	switch _, err := btrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (btrq *BarTimeRangeQuery) ExistX(ctx context.Context) bool {
	exist, err := btrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BarTimeRangeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (btrq *BarTimeRangeQuery) Clone() *BarTimeRangeQuery {
	if btrq == nil {
		return nil
	}
	return &BarTimeRangeQuery{
		config:       btrq.config,
		limit:        btrq.limit,
		offset:       btrq.offset,
		order:        append([]OrderFunc{}, btrq.order...),
		inters:       append([]Interceptor{}, btrq.inters...),
		predicates:   append([]predicate.BarTimeRange{}, btrq.predicates...),
		withInterval: btrq.withInterval.Clone(),
		withGroups:   btrq.withGroups.Clone(),
		// clone intermediate query.
		sql:    btrq.sql.Clone(),
		path:   btrq.path,
		unique: btrq.unique,
	}
}

// WithInterval tells the query-builder to eager-load the nodes that are connected to
// the "interval" edge. The optional arguments are used to configure the query builder of the edge.
func (btrq *BarTimeRangeQuery) WithInterval(opts ...func(*IntervalQuery)) *BarTimeRangeQuery {
	query := (&IntervalClient{config: btrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	btrq.withInterval = query
	return btrq
}

// WithGroups tells the query-builder to eager-load the nodes that are connected to
// the "groups" edge. The optional arguments are used to configure the query builder of the edge.
func (btrq *BarTimeRangeQuery) WithGroups(opts ...func(*BarGroupQuery)) *BarTimeRangeQuery {
	query := (&BarGroupClient{config: btrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	btrq.withGroups = query
	return btrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Start time.Time `json:"start,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BarTimeRange.Query().
//		GroupBy(bartimerange.FieldStart).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (btrq *BarTimeRangeQuery) GroupBy(field string, fields ...string) *BarTimeRangeGroupBy {
	btrq.fields = append([]string{field}, fields...)
	grbuild := &BarTimeRangeGroupBy{build: btrq}
	grbuild.flds = &btrq.fields
	grbuild.label = bartimerange.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Start time.Time `json:"start,omitempty"`
//	}
//
//	client.BarTimeRange.Query().
//		Select(bartimerange.FieldStart).
//		Scan(ctx, &v)
func (btrq *BarTimeRangeQuery) Select(fields ...string) *BarTimeRangeSelect {
	btrq.fields = append(btrq.fields, fields...)
	sbuild := &BarTimeRangeSelect{BarTimeRangeQuery: btrq}
	sbuild.label = bartimerange.Label
	sbuild.flds, sbuild.scan = &btrq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BarTimeRangeSelect configured with the given aggregations.
func (btrq *BarTimeRangeQuery) Aggregate(fns ...AggregateFunc) *BarTimeRangeSelect {
	return btrq.Select().Aggregate(fns...)
}

func (btrq *BarTimeRangeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range btrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, btrq); err != nil {
				return err
			}
		}
	}
	for _, f := range btrq.fields {
		if !bartimerange.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if btrq.path != nil {
		prev, err := btrq.path(ctx)
		if err != nil {
			return err
		}
		btrq.sql = prev
	}
	return nil
}

func (btrq *BarTimeRangeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BarTimeRange, error) {
	var (
		nodes       = []*BarTimeRange{}
		_spec       = btrq.querySpec()
		loadedTypes = [2]bool{
			btrq.withInterval != nil,
			btrq.withGroups != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BarTimeRange).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BarTimeRange{config: btrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, btrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := btrq.withInterval; query != nil {
		if err := btrq.loadInterval(ctx, query, nodes, nil,
			func(n *BarTimeRange, e *Interval) { n.Edges.Interval = e }); err != nil {
			return nil, err
		}
	}
	if query := btrq.withGroups; query != nil {
		if err := btrq.loadGroups(ctx, query, nodes,
			func(n *BarTimeRange) { n.Edges.Groups = []*BarGroup{} },
			func(n *BarTimeRange, e *BarGroup) { n.Edges.Groups = append(n.Edges.Groups, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (btrq *BarTimeRangeQuery) loadInterval(ctx context.Context, query *IntervalQuery, nodes []*BarTimeRange, init func(*BarTimeRange), assign func(*BarTimeRange, *Interval)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*BarTimeRange)
	for i := range nodes {
		fk := nodes[i].IntervalID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(interval.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "interval_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (btrq *BarTimeRangeQuery) loadGroups(ctx context.Context, query *BarGroupQuery, nodes []*BarTimeRange, init func(*BarTimeRange), assign func(*BarTimeRange, *BarGroup)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*BarTimeRange)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.BarGroup(func(s *sql.Selector) {
		s.Where(sql.InValues(bartimerange.GroupsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TimeRangeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "time_range_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (btrq *BarTimeRangeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := btrq.querySpec()
	_spec.Node.Columns = btrq.fields
	if len(btrq.fields) > 0 {
		_spec.Unique = btrq.unique != nil && *btrq.unique
	}
	return sqlgraph.CountNodes(ctx, btrq.driver, _spec)
}

func (btrq *BarTimeRangeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bartimerange.Table,
			Columns: bartimerange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bartimerange.FieldID,
			},
		},
		From:   btrq.sql,
		Unique: true,
	}
	if unique := btrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := btrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bartimerange.FieldID)
		for i := range fields {
			if fields[i] != bartimerange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := btrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := btrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := btrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := btrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (btrq *BarTimeRangeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(btrq.driver.Dialect())
	t1 := builder.Table(bartimerange.Table)
	columns := btrq.fields
	if len(columns) == 0 {
		columns = bartimerange.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if btrq.sql != nil {
		selector = btrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if btrq.unique != nil && *btrq.unique {
		selector.Distinct()
	}
	for _, p := range btrq.predicates {
		p(selector)
	}
	for _, p := range btrq.order {
		p(selector)
	}
	if offset := btrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := btrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BarTimeRangeGroupBy is the group-by builder for BarTimeRange entities.
type BarTimeRangeGroupBy struct {
	selector
	build *BarTimeRangeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (btrgb *BarTimeRangeGroupBy) Aggregate(fns ...AggregateFunc) *BarTimeRangeGroupBy {
	btrgb.fns = append(btrgb.fns, fns...)
	return btrgb
}

// Scan applies the selector query and scans the result into the given value.
func (btrgb *BarTimeRangeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeBarTimeRange, "GroupBy")
	if err := btrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BarTimeRangeQuery, *BarTimeRangeGroupBy](ctx, btrgb.build, btrgb, btrgb.build.inters, v)
}

func (btrgb *BarTimeRangeGroupBy) sqlScan(ctx context.Context, root *BarTimeRangeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(btrgb.fns))
	for _, fn := range btrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*btrgb.flds)+len(btrgb.fns))
		for _, f := range *btrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*btrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := btrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BarTimeRangeSelect is the builder for selecting fields of BarTimeRange entities.
type BarTimeRangeSelect struct {
	*BarTimeRangeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (btrs *BarTimeRangeSelect) Aggregate(fns ...AggregateFunc) *BarTimeRangeSelect {
	btrs.fns = append(btrs.fns, fns...)
	return btrs
}

// Scan applies the selector query and scans the result into the given value.
func (btrs *BarTimeRangeSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeBarTimeRange, "Select")
	if err := btrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BarTimeRangeQuery, *BarTimeRangeSelect](ctx, btrs.BarTimeRangeQuery, btrs, btrs.inters, v)
}

func (btrs *BarTimeRangeSelect) sqlScan(ctx context.Context, root *BarTimeRangeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(btrs.fns))
	for _, fn := range btrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*btrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := btrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
