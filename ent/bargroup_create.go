// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/bargroup"
	"github.com/nathanhack/sibyl/ent/barrecord"
	"github.com/nathanhack/sibyl/ent/bartimerange"
)

// BarGroupCreate is the builder for creating a BarGroup entity.
type BarGroupCreate struct {
	config
	mutation *BarGroupMutation
	hooks    []Hook
}

// SetFirst sets the "first" field.
func (bgc *BarGroupCreate) SetFirst(t time.Time) *BarGroupCreate {
	bgc.mutation.SetFirst(t)
	return bgc
}

// SetLast sets the "last" field.
func (bgc *BarGroupCreate) SetLast(t time.Time) *BarGroupCreate {
	bgc.mutation.SetLast(t)
	return bgc
}

// SetCount sets the "count" field.
func (bgc *BarGroupCreate) SetCount(i int) *BarGroupCreate {
	bgc.mutation.SetCount(i)
	return bgc
}

// SetTimeRangeID sets the "time_range_id" field.
func (bgc *BarGroupCreate) SetTimeRangeID(i int) *BarGroupCreate {
	bgc.mutation.SetTimeRangeID(i)
	return bgc
}

// SetTimeRange sets the "time_range" edge to the BarTimeRange entity.
func (bgc *BarGroupCreate) SetTimeRange(b *BarTimeRange) *BarGroupCreate {
	return bgc.SetTimeRangeID(b.ID)
}

// AddRecordIDs adds the "records" edge to the BarRecord entity by IDs.
func (bgc *BarGroupCreate) AddRecordIDs(ids ...int) *BarGroupCreate {
	bgc.mutation.AddRecordIDs(ids...)
	return bgc
}

// AddRecords adds the "records" edges to the BarRecord entity.
func (bgc *BarGroupCreate) AddRecords(b ...*BarRecord) *BarGroupCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bgc.AddRecordIDs(ids...)
}

// Mutation returns the BarGroupMutation object of the builder.
func (bgc *BarGroupCreate) Mutation() *BarGroupMutation {
	return bgc.mutation
}

// Save creates the BarGroup in the database.
func (bgc *BarGroupCreate) Save(ctx context.Context) (*BarGroup, error) {
	return withHooks(ctx, bgc.sqlSave, bgc.mutation, bgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bgc *BarGroupCreate) SaveX(ctx context.Context) *BarGroup {
	v, err := bgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bgc *BarGroupCreate) Exec(ctx context.Context) error {
	_, err := bgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bgc *BarGroupCreate) ExecX(ctx context.Context) {
	if err := bgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bgc *BarGroupCreate) check() error {
	if _, ok := bgc.mutation.First(); !ok {
		return &ValidationError{Name: "first", err: errors.New(`ent: missing required field "BarGroup.first"`)}
	}
	if _, ok := bgc.mutation.Last(); !ok {
		return &ValidationError{Name: "last", err: errors.New(`ent: missing required field "BarGroup.last"`)}
	}
	if _, ok := bgc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "BarGroup.count"`)}
	}
	if _, ok := bgc.mutation.TimeRangeID(); !ok {
		return &ValidationError{Name: "time_range_id", err: errors.New(`ent: missing required field "BarGroup.time_range_id"`)}
	}
	if len(bgc.mutation.TimeRangeIDs()) == 0 {
		return &ValidationError{Name: "time_range", err: errors.New(`ent: missing required edge "BarGroup.time_range"`)}
	}
	return nil
}

func (bgc *BarGroupCreate) sqlSave(ctx context.Context) (*BarGroup, error) {
	if err := bgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bgc.mutation.id = &_node.ID
	bgc.mutation.done = true
	return _node, nil
}

func (bgc *BarGroupCreate) createSpec() (*BarGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &BarGroup{config: bgc.config}
		_spec = sqlgraph.NewCreateSpec(bargroup.Table, sqlgraph.NewFieldSpec(bargroup.FieldID, field.TypeInt))
	)
	if value, ok := bgc.mutation.First(); ok {
		_spec.SetField(bargroup.FieldFirst, field.TypeTime, value)
		_node.First = value
	}
	if value, ok := bgc.mutation.Last(); ok {
		_spec.SetField(bargroup.FieldLast, field.TypeTime, value)
		_node.Last = value
	}
	if value, ok := bgc.mutation.Count(); ok {
		_spec.SetField(bargroup.FieldCount, field.TypeInt, value)
		_node.Count = value
	}
	if nodes := bgc.mutation.TimeRangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bargroup.TimeRangeTable,
			Columns: []string{bargroup.TimeRangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bartimerange.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TimeRangeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bgc.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bargroup.RecordsTable,
			Columns: []string{bargroup.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(barrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BarGroupCreateBulk is the builder for creating many BarGroup entities in bulk.
type BarGroupCreateBulk struct {
	config
	err      error
	builders []*BarGroupCreate
}

// Save creates the BarGroup entities in the database.
func (bgcb *BarGroupCreateBulk) Save(ctx context.Context) ([]*BarGroup, error) {
	if bgcb.err != nil {
		return nil, bgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bgcb.builders))
	nodes := make([]*BarGroup, len(bgcb.builders))
	mutators := make([]Mutator, len(bgcb.builders))
	for i := range bgcb.builders {
		func(i int, root context.Context) {
			builder := bgcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BarGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bgcb *BarGroupCreateBulk) SaveX(ctx context.Context) []*BarGroup {
	v, err := bgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bgcb *BarGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := bgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bgcb *BarGroupCreateBulk) ExecX(ctx context.Context) {
	if err := bgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
