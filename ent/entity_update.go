// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/dividend"
	"github.com/nathanhack/sibyl/ent/entity"
	"github.com/nathanhack/sibyl/ent/exchange"
	"github.com/nathanhack/sibyl/ent/financial"
	"github.com/nathanhack/sibyl/ent/interval"
	"github.com/nathanhack/sibyl/ent/predicate"
	"github.com/nathanhack/sibyl/ent/split"
)

// EntityUpdate is the builder for updating Entity entities.
type EntityUpdate struct {
	config
	hooks    []Hook
	mutation *EntityMutation
}

// Where appends a list predicates to the EntityUpdate builder.
func (eu *EntityUpdate) Where(ps ...predicate.Entity) *EntityUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetActive sets the "active" field.
func (eu *EntityUpdate) SetActive(b bool) *EntityUpdate {
	eu.mutation.SetActive(b)
	return eu
}

// SetTicker sets the "ticker" field.
func (eu *EntityUpdate) SetTicker(s string) *EntityUpdate {
	eu.mutation.SetTicker(s)
	return eu
}

// SetName sets the "name" field.
func (eu *EntityUpdate) SetName(s string) *EntityUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetDescription sets the "description" field.
func (eu *EntityUpdate) SetDescription(s string) *EntityUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetListDate sets the "list_date" field.
func (eu *EntityUpdate) SetListDate(t time.Time) *EntityUpdate {
	eu.mutation.SetListDate(t)
	return eu
}

// SetDelisted sets the "delisted" field.
func (eu *EntityUpdate) SetDelisted(t time.Time) *EntityUpdate {
	eu.mutation.SetDelisted(t)
	return eu
}

// SetNillableDelisted sets the "delisted" field if the given value is not nil.
func (eu *EntityUpdate) SetNillableDelisted(t *time.Time) *EntityUpdate {
	if t != nil {
		eu.SetDelisted(*t)
	}
	return eu
}

// ClearDelisted clears the value of the "delisted" field.
func (eu *EntityUpdate) ClearDelisted() *EntityUpdate {
	eu.mutation.ClearDelisted()
	return eu
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by IDs.
func (eu *EntityUpdate) AddExchangeIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddExchangeIDs(ids...)
	return eu
}

// AddExchanges adds the "exchanges" edges to the Exchange entity.
func (eu *EntityUpdate) AddExchanges(e ...*Exchange) *EntityUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExchangeIDs(ids...)
}

// AddIntervalIDs adds the "intervals" edge to the Interval entity by IDs.
func (eu *EntityUpdate) AddIntervalIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddIntervalIDs(ids...)
	return eu
}

// AddIntervals adds the "intervals" edges to the Interval entity.
func (eu *EntityUpdate) AddIntervals(i ...*Interval) *EntityUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddIntervalIDs(ids...)
}

// AddDividendIDs adds the "dividends" edge to the Dividend entity by IDs.
func (eu *EntityUpdate) AddDividendIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddDividendIDs(ids...)
	return eu
}

// AddDividends adds the "dividends" edges to the Dividend entity.
func (eu *EntityUpdate) AddDividends(d ...*Dividend) *EntityUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDividendIDs(ids...)
}

// AddSplitIDs adds the "splits" edge to the Split entity by IDs.
func (eu *EntityUpdate) AddSplitIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddSplitIDs(ids...)
	return eu
}

// AddSplits adds the "splits" edges to the Split entity.
func (eu *EntityUpdate) AddSplits(s ...*Split) *EntityUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddSplitIDs(ids...)
}

// AddFinancialIDs adds the "financials" edge to the Financial entity by IDs.
func (eu *EntityUpdate) AddFinancialIDs(ids ...int) *EntityUpdate {
	eu.mutation.AddFinancialIDs(ids...)
	return eu
}

// AddFinancials adds the "financials" edges to the Financial entity.
func (eu *EntityUpdate) AddFinancials(f ...*Financial) *EntityUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddFinancialIDs(ids...)
}

// Mutation returns the EntityMutation object of the builder.
func (eu *EntityUpdate) Mutation() *EntityMutation {
	return eu.mutation
}

// ClearExchanges clears all "exchanges" edges to the Exchange entity.
func (eu *EntityUpdate) ClearExchanges() *EntityUpdate {
	eu.mutation.ClearExchanges()
	return eu
}

// RemoveExchangeIDs removes the "exchanges" edge to Exchange entities by IDs.
func (eu *EntityUpdate) RemoveExchangeIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveExchangeIDs(ids...)
	return eu
}

// RemoveExchanges removes "exchanges" edges to Exchange entities.
func (eu *EntityUpdate) RemoveExchanges(e ...*Exchange) *EntityUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExchangeIDs(ids...)
}

// ClearIntervals clears all "intervals" edges to the Interval entity.
func (eu *EntityUpdate) ClearIntervals() *EntityUpdate {
	eu.mutation.ClearIntervals()
	return eu
}

// RemoveIntervalIDs removes the "intervals" edge to Interval entities by IDs.
func (eu *EntityUpdate) RemoveIntervalIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveIntervalIDs(ids...)
	return eu
}

// RemoveIntervals removes "intervals" edges to Interval entities.
func (eu *EntityUpdate) RemoveIntervals(i ...*Interval) *EntityUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveIntervalIDs(ids...)
}

// ClearDividends clears all "dividends" edges to the Dividend entity.
func (eu *EntityUpdate) ClearDividends() *EntityUpdate {
	eu.mutation.ClearDividends()
	return eu
}

// RemoveDividendIDs removes the "dividends" edge to Dividend entities by IDs.
func (eu *EntityUpdate) RemoveDividendIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveDividendIDs(ids...)
	return eu
}

// RemoveDividends removes "dividends" edges to Dividend entities.
func (eu *EntityUpdate) RemoveDividends(d ...*Dividend) *EntityUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDividendIDs(ids...)
}

// ClearSplits clears all "splits" edges to the Split entity.
func (eu *EntityUpdate) ClearSplits() *EntityUpdate {
	eu.mutation.ClearSplits()
	return eu
}

// RemoveSplitIDs removes the "splits" edge to Split entities by IDs.
func (eu *EntityUpdate) RemoveSplitIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveSplitIDs(ids...)
	return eu
}

// RemoveSplits removes "splits" edges to Split entities.
func (eu *EntityUpdate) RemoveSplits(s ...*Split) *EntityUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveSplitIDs(ids...)
}

// ClearFinancials clears all "financials" edges to the Financial entity.
func (eu *EntityUpdate) ClearFinancials() *EntityUpdate {
	eu.mutation.ClearFinancials()
	return eu
}

// RemoveFinancialIDs removes the "financials" edge to Financial entities by IDs.
func (eu *EntityUpdate) RemoveFinancialIDs(ids ...int) *EntityUpdate {
	eu.mutation.RemoveFinancialIDs(ids...)
	return eu
}

// RemoveFinancials removes "financials" edges to Financial entities.
func (eu *EntityUpdate) RemoveFinancials(f ...*Financial) *EntityUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveFinancialIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EntityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EntityMutation](ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EntityUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EntityUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EntityUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EntityUpdate) check() error {
	if v, ok := eu.mutation.Ticker(); ok {
		if err := entity.TickerValidator(v); err != nil {
			return &ValidationError{Name: "ticker", err: fmt.Errorf(`ent: validator failed for field "Entity.ticker": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Name(); ok {
		if err := entity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Entity.name": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Description(); ok {
		if err := entity.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Entity.description": %w`, err)}
		}
	}
	return nil
}

func (eu *EntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entity.Table,
			Columns: entity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entity.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Active(); ok {
		_spec.SetField(entity.FieldActive, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Ticker(); ok {
		_spec.SetField(entity.FieldTicker, field.TypeString, value)
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(entity.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(entity.FieldDescription, field.TypeString, value)
	}
	if value, ok := eu.mutation.ListDate(); ok {
		_spec.SetField(entity.FieldListDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Delisted(); ok {
		_spec.SetField(entity.FieldDelisted, field.TypeTime, value)
	}
	if eu.mutation.DelistedCleared() {
		_spec.ClearField(entity.FieldDelisted, field.TypeTime)
	}
	if eu.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ExchangesTable,
			Columns: entity.ExchangesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExchangesIDs(); len(nodes) > 0 && !eu.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ExchangesTable,
			Columns: entity.ExchangesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExchangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ExchangesTable,
			Columns: entity.ExchangesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.IntervalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.IntervalsTable,
			Columns: []string{entity.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: interval.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedIntervalsIDs(); len(nodes) > 0 && !eu.mutation.IntervalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.IntervalsTable,
			Columns: []string{entity.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: interval.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.IntervalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.IntervalsTable,
			Columns: []string{entity.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: interval.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DividendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DividendsTable,
			Columns: entity.DividendsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dividend.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDividendsIDs(); len(nodes) > 0 && !eu.mutation.DividendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DividendsTable,
			Columns: entity.DividendsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dividend.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DividendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DividendsTable,
			Columns: entity.DividendsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dividend.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SplitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.SplitsTable,
			Columns: []string{entity.SplitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: split.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSplitsIDs(); len(nodes) > 0 && !eu.mutation.SplitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.SplitsTable,
			Columns: []string{entity.SplitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: split.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SplitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.SplitsTable,
			Columns: []string{entity.SplitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: split.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FinancialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FinancialsTable,
			Columns: entity.FinancialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: financial.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedFinancialsIDs(); len(nodes) > 0 && !eu.mutation.FinancialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FinancialsTable,
			Columns: entity.FinancialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: financial.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FinancialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FinancialsTable,
			Columns: entity.FinancialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: financial.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EntityUpdateOne is the builder for updating a single Entity entity.
type EntityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntityMutation
}

// SetActive sets the "active" field.
func (euo *EntityUpdateOne) SetActive(b bool) *EntityUpdateOne {
	euo.mutation.SetActive(b)
	return euo
}

// SetTicker sets the "ticker" field.
func (euo *EntityUpdateOne) SetTicker(s string) *EntityUpdateOne {
	euo.mutation.SetTicker(s)
	return euo
}

// SetName sets the "name" field.
func (euo *EntityUpdateOne) SetName(s string) *EntityUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetDescription sets the "description" field.
func (euo *EntityUpdateOne) SetDescription(s string) *EntityUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetListDate sets the "list_date" field.
func (euo *EntityUpdateOne) SetListDate(t time.Time) *EntityUpdateOne {
	euo.mutation.SetListDate(t)
	return euo
}

// SetDelisted sets the "delisted" field.
func (euo *EntityUpdateOne) SetDelisted(t time.Time) *EntityUpdateOne {
	euo.mutation.SetDelisted(t)
	return euo
}

// SetNillableDelisted sets the "delisted" field if the given value is not nil.
func (euo *EntityUpdateOne) SetNillableDelisted(t *time.Time) *EntityUpdateOne {
	if t != nil {
		euo.SetDelisted(*t)
	}
	return euo
}

// ClearDelisted clears the value of the "delisted" field.
func (euo *EntityUpdateOne) ClearDelisted() *EntityUpdateOne {
	euo.mutation.ClearDelisted()
	return euo
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by IDs.
func (euo *EntityUpdateOne) AddExchangeIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddExchangeIDs(ids...)
	return euo
}

// AddExchanges adds the "exchanges" edges to the Exchange entity.
func (euo *EntityUpdateOne) AddExchanges(e ...*Exchange) *EntityUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExchangeIDs(ids...)
}

// AddIntervalIDs adds the "intervals" edge to the Interval entity by IDs.
func (euo *EntityUpdateOne) AddIntervalIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddIntervalIDs(ids...)
	return euo
}

// AddIntervals adds the "intervals" edges to the Interval entity.
func (euo *EntityUpdateOne) AddIntervals(i ...*Interval) *EntityUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddIntervalIDs(ids...)
}

// AddDividendIDs adds the "dividends" edge to the Dividend entity by IDs.
func (euo *EntityUpdateOne) AddDividendIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddDividendIDs(ids...)
	return euo
}

// AddDividends adds the "dividends" edges to the Dividend entity.
func (euo *EntityUpdateOne) AddDividends(d ...*Dividend) *EntityUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDividendIDs(ids...)
}

// AddSplitIDs adds the "splits" edge to the Split entity by IDs.
func (euo *EntityUpdateOne) AddSplitIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddSplitIDs(ids...)
	return euo
}

// AddSplits adds the "splits" edges to the Split entity.
func (euo *EntityUpdateOne) AddSplits(s ...*Split) *EntityUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddSplitIDs(ids...)
}

// AddFinancialIDs adds the "financials" edge to the Financial entity by IDs.
func (euo *EntityUpdateOne) AddFinancialIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.AddFinancialIDs(ids...)
	return euo
}

// AddFinancials adds the "financials" edges to the Financial entity.
func (euo *EntityUpdateOne) AddFinancials(f ...*Financial) *EntityUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddFinancialIDs(ids...)
}

// Mutation returns the EntityMutation object of the builder.
func (euo *EntityUpdateOne) Mutation() *EntityMutation {
	return euo.mutation
}

// ClearExchanges clears all "exchanges" edges to the Exchange entity.
func (euo *EntityUpdateOne) ClearExchanges() *EntityUpdateOne {
	euo.mutation.ClearExchanges()
	return euo
}

// RemoveExchangeIDs removes the "exchanges" edge to Exchange entities by IDs.
func (euo *EntityUpdateOne) RemoveExchangeIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveExchangeIDs(ids...)
	return euo
}

// RemoveExchanges removes "exchanges" edges to Exchange entities.
func (euo *EntityUpdateOne) RemoveExchanges(e ...*Exchange) *EntityUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExchangeIDs(ids...)
}

// ClearIntervals clears all "intervals" edges to the Interval entity.
func (euo *EntityUpdateOne) ClearIntervals() *EntityUpdateOne {
	euo.mutation.ClearIntervals()
	return euo
}

// RemoveIntervalIDs removes the "intervals" edge to Interval entities by IDs.
func (euo *EntityUpdateOne) RemoveIntervalIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveIntervalIDs(ids...)
	return euo
}

// RemoveIntervals removes "intervals" edges to Interval entities.
func (euo *EntityUpdateOne) RemoveIntervals(i ...*Interval) *EntityUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveIntervalIDs(ids...)
}

// ClearDividends clears all "dividends" edges to the Dividend entity.
func (euo *EntityUpdateOne) ClearDividends() *EntityUpdateOne {
	euo.mutation.ClearDividends()
	return euo
}

// RemoveDividendIDs removes the "dividends" edge to Dividend entities by IDs.
func (euo *EntityUpdateOne) RemoveDividendIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveDividendIDs(ids...)
	return euo
}

// RemoveDividends removes "dividends" edges to Dividend entities.
func (euo *EntityUpdateOne) RemoveDividends(d ...*Dividend) *EntityUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDividendIDs(ids...)
}

// ClearSplits clears all "splits" edges to the Split entity.
func (euo *EntityUpdateOne) ClearSplits() *EntityUpdateOne {
	euo.mutation.ClearSplits()
	return euo
}

// RemoveSplitIDs removes the "splits" edge to Split entities by IDs.
func (euo *EntityUpdateOne) RemoveSplitIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveSplitIDs(ids...)
	return euo
}

// RemoveSplits removes "splits" edges to Split entities.
func (euo *EntityUpdateOne) RemoveSplits(s ...*Split) *EntityUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveSplitIDs(ids...)
}

// ClearFinancials clears all "financials" edges to the Financial entity.
func (euo *EntityUpdateOne) ClearFinancials() *EntityUpdateOne {
	euo.mutation.ClearFinancials()
	return euo
}

// RemoveFinancialIDs removes the "financials" edge to Financial entities by IDs.
func (euo *EntityUpdateOne) RemoveFinancialIDs(ids ...int) *EntityUpdateOne {
	euo.mutation.RemoveFinancialIDs(ids...)
	return euo
}

// RemoveFinancials removes "financials" edges to Financial entities.
func (euo *EntityUpdateOne) RemoveFinancials(f ...*Financial) *EntityUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveFinancialIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EntityUpdateOne) Select(field string, fields ...string) *EntityUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Entity entity.
func (euo *EntityUpdateOne) Save(ctx context.Context) (*Entity, error) {
	return withHooks[*Entity, EntityMutation](ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EntityUpdateOne) SaveX(ctx context.Context) *Entity {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EntityUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EntityUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EntityUpdateOne) check() error {
	if v, ok := euo.mutation.Ticker(); ok {
		if err := entity.TickerValidator(v); err != nil {
			return &ValidationError{Name: "ticker", err: fmt.Errorf(`ent: validator failed for field "Entity.ticker": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Name(); ok {
		if err := entity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Entity.name": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Description(); ok {
		if err := entity.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Entity.description": %w`, err)}
		}
	}
	return nil
}

func (euo *EntityUpdateOne) sqlSave(ctx context.Context) (_node *Entity, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   entity.Table,
			Columns: entity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: entity.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Entity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entity.FieldID)
		for _, f := range fields {
			if !entity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Active(); ok {
		_spec.SetField(entity.FieldActive, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Ticker(); ok {
		_spec.SetField(entity.FieldTicker, field.TypeString, value)
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(entity.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(entity.FieldDescription, field.TypeString, value)
	}
	if value, ok := euo.mutation.ListDate(); ok {
		_spec.SetField(entity.FieldListDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Delisted(); ok {
		_spec.SetField(entity.FieldDelisted, field.TypeTime, value)
	}
	if euo.mutation.DelistedCleared() {
		_spec.ClearField(entity.FieldDelisted, field.TypeTime)
	}
	if euo.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ExchangesTable,
			Columns: entity.ExchangesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExchangesIDs(); len(nodes) > 0 && !euo.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ExchangesTable,
			Columns: entity.ExchangesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExchangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ExchangesTable,
			Columns: entity.ExchangesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: exchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.IntervalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.IntervalsTable,
			Columns: []string{entity.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: interval.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedIntervalsIDs(); len(nodes) > 0 && !euo.mutation.IntervalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.IntervalsTable,
			Columns: []string{entity.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: interval.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.IntervalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.IntervalsTable,
			Columns: []string{entity.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: interval.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DividendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DividendsTable,
			Columns: entity.DividendsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dividend.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDividendsIDs(); len(nodes) > 0 && !euo.mutation.DividendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DividendsTable,
			Columns: entity.DividendsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dividend.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DividendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DividendsTable,
			Columns: entity.DividendsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: dividend.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SplitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.SplitsTable,
			Columns: []string{entity.SplitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: split.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSplitsIDs(); len(nodes) > 0 && !euo.mutation.SplitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.SplitsTable,
			Columns: []string{entity.SplitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: split.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SplitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.SplitsTable,
			Columns: []string{entity.SplitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: split.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FinancialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FinancialsTable,
			Columns: entity.FinancialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: financial.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedFinancialsIDs(); len(nodes) > 0 && !euo.mutation.FinancialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FinancialsTable,
			Columns: entity.FinancialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: financial.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FinancialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FinancialsTable,
			Columns: entity.FinancialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: financial.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Entity{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
