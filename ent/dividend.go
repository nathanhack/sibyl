// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/dividend"
)

// Dividend is the model entity for the Dividend schema.
type Dividend struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CashAmount holds the value of the "cash_amount" field.
	CashAmount float64 `json:"cash_amount,omitempty"`
	// DeclarationDate holds the value of the "declaration_date" field.
	DeclarationDate time.Time `json:"declaration_date,omitempty"`
	// DividendType holds the value of the "dividend_type" field.
	DividendType dividend.DividendType `json:"dividend_type,omitempty"`
	// ExDividendDate holds the value of the "ex_dividend_date" field.
	ExDividendDate time.Time `json:"ex_dividend_date,omitempty"`
	// Frequency holds the value of the "frequency" field.
	Frequency int `json:"frequency,omitempty"`
	// RecordDate holds the value of the "record_date" field.
	RecordDate time.Time `json:"record_date,omitempty"`
	// PayDate holds the value of the "pay_date" field.
	PayDate time.Time `json:"pay_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DividendQuery when eager-loading is set.
	Edges DividendEdges `json:"edges"`
}

// DividendEdges holds the relations/edges for other nodes in the graph.
type DividendEdges struct {
	// Stock holds the value of the stock edge.
	Stock []*Entity `json:"stock,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StockOrErr returns the Stock value or an error if the edge
// was not loaded in eager-loading.
func (e DividendEdges) StockOrErr() ([]*Entity, error) {
	if e.loadedTypes[0] {
		return e.Stock, nil
	}
	return nil, &NotLoadedError{edge: "stock"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dividend) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dividend.FieldCashAmount:
			values[i] = new(sql.NullFloat64)
		case dividend.FieldID, dividend.FieldFrequency:
			values[i] = new(sql.NullInt64)
		case dividend.FieldDividendType:
			values[i] = new(sql.NullString)
		case dividend.FieldDeclarationDate, dividend.FieldExDividendDate, dividend.FieldRecordDate, dividend.FieldPayDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dividend", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dividend fields.
func (d *Dividend) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dividend.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case dividend.FieldCashAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cash_amount", values[i])
			} else if value.Valid {
				d.CashAmount = value.Float64
			}
		case dividend.FieldDeclarationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field declaration_date", values[i])
			} else if value.Valid {
				d.DeclarationDate = value.Time
			}
		case dividend.FieldDividendType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dividend_type", values[i])
			} else if value.Valid {
				d.DividendType = dividend.DividendType(value.String)
			}
		case dividend.FieldExDividendDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ex_dividend_date", values[i])
			} else if value.Valid {
				d.ExDividendDate = value.Time
			}
		case dividend.FieldFrequency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field frequency", values[i])
			} else if value.Valid {
				d.Frequency = int(value.Int64)
			}
		case dividend.FieldRecordDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field record_date", values[i])
			} else if value.Valid {
				d.RecordDate = value.Time
			}
		case dividend.FieldPayDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field pay_date", values[i])
			} else if value.Valid {
				d.PayDate = value.Time
			}
		}
	}
	return nil
}

// QueryStock queries the "stock" edge of the Dividend entity.
func (d *Dividend) QueryStock() *EntityQuery {
	return (&DividendClient{config: d.config}).QueryStock(d)
}

// Update returns a builder for updating this Dividend.
// Note that you need to call Dividend.Unwrap() before calling this method if this Dividend
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dividend) Update() *DividendUpdateOne {
	return (&DividendClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Dividend entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dividend) Unwrap() *Dividend {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dividend is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dividend) String() string {
	var builder strings.Builder
	builder.WriteString("Dividend(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("cash_amount=")
	builder.WriteString(fmt.Sprintf("%v", d.CashAmount))
	builder.WriteString(", ")
	builder.WriteString("declaration_date=")
	builder.WriteString(d.DeclarationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("dividend_type=")
	builder.WriteString(fmt.Sprintf("%v", d.DividendType))
	builder.WriteString(", ")
	builder.WriteString("ex_dividend_date=")
	builder.WriteString(d.ExDividendDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("frequency=")
	builder.WriteString(fmt.Sprintf("%v", d.Frequency))
	builder.WriteString(", ")
	builder.WriteString("record_date=")
	builder.WriteString(d.RecordDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("pay_date=")
	builder.WriteString(d.PayDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Dividends is a parsable slice of Dividend.
type Dividends []*Dividend

func (d Dividends) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
