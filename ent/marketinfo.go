// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/marketinfo"
)

// MarketInfo is the model entity for the MarketInfo schema.
type MarketInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// HoursStart holds the value of the "hours_start" field.
	HoursStart time.Time `json:"hours_start,omitempty"`
	// HoursEnd holds the value of the "hours_end" field.
	HoursEnd time.Time `json:"hours_end,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MarketInfoQuery when eager-loading is set.
	Edges        MarketInfoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MarketInfoEdges holds the relations/edges for other nodes in the graph.
type MarketInfoEdges struct {
	// Hours holds the value of the hours edge.
	Hours []*MarketHours `json:"hours,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HoursOrErr returns the Hours value or an error if the edge
// was not loaded in eager-loading.
func (e MarketInfoEdges) HoursOrErr() ([]*MarketHours, error) {
	if e.loadedTypes[0] {
		return e.Hours, nil
	}
	return nil, &NotLoadedError{edge: "hours"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MarketInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case marketinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case marketinfo.FieldHoursStart, marketinfo.FieldHoursEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MarketInfo fields.
func (mi *MarketInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case marketinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mi.ID = int(value.Int64)
		case marketinfo.FieldHoursStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field hours_start", values[i])
			} else if value.Valid {
				mi.HoursStart = value.Time
			}
		case marketinfo.FieldHoursEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field hours_end", values[i])
			} else if value.Valid {
				mi.HoursEnd = value.Time
			}
		default:
			mi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MarketInfo.
// This includes values selected through modifiers, order, etc.
func (mi *MarketInfo) Value(name string) (ent.Value, error) {
	return mi.selectValues.Get(name)
}

// QueryHours queries the "hours" edge of the MarketInfo entity.
func (mi *MarketInfo) QueryHours() *MarketHoursQuery {
	return NewMarketInfoClient(mi.config).QueryHours(mi)
}

// Update returns a builder for updating this MarketInfo.
// Note that you need to call MarketInfo.Unwrap() before calling this method if this MarketInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (mi *MarketInfo) Update() *MarketInfoUpdateOne {
	return NewMarketInfoClient(mi.config).UpdateOne(mi)
}

// Unwrap unwraps the MarketInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mi *MarketInfo) Unwrap() *MarketInfo {
	_tx, ok := mi.config.driver.(*txDriver)
	if !ok {
		panic("ent: MarketInfo is not a transactional entity")
	}
	mi.config.driver = _tx.drv
	return mi
}

// String implements the fmt.Stringer.
func (mi *MarketInfo) String() string {
	var builder strings.Builder
	builder.WriteString("MarketInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mi.ID))
	builder.WriteString("hours_start=")
	builder.WriteString(mi.HoursStart.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("hours_end=")
	builder.WriteString(mi.HoursEnd.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MarketInfos is a parsable slice of MarketInfo.
type MarketInfos []*MarketInfo
