// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/entity"
)

// Entity is the model entity for the Entity schema.
type Entity struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Ticker holds the value of the "ticker" field.
	Ticker string `json:"ticker,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ListDate holds the value of the "list_date" field.
	ListDate time.Time `json:"list_date,omitempty"`
	// Options holds the value of the "options" field.
	Options bool `json:"options,omitempty"`
	// Tradable holds the value of the "tradable" field.
	Tradable bool `json:"tradable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntityQuery when eager-loading is set.
	Edges        EntityEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EntityEdges holds the relations/edges for other nodes in the graph.
type EntityEdges struct {
	// Exchanges holds the value of the exchanges edge.
	Exchanges []*Exchange `json:"exchanges,omitempty"`
	// Intervals holds the value of the intervals edge.
	Intervals []*Interval `json:"intervals,omitempty"`
	// Dividends holds the value of the dividends edge.
	Dividends []*Dividend `json:"dividends,omitempty"`
	// Splits holds the value of the splits edge.
	Splits []*Split `json:"splits,omitempty"`
	// Financials holds the value of the financials edge.
	Financials []*Financial `json:"financials,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// ExchangesOrErr returns the Exchanges value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) ExchangesOrErr() ([]*Exchange, error) {
	if e.loadedTypes[0] {
		return e.Exchanges, nil
	}
	return nil, &NotLoadedError{edge: "exchanges"}
}

// IntervalsOrErr returns the Intervals value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) IntervalsOrErr() ([]*Interval, error) {
	if e.loadedTypes[1] {
		return e.Intervals, nil
	}
	return nil, &NotLoadedError{edge: "intervals"}
}

// DividendsOrErr returns the Dividends value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) DividendsOrErr() ([]*Dividend, error) {
	if e.loadedTypes[2] {
		return e.Dividends, nil
	}
	return nil, &NotLoadedError{edge: "dividends"}
}

// SplitsOrErr returns the Splits value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) SplitsOrErr() ([]*Split, error) {
	if e.loadedTypes[3] {
		return e.Splits, nil
	}
	return nil, &NotLoadedError{edge: "splits"}
}

// FinancialsOrErr returns the Financials value or an error if the edge
// was not loaded in eager-loading.
func (e EntityEdges) FinancialsOrErr() ([]*Financial, error) {
	if e.loadedTypes[4] {
		return e.Financials, nil
	}
	return nil, &NotLoadedError{edge: "financials"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Entity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entity.FieldActive, entity.FieldOptions, entity.FieldTradable:
			values[i] = new(sql.NullBool)
		case entity.FieldID:
			values[i] = new(sql.NullInt64)
		case entity.FieldTicker, entity.FieldName, entity.FieldDescription:
			values[i] = new(sql.NullString)
		case entity.FieldListDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Entity fields.
func (e *Entity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entity.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case entity.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				e.Active = value.Bool
			}
		case entity.FieldTicker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticker", values[i])
			} else if value.Valid {
				e.Ticker = value.String
			}
		case entity.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case entity.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case entity.FieldListDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field list_date", values[i])
			} else if value.Valid {
				e.ListDate = value.Time
			}
		case entity.FieldOptions:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field options", values[i])
			} else if value.Valid {
				e.Options = value.Bool
			}
		case entity.FieldTradable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field tradable", values[i])
			} else if value.Valid {
				e.Tradable = value.Bool
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Entity.
// This includes values selected through modifiers, order, etc.
func (e *Entity) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryExchanges queries the "exchanges" edge of the Entity entity.
func (e *Entity) QueryExchanges() *ExchangeQuery {
	return NewEntityClient(e.config).QueryExchanges(e)
}

// QueryIntervals queries the "intervals" edge of the Entity entity.
func (e *Entity) QueryIntervals() *IntervalQuery {
	return NewEntityClient(e.config).QueryIntervals(e)
}

// QueryDividends queries the "dividends" edge of the Entity entity.
func (e *Entity) QueryDividends() *DividendQuery {
	return NewEntityClient(e.config).QueryDividends(e)
}

// QuerySplits queries the "splits" edge of the Entity entity.
func (e *Entity) QuerySplits() *SplitQuery {
	return NewEntityClient(e.config).QuerySplits(e)
}

// QueryFinancials queries the "financials" edge of the Entity entity.
func (e *Entity) QueryFinancials() *FinancialQuery {
	return NewEntityClient(e.config).QueryFinancials(e)
}

// Update returns a builder for updating this Entity.
// Note that you need to call Entity.Unwrap() before calling this method if this Entity
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Entity) Update() *EntityUpdateOne {
	return NewEntityClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Entity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Entity) Unwrap() *Entity {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Entity is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Entity) String() string {
	var builder strings.Builder
	builder.WriteString("Entity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", e.Active))
	builder.WriteString(", ")
	builder.WriteString("ticker=")
	builder.WriteString(e.Ticker)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("list_date=")
	builder.WriteString(e.ListDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("options=")
	builder.WriteString(fmt.Sprintf("%v", e.Options))
	builder.WriteString(", ")
	builder.WriteString("tradable=")
	builder.WriteString(fmt.Sprintf("%v", e.Tradable))
	builder.WriteByte(')')
	return builder.String()
}

// Entities is a parsable slice of Entity.
type Entities []*Entity
