// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/exchange"
	"github.com/nathanhack/sibyl/ent/predicate"
	"github.com/nathanhack/sibyl/ent/tradecondition"
	"github.com/nathanhack/sibyl/ent/tradecorrection"
	"github.com/nathanhack/sibyl/ent/traderecord"
	"github.com/nathanhack/sibyl/ent/tradetimerange"
)

// TradeRecordQuery is the builder for querying TradeRecord entities.
type TradeRecordQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	inters         []Interceptor
	predicates     []predicate.TradeRecord
	withTimeRange  *TradeTimeRangeQuery
	withConditions *TradeConditionQuery
	withCorrection *TradeCorrectionQuery
	withExchange   *ExchangeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TradeRecordQuery builder.
func (trq *TradeRecordQuery) Where(ps ...predicate.TradeRecord) *TradeRecordQuery {
	trq.predicates = append(trq.predicates, ps...)
	return trq
}

// Limit the number of records to be returned by this query.
func (trq *TradeRecordQuery) Limit(limit int) *TradeRecordQuery {
	trq.limit = &limit
	return trq
}

// Offset to start from.
func (trq *TradeRecordQuery) Offset(offset int) *TradeRecordQuery {
	trq.offset = &offset
	return trq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (trq *TradeRecordQuery) Unique(unique bool) *TradeRecordQuery {
	trq.unique = &unique
	return trq
}

// Order specifies how the records should be ordered.
func (trq *TradeRecordQuery) Order(o ...OrderFunc) *TradeRecordQuery {
	trq.order = append(trq.order, o...)
	return trq
}

// QueryTimeRange chains the current query on the "time_range" edge.
func (trq *TradeRecordQuery) QueryTimeRange() *TradeTimeRangeQuery {
	query := (&TradeTimeRangeClient{config: trq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(traderecord.Table, traderecord.FieldID, selector),
			sqlgraph.To(tradetimerange.Table, tradetimerange.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, traderecord.TimeRangeTable, traderecord.TimeRangeColumn),
		)
		fromU = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConditions chains the current query on the "conditions" edge.
func (trq *TradeRecordQuery) QueryConditions() *TradeConditionQuery {
	query := (&TradeConditionClient{config: trq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(traderecord.Table, traderecord.FieldID, selector),
			sqlgraph.To(tradecondition.Table, tradecondition.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, traderecord.ConditionsTable, traderecord.ConditionsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCorrection chains the current query on the "correction" edge.
func (trq *TradeRecordQuery) QueryCorrection() *TradeCorrectionQuery {
	query := (&TradeCorrectionClient{config: trq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(traderecord.Table, traderecord.FieldID, selector),
			sqlgraph.To(tradecorrection.Table, tradecorrection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, traderecord.CorrectionTable, traderecord.CorrectionPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExchange chains the current query on the "exchange" edge.
func (trq *TradeRecordQuery) QueryExchange() *ExchangeQuery {
	query := (&ExchangeClient{config: trq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(traderecord.Table, traderecord.FieldID, selector),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, traderecord.ExchangeTable, traderecord.ExchangeColumn),
		)
		fromU = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TradeRecord entity from the query.
// Returns a *NotFoundError when no TradeRecord was found.
func (trq *TradeRecordQuery) First(ctx context.Context) (*TradeRecord, error) {
	nodes, err := trq.Limit(1).All(newQueryContext(ctx, TypeTradeRecord, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{traderecord.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (trq *TradeRecordQuery) FirstX(ctx context.Context) *TradeRecord {
	node, err := trq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TradeRecord ID from the query.
// Returns a *NotFoundError when no TradeRecord ID was found.
func (trq *TradeRecordQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = trq.Limit(1).IDs(newQueryContext(ctx, TypeTradeRecord, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{traderecord.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (trq *TradeRecordQuery) FirstIDX(ctx context.Context) int {
	id, err := trq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TradeRecord entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TradeRecord entity is found.
// Returns a *NotFoundError when no TradeRecord entities are found.
func (trq *TradeRecordQuery) Only(ctx context.Context) (*TradeRecord, error) {
	nodes, err := trq.Limit(2).All(newQueryContext(ctx, TypeTradeRecord, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{traderecord.Label}
	default:
		return nil, &NotSingularError{traderecord.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (trq *TradeRecordQuery) OnlyX(ctx context.Context) *TradeRecord {
	node, err := trq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TradeRecord ID in the query.
// Returns a *NotSingularError when more than one TradeRecord ID is found.
// Returns a *NotFoundError when no entities are found.
func (trq *TradeRecordQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = trq.Limit(2).IDs(newQueryContext(ctx, TypeTradeRecord, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{traderecord.Label}
	default:
		err = &NotSingularError{traderecord.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (trq *TradeRecordQuery) OnlyIDX(ctx context.Context) int {
	id, err := trq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TradeRecords.
func (trq *TradeRecordQuery) All(ctx context.Context) ([]*TradeRecord, error) {
	ctx = newQueryContext(ctx, TypeTradeRecord, "All")
	if err := trq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TradeRecord, *TradeRecordQuery]()
	return withInterceptors[[]*TradeRecord](ctx, trq, qr, trq.inters)
}

// AllX is like All, but panics if an error occurs.
func (trq *TradeRecordQuery) AllX(ctx context.Context) []*TradeRecord {
	nodes, err := trq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TradeRecord IDs.
func (trq *TradeRecordQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeTradeRecord, "IDs")
	if err := trq.Select(traderecord.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (trq *TradeRecordQuery) IDsX(ctx context.Context) []int {
	ids, err := trq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (trq *TradeRecordQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeTradeRecord, "Count")
	if err := trq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, trq, querierCount[*TradeRecordQuery](), trq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (trq *TradeRecordQuery) CountX(ctx context.Context) int {
	count, err := trq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (trq *TradeRecordQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeTradeRecord, "Exist")
	switch _, err := trq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (trq *TradeRecordQuery) ExistX(ctx context.Context) bool {
	exist, err := trq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TradeRecordQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (trq *TradeRecordQuery) Clone() *TradeRecordQuery {
	if trq == nil {
		return nil
	}
	return &TradeRecordQuery{
		config:         trq.config,
		limit:          trq.limit,
		offset:         trq.offset,
		order:          append([]OrderFunc{}, trq.order...),
		inters:         append([]Interceptor{}, trq.inters...),
		predicates:     append([]predicate.TradeRecord{}, trq.predicates...),
		withTimeRange:  trq.withTimeRange.Clone(),
		withConditions: trq.withConditions.Clone(),
		withCorrection: trq.withCorrection.Clone(),
		withExchange:   trq.withExchange.Clone(),
		// clone intermediate query.
		sql:    trq.sql.Clone(),
		path:   trq.path,
		unique: trq.unique,
	}
}

// WithTimeRange tells the query-builder to eager-load the nodes that are connected to
// the "time_range" edge. The optional arguments are used to configure the query builder of the edge.
func (trq *TradeRecordQuery) WithTimeRange(opts ...func(*TradeTimeRangeQuery)) *TradeRecordQuery {
	query := (&TradeTimeRangeClient{config: trq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	trq.withTimeRange = query
	return trq
}

// WithConditions tells the query-builder to eager-load the nodes that are connected to
// the "conditions" edge. The optional arguments are used to configure the query builder of the edge.
func (trq *TradeRecordQuery) WithConditions(opts ...func(*TradeConditionQuery)) *TradeRecordQuery {
	query := (&TradeConditionClient{config: trq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	trq.withConditions = query
	return trq
}

// WithCorrection tells the query-builder to eager-load the nodes that are connected to
// the "correction" edge. The optional arguments are used to configure the query builder of the edge.
func (trq *TradeRecordQuery) WithCorrection(opts ...func(*TradeCorrectionQuery)) *TradeRecordQuery {
	query := (&TradeCorrectionClient{config: trq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	trq.withCorrection = query
	return trq
}

// WithExchange tells the query-builder to eager-load the nodes that are connected to
// the "exchange" edge. The optional arguments are used to configure the query builder of the edge.
func (trq *TradeRecordQuery) WithExchange(opts ...func(*ExchangeQuery)) *TradeRecordQuery {
	query := (&ExchangeClient{config: trq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	trq.withExchange = query
	return trq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Price float64 `json:"price,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TradeRecord.Query().
//		GroupBy(traderecord.FieldPrice).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (trq *TradeRecordQuery) GroupBy(field string, fields ...string) *TradeRecordGroupBy {
	trq.fields = append([]string{field}, fields...)
	grbuild := &TradeRecordGroupBy{build: trq}
	grbuild.flds = &trq.fields
	grbuild.label = traderecord.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Price float64 `json:"price,omitempty"`
//	}
//
//	client.TradeRecord.Query().
//		Select(traderecord.FieldPrice).
//		Scan(ctx, &v)
func (trq *TradeRecordQuery) Select(fields ...string) *TradeRecordSelect {
	trq.fields = append(trq.fields, fields...)
	sbuild := &TradeRecordSelect{TradeRecordQuery: trq}
	sbuild.label = traderecord.Label
	sbuild.flds, sbuild.scan = &trq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TradeRecordSelect configured with the given aggregations.
func (trq *TradeRecordQuery) Aggregate(fns ...AggregateFunc) *TradeRecordSelect {
	return trq.Select().Aggregate(fns...)
}

func (trq *TradeRecordQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range trq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, trq); err != nil {
				return err
			}
		}
	}
	for _, f := range trq.fields {
		if !traderecord.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if trq.path != nil {
		prev, err := trq.path(ctx)
		if err != nil {
			return err
		}
		trq.sql = prev
	}
	return nil
}

func (trq *TradeRecordQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TradeRecord, error) {
	var (
		nodes       = []*TradeRecord{}
		_spec       = trq.querySpec()
		loadedTypes = [4]bool{
			trq.withTimeRange != nil,
			trq.withConditions != nil,
			trq.withCorrection != nil,
			trq.withExchange != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TradeRecord).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TradeRecord{config: trq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, trq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := trq.withTimeRange; query != nil {
		if err := trq.loadTimeRange(ctx, query, nodes, nil,
			func(n *TradeRecord, e *TradeTimeRange) { n.Edges.TimeRange = e }); err != nil {
			return nil, err
		}
	}
	if query := trq.withConditions; query != nil {
		if err := trq.loadConditions(ctx, query, nodes,
			func(n *TradeRecord) { n.Edges.Conditions = []*TradeCondition{} },
			func(n *TradeRecord, e *TradeCondition) { n.Edges.Conditions = append(n.Edges.Conditions, e) }); err != nil {
			return nil, err
		}
	}
	if query := trq.withCorrection; query != nil {
		if err := trq.loadCorrection(ctx, query, nodes,
			func(n *TradeRecord) { n.Edges.Correction = []*TradeCorrection{} },
			func(n *TradeRecord, e *TradeCorrection) { n.Edges.Correction = append(n.Edges.Correction, e) }); err != nil {
			return nil, err
		}
	}
	if query := trq.withExchange; query != nil {
		if err := trq.loadExchange(ctx, query, nodes,
			func(n *TradeRecord) { n.Edges.Exchange = []*Exchange{} },
			func(n *TradeRecord, e *Exchange) { n.Edges.Exchange = append(n.Edges.Exchange, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (trq *TradeRecordQuery) loadTimeRange(ctx context.Context, query *TradeTimeRangeQuery, nodes []*TradeRecord, init func(*TradeRecord), assign func(*TradeRecord, *TradeTimeRange)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*TradeRecord)
	for i := range nodes {
		fk := nodes[i].TimeRangeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(tradetimerange.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "time_range_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (trq *TradeRecordQuery) loadConditions(ctx context.Context, query *TradeConditionQuery, nodes []*TradeRecord, init func(*TradeRecord), assign func(*TradeRecord, *TradeCondition)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*TradeRecord)
	nids := make(map[int]map[*TradeRecord]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(traderecord.ConditionsTable)
		s.Join(joinT).On(s.C(tradecondition.FieldID), joinT.C(traderecord.ConditionsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(traderecord.ConditionsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(traderecord.ConditionsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*TradeRecord]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "conditions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (trq *TradeRecordQuery) loadCorrection(ctx context.Context, query *TradeCorrectionQuery, nodes []*TradeRecord, init func(*TradeRecord), assign func(*TradeRecord, *TradeCorrection)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*TradeRecord)
	nids := make(map[int]map[*TradeRecord]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(traderecord.CorrectionTable)
		s.Join(joinT).On(s.C(tradecorrection.FieldID), joinT.C(traderecord.CorrectionPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(traderecord.CorrectionPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(traderecord.CorrectionPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*TradeRecord]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "correction" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (trq *TradeRecordQuery) loadExchange(ctx context.Context, query *ExchangeQuery, nodes []*TradeRecord, init func(*TradeRecord), assign func(*TradeRecord, *Exchange)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*TradeRecord)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.InValues(traderecord.ExchangeColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.trade_record_exchange
		if fk == nil {
			return fmt.Errorf(`foreign-key "trade_record_exchange" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "trade_record_exchange" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (trq *TradeRecordQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := trq.querySpec()
	_spec.Node.Columns = trq.fields
	if len(trq.fields) > 0 {
		_spec.Unique = trq.unique != nil && *trq.unique
	}
	return sqlgraph.CountNodes(ctx, trq.driver, _spec)
}

func (trq *TradeRecordQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   traderecord.Table,
			Columns: traderecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: traderecord.FieldID,
			},
		},
		From:   trq.sql,
		Unique: true,
	}
	if unique := trq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := trq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, traderecord.FieldID)
		for i := range fields {
			if fields[i] != traderecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := trq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := trq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := trq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := trq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (trq *TradeRecordQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(trq.driver.Dialect())
	t1 := builder.Table(traderecord.Table)
	columns := trq.fields
	if len(columns) == 0 {
		columns = traderecord.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if trq.sql != nil {
		selector = trq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if trq.unique != nil && *trq.unique {
		selector.Distinct()
	}
	for _, p := range trq.predicates {
		p(selector)
	}
	for _, p := range trq.order {
		p(selector)
	}
	if offset := trq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := trq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TradeRecordGroupBy is the group-by builder for TradeRecord entities.
type TradeRecordGroupBy struct {
	selector
	build *TradeRecordQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (trgb *TradeRecordGroupBy) Aggregate(fns ...AggregateFunc) *TradeRecordGroupBy {
	trgb.fns = append(trgb.fns, fns...)
	return trgb
}

// Scan applies the selector query and scans the result into the given value.
func (trgb *TradeRecordGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeTradeRecord, "GroupBy")
	if err := trgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TradeRecordQuery, *TradeRecordGroupBy](ctx, trgb.build, trgb, trgb.build.inters, v)
}

func (trgb *TradeRecordGroupBy) sqlScan(ctx context.Context, root *TradeRecordQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(trgb.fns))
	for _, fn := range trgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*trgb.flds)+len(trgb.fns))
		for _, f := range *trgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*trgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TradeRecordSelect is the builder for selecting fields of TradeRecord entities.
type TradeRecordSelect struct {
	*TradeRecordQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (trs *TradeRecordSelect) Aggregate(fns ...AggregateFunc) *TradeRecordSelect {
	trs.fns = append(trs.fns, fns...)
	return trs
}

// Scan applies the selector query and scans the result into the given value.
func (trs *TradeRecordSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeTradeRecord, "Select")
	if err := trs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TradeRecordQuery, *TradeRecordSelect](ctx, trs.TradeRecordQuery, trs, trs.inters, v)
}

func (trs *TradeRecordSelect) sqlScan(ctx context.Context, root *TradeRecordQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(trs.fns))
	for _, fn := range trs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*trs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
