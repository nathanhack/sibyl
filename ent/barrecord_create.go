// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/bargroup"
	"github.com/nathanhack/sibyl/ent/barrecord"
)

// BarRecordCreate is the builder for creating a BarRecord entity.
type BarRecordCreate struct {
	config
	mutation *BarRecordMutation
	hooks    []Hook
}

// SetClose sets the "close" field.
func (brc *BarRecordCreate) SetClose(f float64) *BarRecordCreate {
	brc.mutation.SetClose(f)
	return brc
}

// SetHigh sets the "high" field.
func (brc *BarRecordCreate) SetHigh(f float64) *BarRecordCreate {
	brc.mutation.SetHigh(f)
	return brc
}

// SetLow sets the "low" field.
func (brc *BarRecordCreate) SetLow(f float64) *BarRecordCreate {
	brc.mutation.SetLow(f)
	return brc
}

// SetOpen sets the "open" field.
func (brc *BarRecordCreate) SetOpen(f float64) *BarRecordCreate {
	brc.mutation.SetOpen(f)
	return brc
}

// SetTimestamp sets the "timestamp" field.
func (brc *BarRecordCreate) SetTimestamp(t time.Time) *BarRecordCreate {
	brc.mutation.SetTimestamp(t)
	return brc
}

// SetVolume sets the "volume" field.
func (brc *BarRecordCreate) SetVolume(f float64) *BarRecordCreate {
	brc.mutation.SetVolume(f)
	return brc
}

// SetTransactions sets the "transactions" field.
func (brc *BarRecordCreate) SetTransactions(i int32) *BarRecordCreate {
	brc.mutation.SetTransactions(i)
	return brc
}

// SetGroupID sets the "group" edge to the BarGroup entity by ID.
func (brc *BarRecordCreate) SetGroupID(id int) *BarRecordCreate {
	brc.mutation.SetGroupID(id)
	return brc
}

// SetNillableGroupID sets the "group" edge to the BarGroup entity by ID if the given value is not nil.
func (brc *BarRecordCreate) SetNillableGroupID(id *int) *BarRecordCreate {
	if id != nil {
		brc = brc.SetGroupID(*id)
	}
	return brc
}

// SetGroup sets the "group" edge to the BarGroup entity.
func (brc *BarRecordCreate) SetGroup(b *BarGroup) *BarRecordCreate {
	return brc.SetGroupID(b.ID)
}

// Mutation returns the BarRecordMutation object of the builder.
func (brc *BarRecordCreate) Mutation() *BarRecordMutation {
	return brc.mutation
}

// Save creates the BarRecord in the database.
func (brc *BarRecordCreate) Save(ctx context.Context) (*BarRecord, error) {
	return withHooks(ctx, brc.sqlSave, brc.mutation, brc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BarRecordCreate) SaveX(ctx context.Context) *BarRecord {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brc *BarRecordCreate) Exec(ctx context.Context) error {
	_, err := brc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brc *BarRecordCreate) ExecX(ctx context.Context) {
	if err := brc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brc *BarRecordCreate) check() error {
	if _, ok := brc.mutation.Close(); !ok {
		return &ValidationError{Name: "close", err: errors.New(`ent: missing required field "BarRecord.close"`)}
	}
	if _, ok := brc.mutation.High(); !ok {
		return &ValidationError{Name: "high", err: errors.New(`ent: missing required field "BarRecord.high"`)}
	}
	if _, ok := brc.mutation.Low(); !ok {
		return &ValidationError{Name: "low", err: errors.New(`ent: missing required field "BarRecord.low"`)}
	}
	if _, ok := brc.mutation.Open(); !ok {
		return &ValidationError{Name: "open", err: errors.New(`ent: missing required field "BarRecord.open"`)}
	}
	if _, ok := brc.mutation.Timestamp(); !ok {
		return &ValidationError{Name: "timestamp", err: errors.New(`ent: missing required field "BarRecord.timestamp"`)}
	}
	if _, ok := brc.mutation.Volume(); !ok {
		return &ValidationError{Name: "volume", err: errors.New(`ent: missing required field "BarRecord.volume"`)}
	}
	if _, ok := brc.mutation.Transactions(); !ok {
		return &ValidationError{Name: "transactions", err: errors.New(`ent: missing required field "BarRecord.transactions"`)}
	}
	return nil
}

func (brc *BarRecordCreate) sqlSave(ctx context.Context) (*BarRecord, error) {
	if err := brc.check(); err != nil {
		return nil, err
	}
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	brc.mutation.id = &_node.ID
	brc.mutation.done = true
	return _node, nil
}

func (brc *BarRecordCreate) createSpec() (*BarRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &BarRecord{config: brc.config}
		_spec = sqlgraph.NewCreateSpec(barrecord.Table, sqlgraph.NewFieldSpec(barrecord.FieldID, field.TypeInt))
	)
	if value, ok := brc.mutation.Close(); ok {
		_spec.SetField(barrecord.FieldClose, field.TypeFloat64, value)
		_node.Close = value
	}
	if value, ok := brc.mutation.High(); ok {
		_spec.SetField(barrecord.FieldHigh, field.TypeFloat64, value)
		_node.High = value
	}
	if value, ok := brc.mutation.Low(); ok {
		_spec.SetField(barrecord.FieldLow, field.TypeFloat64, value)
		_node.Low = value
	}
	if value, ok := brc.mutation.Open(); ok {
		_spec.SetField(barrecord.FieldOpen, field.TypeFloat64, value)
		_node.Open = value
	}
	if value, ok := brc.mutation.Timestamp(); ok {
		_spec.SetField(barrecord.FieldTimestamp, field.TypeTime, value)
		_node.Timestamp = value
	}
	if value, ok := brc.mutation.Volume(); ok {
		_spec.SetField(barrecord.FieldVolume, field.TypeFloat64, value)
		_node.Volume = value
	}
	if value, ok := brc.mutation.Transactions(); ok {
		_spec.SetField(barrecord.FieldTransactions, field.TypeInt32, value)
		_node.Transactions = value
	}
	if nodes := brc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   barrecord.GroupTable,
			Columns: []string{barrecord.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bargroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bar_group_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BarRecordCreateBulk is the builder for creating many BarRecord entities in bulk.
type BarRecordCreateBulk struct {
	config
	err      error
	builders []*BarRecordCreate
}

// Save creates the BarRecord entities in the database.
func (brcb *BarRecordCreateBulk) Save(ctx context.Context) ([]*BarRecord, error) {
	if brcb.err != nil {
		return nil, brcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BarRecord, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BarRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BarRecordCreateBulk) SaveX(ctx context.Context) []*BarRecord {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brcb *BarRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := brcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brcb *BarRecordCreateBulk) ExecX(ctx context.Context) {
	if err := brcb.Exec(ctx); err != nil {
		panic(err)
	}
}
