// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/tradecondition"
)

// TradeCondition is the model entity for the TradeCondition schema.
type TradeCondition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Condition holds the value of the "condition" field.
	Condition string `json:"condition,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TradeConditionQuery when eager-loading is set.
	Edges        TradeConditionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TradeConditionEdges holds the relations/edges for other nodes in the graph.
type TradeConditionEdges struct {
	// Record holds the value of the record edge.
	Record []*TradeRecord `json:"record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecordOrErr returns the Record value or an error if the edge
// was not loaded in eager-loading.
func (e TradeConditionEdges) RecordOrErr() ([]*TradeRecord, error) {
	if e.loadedTypes[0] {
		return e.Record, nil
	}
	return nil, &NotLoadedError{edge: "record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TradeCondition) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tradecondition.FieldID:
			values[i] = new(sql.NullInt64)
		case tradecondition.FieldCondition:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TradeCondition fields.
func (tc *TradeCondition) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tradecondition.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int(value.Int64)
		case tradecondition.FieldCondition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field condition", values[i])
			} else if value.Valid {
				tc.Condition = value.String
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TradeCondition.
// This includes values selected through modifiers, order, etc.
func (tc *TradeCondition) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// QueryRecord queries the "record" edge of the TradeCondition entity.
func (tc *TradeCondition) QueryRecord() *TradeRecordQuery {
	return NewTradeConditionClient(tc.config).QueryRecord(tc)
}

// Update returns a builder for updating this TradeCondition.
// Note that you need to call TradeCondition.Unwrap() before calling this method if this TradeCondition
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TradeCondition) Update() *TradeConditionUpdateOne {
	return NewTradeConditionClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TradeCondition entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TradeCondition) Unwrap() *TradeCondition {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TradeCondition is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TradeCondition) String() string {
	var builder strings.Builder
	builder.WriteString("TradeCondition(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("condition=")
	builder.WriteString(tc.Condition)
	builder.WriteByte(')')
	return builder.String()
}

// TradeConditions is a parsable slice of TradeCondition.
type TradeConditions []*TradeCondition
