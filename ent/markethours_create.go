// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/markethours"
	"github.com/nathanhack/sibyl/ent/marketinfo"
)

// MarketHoursCreate is the builder for creating a MarketHours entity.
type MarketHoursCreate struct {
	config
	mutation *MarketHoursMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (mhc *MarketHoursCreate) SetDate(t time.Time) *MarketHoursCreate {
	mhc.mutation.SetDate(t)
	return mhc
}

// SetStartTime sets the "start_time" field.
func (mhc *MarketHoursCreate) SetStartTime(t time.Time) *MarketHoursCreate {
	mhc.mutation.SetStartTime(t)
	return mhc
}

// SetEndTime sets the "end_time" field.
func (mhc *MarketHoursCreate) SetEndTime(t time.Time) *MarketHoursCreate {
	mhc.mutation.SetEndTime(t)
	return mhc
}

// SetMarketInfoID sets the "market_info" edge to the MarketInfo entity by ID.
func (mhc *MarketHoursCreate) SetMarketInfoID(id int) *MarketHoursCreate {
	mhc.mutation.SetMarketInfoID(id)
	return mhc
}

// SetNillableMarketInfoID sets the "market_info" edge to the MarketInfo entity by ID if the given value is not nil.
func (mhc *MarketHoursCreate) SetNillableMarketInfoID(id *int) *MarketHoursCreate {
	if id != nil {
		mhc = mhc.SetMarketInfoID(*id)
	}
	return mhc
}

// SetMarketInfo sets the "market_info" edge to the MarketInfo entity.
func (mhc *MarketHoursCreate) SetMarketInfo(m *MarketInfo) *MarketHoursCreate {
	return mhc.SetMarketInfoID(m.ID)
}

// Mutation returns the MarketHoursMutation object of the builder.
func (mhc *MarketHoursCreate) Mutation() *MarketHoursMutation {
	return mhc.mutation
}

// Save creates the MarketHours in the database.
func (mhc *MarketHoursCreate) Save(ctx context.Context) (*MarketHours, error) {
	return withHooks[*MarketHours, MarketHoursMutation](ctx, mhc.sqlSave, mhc.mutation, mhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mhc *MarketHoursCreate) SaveX(ctx context.Context) *MarketHours {
	v, err := mhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mhc *MarketHoursCreate) Exec(ctx context.Context) error {
	_, err := mhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhc *MarketHoursCreate) ExecX(ctx context.Context) {
	if err := mhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mhc *MarketHoursCreate) check() error {
	if _, ok := mhc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "MarketHours.date"`)}
	}
	if _, ok := mhc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "MarketHours.start_time"`)}
	}
	if _, ok := mhc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "MarketHours.end_time"`)}
	}
	return nil
}

func (mhc *MarketHoursCreate) sqlSave(ctx context.Context) (*MarketHours, error) {
	if err := mhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mhc.mutation.id = &_node.ID
	mhc.mutation.done = true
	return _node, nil
}

func (mhc *MarketHoursCreate) createSpec() (*MarketHours, *sqlgraph.CreateSpec) {
	var (
		_node = &MarketHours{config: mhc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: markethours.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: markethours.FieldID,
			},
		}
	)
	if value, ok := mhc.mutation.Date(); ok {
		_spec.SetField(markethours.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := mhc.mutation.StartTime(); ok {
		_spec.SetField(markethours.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := mhc.mutation.EndTime(); ok {
		_spec.SetField(markethours.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if nodes := mhc.mutation.MarketInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   markethours.MarketInfoTable,
			Columns: []string{markethours.MarketInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: marketinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.market_info_hours = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MarketHoursCreateBulk is the builder for creating many MarketHours entities in bulk.
type MarketHoursCreateBulk struct {
	config
	builders []*MarketHoursCreate
}

// Save creates the MarketHours entities in the database.
func (mhcb *MarketHoursCreateBulk) Save(ctx context.Context) ([]*MarketHours, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mhcb.builders))
	nodes := make([]*MarketHours, len(mhcb.builders))
	mutators := make([]Mutator, len(mhcb.builders))
	for i := range mhcb.builders {
		func(i int, root context.Context) {
			builder := mhcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MarketHoursMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mhcb *MarketHoursCreateBulk) SaveX(ctx context.Context) []*MarketHours {
	v, err := mhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mhcb *MarketHoursCreateBulk) Exec(ctx context.Context) error {
	_, err := mhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mhcb *MarketHoursCreateBulk) ExecX(ctx context.Context) {
	if err := mhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
