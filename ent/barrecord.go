// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/bargroup"
	"github.com/nathanhack/sibyl/ent/barrecord"
)

// BarRecord is the model entity for the BarRecord schema.
type BarRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Close holds the value of the "close" field.
	Close float64 `json:"close,omitempty"`
	// High holds the value of the "high" field.
	High float64 `json:"high,omitempty"`
	// Low holds the value of the "low" field.
	Low float64 `json:"low,omitempty"`
	// Open holds the value of the "open" field.
	Open float64 `json:"open,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Volume holds the value of the "volume" field.
	Volume float64 `json:"volume,omitempty"`
	// the number of trades during this bar
	Transactions int32 `json:"transactions,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BarRecordQuery when eager-loading is set.
	Edges             BarRecordEdges `json:"edges"`
	bar_group_records *int
}

// BarRecordEdges holds the relations/edges for other nodes in the graph.
type BarRecordEdges struct {
	// Group holds the value of the group edge.
	Group *BarGroup `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BarRecordEdges) GroupOrErr() (*BarGroup, error) {
	if e.loadedTypes[0] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: bargroup.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BarRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case barrecord.FieldClose, barrecord.FieldHigh, barrecord.FieldLow, barrecord.FieldOpen, barrecord.FieldVolume:
			values[i] = new(sql.NullFloat64)
		case barrecord.FieldID, barrecord.FieldTransactions:
			values[i] = new(sql.NullInt64)
		case barrecord.FieldTimestamp:
			values[i] = new(sql.NullTime)
		case barrecord.ForeignKeys[0]: // bar_group_records
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BarRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BarRecord fields.
func (br *BarRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case barrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			br.ID = int(value.Int64)
		case barrecord.FieldClose:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field close", values[i])
			} else if value.Valid {
				br.Close = value.Float64
			}
		case barrecord.FieldHigh:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field high", values[i])
			} else if value.Valid {
				br.High = value.Float64
			}
		case barrecord.FieldLow:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field low", values[i])
			} else if value.Valid {
				br.Low = value.Float64
			}
		case barrecord.FieldOpen:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field open", values[i])
			} else if value.Valid {
				br.Open = value.Float64
			}
		case barrecord.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				br.Timestamp = value.Time
			}
		case barrecord.FieldVolume:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field volume", values[i])
			} else if value.Valid {
				br.Volume = value.Float64
			}
		case barrecord.FieldTransactions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field transactions", values[i])
			} else if value.Valid {
				br.Transactions = int32(value.Int64)
			}
		case barrecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field bar_group_records", value)
			} else if value.Valid {
				br.bar_group_records = new(int)
				*br.bar_group_records = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGroup queries the "group" edge of the BarRecord entity.
func (br *BarRecord) QueryGroup() *BarGroupQuery {
	return (&BarRecordClient{config: br.config}).QueryGroup(br)
}

// Update returns a builder for updating this BarRecord.
// Note that you need to call BarRecord.Unwrap() before calling this method if this BarRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (br *BarRecord) Update() *BarRecordUpdateOne {
	return (&BarRecordClient{config: br.config}).UpdateOne(br)
}

// Unwrap unwraps the BarRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (br *BarRecord) Unwrap() *BarRecord {
	_tx, ok := br.config.driver.(*txDriver)
	if !ok {
		panic("ent: BarRecord is not a transactional entity")
	}
	br.config.driver = _tx.drv
	return br
}

// String implements the fmt.Stringer.
func (br *BarRecord) String() string {
	var builder strings.Builder
	builder.WriteString("BarRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", br.ID))
	builder.WriteString("close=")
	builder.WriteString(fmt.Sprintf("%v", br.Close))
	builder.WriteString(", ")
	builder.WriteString("high=")
	builder.WriteString(fmt.Sprintf("%v", br.High))
	builder.WriteString(", ")
	builder.WriteString("low=")
	builder.WriteString(fmt.Sprintf("%v", br.Low))
	builder.WriteString(", ")
	builder.WriteString("open=")
	builder.WriteString(fmt.Sprintf("%v", br.Open))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(br.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("volume=")
	builder.WriteString(fmt.Sprintf("%v", br.Volume))
	builder.WriteString(", ")
	builder.WriteString("transactions=")
	builder.WriteString(fmt.Sprintf("%v", br.Transactions))
	builder.WriteByte(')')
	return builder.String()
}

// BarRecords is a parsable slice of BarRecord.
type BarRecords []*BarRecord

func (br BarRecords) config(cfg config) {
	for _i := range br {
		br[_i].config = cfg
	}
}
