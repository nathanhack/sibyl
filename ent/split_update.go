// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/entity"
	"github.com/nathanhack/sibyl/ent/predicate"
	"github.com/nathanhack/sibyl/ent/split"
)

// SplitUpdate is the builder for updating Split entities.
type SplitUpdate struct {
	config
	hooks    []Hook
	mutation *SplitMutation
}

// Where appends a list predicates to the SplitUpdate builder.
func (su *SplitUpdate) Where(ps ...predicate.Split) *SplitUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetExecutionDate sets the "execution_date" field.
func (su *SplitUpdate) SetExecutionDate(t time.Time) *SplitUpdate {
	su.mutation.SetExecutionDate(t)
	return su
}

// SetFrom sets the "from" field.
func (su *SplitUpdate) SetFrom(f float64) *SplitUpdate {
	su.mutation.ResetFrom()
	su.mutation.SetFrom(f)
	return su
}

// AddFrom adds f to the "from" field.
func (su *SplitUpdate) AddFrom(f float64) *SplitUpdate {
	su.mutation.AddFrom(f)
	return su
}

// SetTo sets the "to" field.
func (su *SplitUpdate) SetTo(f float64) *SplitUpdate {
	su.mutation.ResetTo()
	su.mutation.SetTo(f)
	return su
}

// AddTo adds f to the "to" field.
func (su *SplitUpdate) AddTo(f float64) *SplitUpdate {
	su.mutation.AddTo(f)
	return su
}

// SetStockID sets the "stock" edge to the Entity entity by ID.
func (su *SplitUpdate) SetStockID(id int) *SplitUpdate {
	su.mutation.SetStockID(id)
	return su
}

// SetNillableStockID sets the "stock" edge to the Entity entity by ID if the given value is not nil.
func (su *SplitUpdate) SetNillableStockID(id *int) *SplitUpdate {
	if id != nil {
		su = su.SetStockID(*id)
	}
	return su
}

// SetStock sets the "stock" edge to the Entity entity.
func (su *SplitUpdate) SetStock(e *Entity) *SplitUpdate {
	return su.SetStockID(e.ID)
}

// Mutation returns the SplitMutation object of the builder.
func (su *SplitUpdate) Mutation() *SplitMutation {
	return su.mutation
}

// ClearStock clears the "stock" edge to the Entity entity.
func (su *SplitUpdate) ClearStock() *SplitUpdate {
	su.mutation.ClearStock()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SplitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SplitMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SplitUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SplitUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SplitUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SplitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   split.Table,
			Columns: split.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: split.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.ExecutionDate(); ok {
		_spec.SetField(split.FieldExecutionDate, field.TypeTime, value)
	}
	if value, ok := su.mutation.From(); ok {
		_spec.SetField(split.FieldFrom, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedFrom(); ok {
		_spec.AddField(split.FieldFrom, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.To(); ok {
		_spec.SetField(split.FieldTo, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedTo(); ok {
		_spec.AddField(split.FieldTo, field.TypeFloat64, value)
	}
	if su.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   split.StockTable,
			Columns: []string{split.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   split.StockTable,
			Columns: []string{split.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{split.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SplitUpdateOne is the builder for updating a single Split entity.
type SplitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SplitMutation
}

// SetExecutionDate sets the "execution_date" field.
func (suo *SplitUpdateOne) SetExecutionDate(t time.Time) *SplitUpdateOne {
	suo.mutation.SetExecutionDate(t)
	return suo
}

// SetFrom sets the "from" field.
func (suo *SplitUpdateOne) SetFrom(f float64) *SplitUpdateOne {
	suo.mutation.ResetFrom()
	suo.mutation.SetFrom(f)
	return suo
}

// AddFrom adds f to the "from" field.
func (suo *SplitUpdateOne) AddFrom(f float64) *SplitUpdateOne {
	suo.mutation.AddFrom(f)
	return suo
}

// SetTo sets the "to" field.
func (suo *SplitUpdateOne) SetTo(f float64) *SplitUpdateOne {
	suo.mutation.ResetTo()
	suo.mutation.SetTo(f)
	return suo
}

// AddTo adds f to the "to" field.
func (suo *SplitUpdateOne) AddTo(f float64) *SplitUpdateOne {
	suo.mutation.AddTo(f)
	return suo
}

// SetStockID sets the "stock" edge to the Entity entity by ID.
func (suo *SplitUpdateOne) SetStockID(id int) *SplitUpdateOne {
	suo.mutation.SetStockID(id)
	return suo
}

// SetNillableStockID sets the "stock" edge to the Entity entity by ID if the given value is not nil.
func (suo *SplitUpdateOne) SetNillableStockID(id *int) *SplitUpdateOne {
	if id != nil {
		suo = suo.SetStockID(*id)
	}
	return suo
}

// SetStock sets the "stock" edge to the Entity entity.
func (suo *SplitUpdateOne) SetStock(e *Entity) *SplitUpdateOne {
	return suo.SetStockID(e.ID)
}

// Mutation returns the SplitMutation object of the builder.
func (suo *SplitUpdateOne) Mutation() *SplitMutation {
	return suo.mutation
}

// ClearStock clears the "stock" edge to the Entity entity.
func (suo *SplitUpdateOne) ClearStock() *SplitUpdateOne {
	suo.mutation.ClearStock()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SplitUpdateOne) Select(field string, fields ...string) *SplitUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Split entity.
func (suo *SplitUpdateOne) Save(ctx context.Context) (*Split, error) {
	return withHooks[*Split, SplitMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SplitUpdateOne) SaveX(ctx context.Context) *Split {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SplitUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SplitUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SplitUpdateOne) sqlSave(ctx context.Context) (_node *Split, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   split.Table,
			Columns: split.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: split.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Split.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, split.FieldID)
		for _, f := range fields {
			if !split.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != split.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.ExecutionDate(); ok {
		_spec.SetField(split.FieldExecutionDate, field.TypeTime, value)
	}
	if value, ok := suo.mutation.From(); ok {
		_spec.SetField(split.FieldFrom, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedFrom(); ok {
		_spec.AddField(split.FieldFrom, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.To(); ok {
		_spec.SetField(split.FieldTo, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedTo(); ok {
		_spec.AddField(split.FieldTo, field.TypeFloat64, value)
	}
	if suo.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   split.StockTable,
			Columns: []string{split.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   split.StockTable,
			Columns: []string{split.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Split{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{split.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
