// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/datasource"
	"github.com/nathanhack/sibyl/ent/interval"
)

// DataSourceCreate is the builder for creating a DataSource entity.
type DataSourceCreate struct {
	config
	mutation *DataSourceMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dsc *DataSourceCreate) SetName(s string) *DataSourceCreate {
	dsc.mutation.SetName(s)
	return dsc
}

// SetAddress sets the "address" field.
func (dsc *DataSourceCreate) SetAddress(s string) *DataSourceCreate {
	dsc.mutation.SetAddress(s)
	return dsc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (dsc *DataSourceCreate) SetNillableAddress(s *string) *DataSourceCreate {
	if s != nil {
		dsc.SetAddress(*s)
	}
	return dsc
}

// AddIntervalIDs adds the "intervals" edge to the Interval entity by IDs.
func (dsc *DataSourceCreate) AddIntervalIDs(ids ...int) *DataSourceCreate {
	dsc.mutation.AddIntervalIDs(ids...)
	return dsc
}

// AddIntervals adds the "intervals" edges to the Interval entity.
func (dsc *DataSourceCreate) AddIntervals(i ...*Interval) *DataSourceCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return dsc.AddIntervalIDs(ids...)
}

// Mutation returns the DataSourceMutation object of the builder.
func (dsc *DataSourceCreate) Mutation() *DataSourceMutation {
	return dsc.mutation
}

// Save creates the DataSource in the database.
func (dsc *DataSourceCreate) Save(ctx context.Context) (*DataSource, error) {
	dsc.defaults()
	return withHooks[*DataSource, DataSourceMutation](ctx, dsc.sqlSave, dsc.mutation, dsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DataSourceCreate) SaveX(ctx context.Context) *DataSource {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DataSourceCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DataSourceCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsc *DataSourceCreate) defaults() {
	if _, ok := dsc.mutation.Address(); !ok {
		v := datasource.DefaultAddress
		dsc.mutation.SetAddress(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DataSourceCreate) check() error {
	if _, ok := dsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DataSource.name"`)}
	}
	if v, ok := dsc.mutation.Name(); ok {
		if err := datasource.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "DataSource.name": %w`, err)}
		}
	}
	if _, ok := dsc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "DataSource.address"`)}
	}
	return nil
}

func (dsc *DataSourceCreate) sqlSave(ctx context.Context) (*DataSource, error) {
	if err := dsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dsc.mutation.id = &_node.ID
	dsc.mutation.done = true
	return _node, nil
}

func (dsc *DataSourceCreate) createSpec() (*DataSource, *sqlgraph.CreateSpec) {
	var (
		_node = &DataSource{config: dsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: datasource.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: datasource.FieldID,
			},
		}
	)
	if value, ok := dsc.mutation.Name(); ok {
		_spec.SetField(datasource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dsc.mutation.Address(); ok {
		_spec.SetField(datasource.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if nodes := dsc.mutation.IntervalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   datasource.IntervalsTable,
			Columns: []string{datasource.IntervalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: interval.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DataSourceCreateBulk is the builder for creating many DataSource entities in bulk.
type DataSourceCreateBulk struct {
	config
	builders []*DataSourceCreate
}

// Save creates the DataSource entities in the database.
func (dscb *DataSourceCreateBulk) Save(ctx context.Context) ([]*DataSource, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DataSource, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DataSourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DataSourceCreateBulk) SaveX(ctx context.Context) []*DataSource {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DataSourceCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DataSourceCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}
