{
  "openapi": "3.0.3",
  "info": {
    "title": "Ent Schema API",
    "description": "This is an auto generated API description made out of an Ent schema definition",
    "version": "0.1.0"
  },
  "paths": {
    "/rest/bar-groups": {
      "get": {
        "tags": [
          "BarGroup"
        ],
        "summary": "List BarGroups",
        "description": "List BarGroups.",
        "operationId": "listBarGroup",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result BarGroup list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarGroupList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "BarGroup"
        ],
        "summary": "Create a new BarGroup",
        "description": "Creates a new BarGroup and persists it to storage.",
        "operationId": "createBarGroup",
        "requestBody": {
          "description": "BarGroup to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "count": {
                    "type": "integer"
                  },
                  "time_range_id": {
                    "type": "integer"
                  },
                  "time_range": {
                    "type": "integer"
                  },
                  "records": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "first",
                  "last",
                  "count",
                  "time_range_id",
                  "time_range"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "BarGroup created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarGroupCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/bar-groups/{id}": {
      "get": {
        "tags": [
          "BarGroup"
        ],
        "summary": "Find a BarGroup by ID",
        "description": "Finds the BarGroup with the requested ID and returns it.",
        "operationId": "readBarGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarGroup",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BarGroup with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarGroupRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "BarGroup"
        ],
        "summary": "Deletes a BarGroup by ID",
        "description": "Deletes the BarGroup with the requested ID.",
        "operationId": "deleteBarGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarGroup",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "BarGroup with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "BarGroup"
        ],
        "summary": "Updates a BarGroup",
        "description": "Updates a BarGroup and persists changes to storage.",
        "operationId": "updateBarGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarGroup",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "BarGroup properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "last": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "count": {
                    "type": "integer"
                  },
                  "time_range_id": {
                    "type": "integer"
                  },
                  "time_range": {
                    "type": "integer"
                  },
                  "records": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "BarGroup updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarGroupUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/bar-groups/{id}/records": {
      "get": {
        "tags": [
          "BarGroup"
        ],
        "summary": "List attached Records",
        "description": "List attached Records.",
        "operationId": "listBarGroupRecords",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarGroup",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result BarGroups list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarGroup_RecordsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/bar-groups/{id}/time-range": {
      "get": {
        "tags": [
          "BarGroup"
        ],
        "summary": "Find the attached BarTimeRange",
        "description": "Find the attached BarTimeRange of the BarGroup with the given ID",
        "operationId": "readBarGroupTimeRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarGroup",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BarTimeRange attached to BarGroup with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarGroup_TimeRangeRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/bar-records": {
      "get": {
        "tags": [
          "BarRecord"
        ],
        "summary": "List BarRecords",
        "description": "List BarRecords.",
        "operationId": "listBarRecord",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result BarRecord list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarRecordList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "BarRecord"
        ],
        "summary": "Create a new BarRecord",
        "description": "Creates a new BarRecord and persists it to storage.",
        "operationId": "createBarRecord",
        "requestBody": {
          "description": "BarRecord to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "close": {
                    "type": "number",
                    "format": "double"
                  },
                  "high": {
                    "type": "number",
                    "format": "double"
                  },
                  "low": {
                    "type": "number",
                    "format": "double"
                  },
                  "open": {
                    "type": "number",
                    "format": "double"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "volume": {
                    "type": "number",
                    "format": "double"
                  },
                  "transactions": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "group": {
                    "type": "integer"
                  }
                },
                "required": [
                  "close",
                  "high",
                  "low",
                  "open",
                  "timestamp",
                  "volume",
                  "transactions"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "BarRecord created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarRecordCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/bar-records/{id}": {
      "get": {
        "tags": [
          "BarRecord"
        ],
        "summary": "Find a BarRecord by ID",
        "description": "Finds the BarRecord with the requested ID and returns it.",
        "operationId": "readBarRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BarRecord with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarRecordRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "BarRecord"
        ],
        "summary": "Deletes a BarRecord by ID",
        "description": "Deletes the BarRecord with the requested ID.",
        "operationId": "deleteBarRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "BarRecord with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "BarRecord"
        ],
        "summary": "Updates a BarRecord",
        "description": "Updates a BarRecord and persists changes to storage.",
        "operationId": "updateBarRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "BarRecord properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "close": {
                    "type": "number",
                    "format": "double"
                  },
                  "high": {
                    "type": "number",
                    "format": "double"
                  },
                  "low": {
                    "type": "number",
                    "format": "double"
                  },
                  "open": {
                    "type": "number",
                    "format": "double"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "volume": {
                    "type": "number",
                    "format": "double"
                  },
                  "transactions": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "group": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "BarRecord updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarRecordUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/bar-records/{id}/group": {
      "get": {
        "tags": [
          "BarRecord"
        ],
        "summary": "Find the attached BarGroup",
        "description": "Find the attached BarGroup of the BarRecord with the given ID",
        "operationId": "readBarRecordGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BarGroup attached to BarRecord with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarRecord_GroupRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/bar-time-ranges": {
      "get": {
        "tags": [
          "BarTimeRange"
        ],
        "summary": "List BarTimeRanges",
        "description": "List BarTimeRanges.",
        "operationId": "listBarTimeRange",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result BarTimeRange list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarTimeRangeList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "BarTimeRange"
        ],
        "summary": "Create a new BarTimeRange",
        "description": "Creates a new BarTimeRange and persists it to storage.",
        "operationId": "createBarTimeRange",
        "requestBody": {
          "description": "BarTimeRange to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "count": {
                    "type": "integer"
                  },
                  "interval_id": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "created",
                      "clean",
                      "consolidated"
                    ],
                    "default": "pending"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "interval": {
                    "type": "integer"
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "start",
                  "end",
                  "count",
                  "interval_id",
                  "status",
                  "update_time",
                  "interval"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "BarTimeRange created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarTimeRangeCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/bar-time-ranges/{id}": {
      "get": {
        "tags": [
          "BarTimeRange"
        ],
        "summary": "Find a BarTimeRange by ID",
        "description": "Finds the BarTimeRange with the requested ID and returns it.",
        "operationId": "readBarTimeRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarTimeRange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BarTimeRange with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarTimeRangeRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "BarTimeRange"
        ],
        "summary": "Deletes a BarTimeRange by ID",
        "description": "Deletes the BarTimeRange with the requested ID.",
        "operationId": "deleteBarTimeRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarTimeRange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "BarTimeRange with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "BarTimeRange"
        ],
        "summary": "Updates a BarTimeRange",
        "description": "Updates a BarTimeRange and persists changes to storage.",
        "operationId": "updateBarTimeRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarTimeRange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "BarTimeRange properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "count": {
                    "type": "integer"
                  },
                  "interval_id": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "created",
                      "clean",
                      "consolidated"
                    ],
                    "default": "pending"
                  },
                  "update_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "interval": {
                    "type": "integer"
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "BarTimeRange updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarTimeRangeUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/bar-time-ranges/{id}/groups": {
      "get": {
        "tags": [
          "BarTimeRange"
        ],
        "summary": "List attached Groups",
        "description": "List attached Groups.",
        "operationId": "listBarTimeRangeGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarTimeRange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result BarTimeRanges list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BarTimeRange_GroupsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/bar-time-ranges/{id}/interval": {
      "get": {
        "tags": [
          "BarTimeRange"
        ],
        "summary": "Find the attached Interval",
        "description": "Find the attached Interval of the BarTimeRange with the given ID",
        "operationId": "readBarTimeRangeInterval",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the BarTimeRange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interval attached to BarTimeRange with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BarTimeRange_IntervalRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/data-sources": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "List DataSources",
        "description": "List DataSources.",
        "operationId": "listDataSource",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result DataSource list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSourceList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "DataSource"
        ],
        "summary": "Create a new DataSource",
        "description": "Creates a new DataSource and persists it to storage.",
        "operationId": "createDataSource",
        "requestBody": {
          "description": "DataSource to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "intervals": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "name",
                  "address"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "DataSource created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/data-sources/{id}": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "Find a DataSource by ID",
        "description": "Finds the DataSource with the requested ID and returns it.",
        "operationId": "readDataSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DataSource",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DataSource with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "DataSource"
        ],
        "summary": "Deletes a DataSource by ID",
        "description": "Deletes the DataSource with the requested ID.",
        "operationId": "deleteDataSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DataSource",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "DataSource with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "DataSource"
        ],
        "summary": "Updates a DataSource",
        "description": "Updates a DataSource and persists changes to storage.",
        "operationId": "updateDataSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DataSource",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "DataSource properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "intervals": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "DataSource updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/data-sources/{id}/intervals": {
      "get": {
        "tags": [
          "DataSource"
        ],
        "summary": "List attached Intervals",
        "description": "List attached Intervals.",
        "operationId": "listDataSourceIntervals",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DataSource",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result DataSources list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSource_IntervalsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/dividends": {
      "get": {
        "tags": [
          "Dividend"
        ],
        "summary": "List Dividends",
        "description": "List Dividends.",
        "operationId": "listDividend",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Dividend list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DividendList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Dividend"
        ],
        "summary": "Create a new Dividend",
        "description": "Creates a new Dividend and persists it to storage.",
        "operationId": "createDividend",
        "requestBody": {
          "description": "Dividend to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rate": {
                    "type": "number",
                    "format": "double"
                  },
                  "declaration_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ex_dividend_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "record_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "pay_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "stock": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "rate",
                  "declaration_date",
                  "ex_dividend_date",
                  "record_date",
                  "pay_date"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dividend created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DividendCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/dividends/{id}": {
      "get": {
        "tags": [
          "Dividend"
        ],
        "summary": "Find a Dividend by ID",
        "description": "Finds the Dividend with the requested ID and returns it.",
        "operationId": "readDividend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Dividend",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dividend with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DividendRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Dividend"
        ],
        "summary": "Deletes a Dividend by ID",
        "description": "Deletes the Dividend with the requested ID.",
        "operationId": "deleteDividend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Dividend",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Dividend with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Dividend"
        ],
        "summary": "Updates a Dividend",
        "description": "Updates a Dividend and persists changes to storage.",
        "operationId": "updateDividend",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Dividend",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Dividend properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rate": {
                    "type": "number",
                    "format": "double"
                  },
                  "declaration_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ex_dividend_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "record_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "pay_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "stock": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dividend updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DividendUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/dividends/{id}/stock": {
      "get": {
        "tags": [
          "Dividend"
        ],
        "summary": "List attached Stocks",
        "description": "List attached Stocks.",
        "operationId": "listDividendStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Dividend",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Dividends list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dividend_StockList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/entities": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "List Entities",
        "description": "List Entities.",
        "operationId": "listEntity",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Entity list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Entity"
        ],
        "summary": "Create a new Entity",
        "description": "Creates a new Entity and persists it to storage.",
        "operationId": "createEntity",
        "requestBody": {
          "description": "Entity to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "type": "boolean"
                  },
                  "ticker": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "list_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "options": {
                    "type": "boolean"
                  },
                  "tradable": {
                    "type": "boolean"
                  },
                  "exchanges": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "intervals": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "dividends": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "splits": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "financials": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "active",
                  "ticker",
                  "name",
                  "description",
                  "list_date",
                  "options",
                  "tradable"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/entities/add/{ticker}": {
      "description": "Requests adding stock ticker",
      "post": {
        "tags": [
          "Add"
        ],
        "summary": "Queue for adding entities by ticker.",
        "operationId": "addTicker",
        "responses": {
          "200": {
            "description": "Ticker request received"
          }
        }
      },
      "parameters": [
        {
          "name": "ticker",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/rest/entities/{id}": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "Find a Entity by ID",
        "description": "Finds the Entity with the requested ID and returns it.",
        "operationId": "readEntity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Entity"
        ],
        "summary": "Deletes a Entity by ID",
        "description": "Deletes the Entity with the requested ID.",
        "operationId": "deleteEntity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entity with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Entity"
        ],
        "summary": "Updates a Entity",
        "description": "Updates a Entity and persists changes to storage.",
        "operationId": "updateEntity",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Entity properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "type": "boolean"
                  },
                  "ticker": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "list_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "options": {
                    "type": "boolean"
                  },
                  "tradable": {
                    "type": "boolean"
                  },
                  "exchanges": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "intervals": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "dividends": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "splits": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "financials": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/entities/{id}/dividends": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "List attached Dividends",
        "description": "List attached Dividends.",
        "operationId": "listEntityDividends",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Entities list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entity_DividendsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/entities/{id}/exchanges": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "List attached Exchanges",
        "description": "List attached Exchanges.",
        "operationId": "listEntityExchanges",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Entities list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entity_ExchangesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/entities/{id}/financials": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "List attached Financials",
        "description": "List attached Financials.",
        "operationId": "listEntityFinancials",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Entities list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entity_FinancialsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/entities/{id}/intervals": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "List attached Intervals",
        "description": "List attached Intervals.",
        "operationId": "listEntityIntervals",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Entities list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entity_IntervalsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/entities/{id}/splits": {
      "get": {
        "tags": [
          "Entity"
        ],
        "summary": "List attached Splits",
        "description": "List attached Splits.",
        "operationId": "listEntitySplits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Entities list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entity_SplitsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/exchanges": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "List Exchanges",
        "description": "List Exchanges.",
        "operationId": "listExchange",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Exchange list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExchangeList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Exchange"
        ],
        "summary": "Create a new Exchange",
        "description": "Creates a new Exchange and persists it to storage.",
        "operationId": "createExchange",
        "requestBody": {
          "description": "Exchange to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "stocks": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "code",
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Exchange created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/exchanges/{id}": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "Find a Exchange by ID",
        "description": "Finds the Exchange with the requested ID and returns it.",
        "operationId": "readExchange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Exchange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exchange with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Exchange"
        ],
        "summary": "Deletes a Exchange by ID",
        "description": "Deletes the Exchange with the requested ID.",
        "operationId": "deleteExchange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Exchange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Exchange with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Exchange"
        ],
        "summary": "Updates a Exchange",
        "description": "Updates a Exchange and persists changes to storage.",
        "operationId": "updateExchange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Exchange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Exchange properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "stocks": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Exchange updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExchangeUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/exchanges/{id}/stocks": {
      "get": {
        "tags": [
          "Exchange"
        ],
        "summary": "List attached Stocks",
        "description": "List attached Stocks.",
        "operationId": "listExchangeStocks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Exchange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Exchanges list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Exchange_StocksList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/financials": {
      "get": {
        "tags": [
          "Financial"
        ],
        "summary": "List Financials",
        "description": "List Financials.",
        "operationId": "listFinancial",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Financial list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FinancialList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Financial"
        ],
        "summary": "Create a new Financial",
        "description": "Creates a new Financial and persists it to storage.",
        "operationId": "createFinancial",
        "requestBody": {
          "description": "Financial to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stock": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Financial created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/financials/{id}": {
      "get": {
        "tags": [
          "Financial"
        ],
        "summary": "Find a Financial by ID",
        "description": "Finds the Financial with the requested ID and returns it.",
        "operationId": "readFinancial",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Financial",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Financial with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Financial"
        ],
        "summary": "Deletes a Financial by ID",
        "description": "Deletes the Financial with the requested ID.",
        "operationId": "deleteFinancial",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Financial",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Financial with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Financial"
        ],
        "summary": "Updates a Financial",
        "description": "Updates a Financial and persists changes to storage.",
        "operationId": "updateFinancial",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Financial",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Financial properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stock": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Financial updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/financials/{id}/stock": {
      "get": {
        "tags": [
          "Financial"
        ],
        "summary": "List attached Stocks",
        "description": "List attached Stocks.",
        "operationId": "listFinancialStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Financial",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Financials list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Financial_StockList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/intervals": {
      "get": {
        "tags": [
          "Interval"
        ],
        "summary": "List Intervals",
        "description": "List Intervals.",
        "operationId": "listInterval",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Interval list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntervalList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Interval"
        ],
        "summary": "Create a new Interval",
        "description": "Creates a new Interval and persists it to storage.",
        "operationId": "createInterval",
        "requestBody": {
          "description": "Interval to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "type": "boolean"
                  },
                  "interval": {
                    "type": "string",
                    "enum": [
                      "trades",
                      "1min",
                      "daily",
                      "monthly",
                      "yearly"
                    ]
                  },
                  "stock_id": {
                    "type": "integer"
                  },
                  "data_source_id": {
                    "type": "integer"
                  },
                  "data_source": {
                    "type": "integer"
                  },
                  "stock": {
                    "type": "integer"
                  },
                  "bars": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "trades": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "active",
                  "interval",
                  "stock_id",
                  "data_source_id",
                  "data_source",
                  "stock"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Interval created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntervalCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/intervals/{id}": {
      "get": {
        "tags": [
          "Interval"
        ],
        "summary": "Find a Interval by ID",
        "description": "Finds the Interval with the requested ID and returns it.",
        "operationId": "readInterval",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Interval",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interval with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntervalRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Interval"
        ],
        "summary": "Deletes a Interval by ID",
        "description": "Deletes the Interval with the requested ID.",
        "operationId": "deleteInterval",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Interval",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Interval with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Interval"
        ],
        "summary": "Updates a Interval",
        "description": "Updates a Interval and persists changes to storage.",
        "operationId": "updateInterval",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Interval",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Interval properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "type": "boolean"
                  },
                  "interval": {
                    "type": "string",
                    "enum": [
                      "trades",
                      "1min",
                      "daily",
                      "monthly",
                      "yearly"
                    ]
                  },
                  "stock_id": {
                    "type": "integer"
                  },
                  "data_source_id": {
                    "type": "integer"
                  },
                  "data_source": {
                    "type": "integer"
                  },
                  "stock": {
                    "type": "integer"
                  },
                  "bars": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "trades": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Interval updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntervalUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/intervals/{id}/bars": {
      "get": {
        "tags": [
          "Interval"
        ],
        "summary": "List attached Bars",
        "description": "List attached Bars.",
        "operationId": "listIntervalBars",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Interval",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Intervals list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Interval_BarsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/intervals/{id}/data-source": {
      "get": {
        "tags": [
          "Interval"
        ],
        "summary": "Find the attached DataSource",
        "description": "Find the attached DataSource of the Interval with the given ID",
        "operationId": "readIntervalDataSource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Interval",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DataSource attached to Interval with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Interval_DataSourceRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/intervals/{id}/stock": {
      "get": {
        "tags": [
          "Interval"
        ],
        "summary": "Find the attached Entity",
        "description": "Find the attached Entity of the Interval with the given ID",
        "operationId": "readIntervalStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Interval",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity attached to Interval with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Interval_StockRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/intervals/{id}/trades": {
      "get": {
        "tags": [
          "Interval"
        ],
        "summary": "List attached Trades",
        "description": "List attached Trades.",
        "operationId": "listIntervalTrades",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Interval",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Intervals list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Interval_TradesList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/market-hours": {
      "get": {
        "tags": [
          "MarketHours"
        ],
        "summary": "List MarketHours",
        "description": "List MarketHours.",
        "operationId": "listMarketHours",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result MarketHours list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketHoursList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "MarketHours"
        ],
        "summary": "Create a new MarketHours",
        "description": "Creates a new MarketHours and persists it to storage.",
        "operationId": "createMarketHours",
        "requestBody": {
          "description": "MarketHours to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "start_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "market_info": {
                    "type": "integer"
                  }
                },
                "required": [
                  "date",
                  "start_time",
                  "end_time"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "MarketHours created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketHoursCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/market-hours/{id}": {
      "get": {
        "tags": [
          "MarketHours"
        ],
        "summary": "Find a MarketHours by ID",
        "description": "Finds the MarketHours with the requested ID and returns it.",
        "operationId": "readMarketHours",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MarketHours",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MarketHours with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketHoursRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "MarketHours"
        ],
        "summary": "Deletes a MarketHours by ID",
        "description": "Deletes the MarketHours with the requested ID.",
        "operationId": "deleteMarketHours",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MarketHours",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MarketHours with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "MarketHours"
        ],
        "summary": "Updates a MarketHours",
        "description": "Updates a MarketHours and persists changes to storage.",
        "operationId": "updateMarketHours",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MarketHours",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "MarketHours properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "start_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "market_info": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "MarketHours updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketHoursUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/market-hours/{id}/market-info": {
      "get": {
        "tags": [
          "MarketHours"
        ],
        "summary": "Find the attached MarketInfo",
        "description": "Find the attached MarketInfo of the MarketHours with the given ID",
        "operationId": "readMarketHoursMarketInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MarketHours",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MarketInfo attached to MarketHours with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketHours_MarketInfoRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/market-infos": {
      "get": {
        "tags": [
          "MarketInfo"
        ],
        "summary": "List MarketInfos",
        "description": "List MarketInfos.",
        "operationId": "listMarketInfo",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result MarketInfo list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketInfoList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "MarketInfo"
        ],
        "summary": "Create a new MarketInfo",
        "description": "Creates a new MarketInfo and persists it to storage.",
        "operationId": "createMarketInfo",
        "requestBody": {
          "description": "MarketInfo to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hours_start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "hours_end": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "hours": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "hours_start",
                  "hours_end"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "MarketInfo created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketInfoCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/market-infos/{id}": {
      "get": {
        "tags": [
          "MarketInfo"
        ],
        "summary": "Find a MarketInfo by ID",
        "description": "Finds the MarketInfo with the requested ID and returns it.",
        "operationId": "readMarketInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MarketInfo",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MarketInfo with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketInfoRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "MarketInfo"
        ],
        "summary": "Deletes a MarketInfo by ID",
        "description": "Deletes the MarketInfo with the requested ID.",
        "operationId": "deleteMarketInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MarketInfo",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "MarketInfo with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "MarketInfo"
        ],
        "summary": "Updates a MarketInfo",
        "description": "Updates a MarketInfo and persists changes to storage.",
        "operationId": "updateMarketInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MarketInfo",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "MarketInfo properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hours_start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "hours_end": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "hours": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "MarketInfo updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketInfoUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/market-infos/{id}/hours": {
      "get": {
        "tags": [
          "MarketInfo"
        ],
        "summary": "List attached Hours",
        "description": "List attached Hours.",
        "operationId": "listMarketInfoHours",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the MarketInfo",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result MarketInfos list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketInfo_HoursList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/search/{ticker}": {
      "description": "Searches for entities by ticker",
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Searches for entities by ticker.",
        "operationId": "searchTicker",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {},
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ticker": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "ticker",
                          "name"
                        ]
                      }
                    },
                    "errors": {}
                  },
                  "required": [
                    "status",
                    "results",
                    "errors"
                  ]
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "ticker",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/rest/splits": {
      "get": {
        "tags": [
          "Split"
        ],
        "summary": "List Splits",
        "description": "List Splits.",
        "operationId": "listSplit",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Split list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SplitList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Split"
        ],
        "summary": "Create a new Split",
        "description": "Creates a new Split and persists it to storage.",
        "operationId": "createSplit",
        "requestBody": {
          "description": "Split to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "execution_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "from": {
                    "type": "number",
                    "format": "double"
                  },
                  "to": {
                    "type": "number",
                    "format": "double"
                  },
                  "stock": {
                    "type": "integer"
                  }
                },
                "required": [
                  "execution_date",
                  "from",
                  "to"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Split created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/splits/{id}": {
      "get": {
        "tags": [
          "Split"
        ],
        "summary": "Find a Split by ID",
        "description": "Finds the Split with the requested ID and returns it.",
        "operationId": "readSplit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Split",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Split with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Split"
        ],
        "summary": "Deletes a Split by ID",
        "description": "Deletes the Split with the requested ID.",
        "operationId": "deleteSplit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Split",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Split with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Split"
        ],
        "summary": "Updates a Split",
        "description": "Updates a Split and persists changes to storage.",
        "operationId": "updateSplit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Split",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Split properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "execution_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "from": {
                    "type": "number",
                    "format": "double"
                  },
                  "to": {
                    "type": "number",
                    "format": "double"
                  },
                  "stock": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Split updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/splits/{id}/stock": {
      "get": {
        "tags": [
          "Split"
        ],
        "summary": "Find the attached Entity",
        "description": "Find the attached Entity of the Split with the given ID",
        "operationId": "readSplitStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Split",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity attached to Split with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Split_StockRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-conditions": {
      "get": {
        "tags": [
          "TradeCondition"
        ],
        "summary": "List TradeConditions",
        "description": "List TradeConditions.",
        "operationId": "listTradeCondition",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TradeCondition list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeConditionList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "TradeCondition"
        ],
        "summary": "Create a new TradeCondition",
        "description": "Creates a new TradeCondition and persists it to storage.",
        "operationId": "createTradeCondition",
        "requestBody": {
          "description": "TradeCondition to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "condition": {
                    "type": "string"
                  },
                  "record": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "condition"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TradeCondition created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeConditionCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-conditions/{id}": {
      "get": {
        "tags": [
          "TradeCondition"
        ],
        "summary": "Find a TradeCondition by ID",
        "description": "Finds the TradeCondition with the requested ID and returns it.",
        "operationId": "readTradeCondition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeCondition",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TradeCondition with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeConditionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "TradeCondition"
        ],
        "summary": "Deletes a TradeCondition by ID",
        "description": "Deletes the TradeCondition with the requested ID.",
        "operationId": "deleteTradeCondition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeCondition",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TradeCondition with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "TradeCondition"
        ],
        "summary": "Updates a TradeCondition",
        "description": "Updates a TradeCondition and persists changes to storage.",
        "operationId": "updateTradeCondition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeCondition",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "TradeCondition properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "condition": {
                    "type": "string"
                  },
                  "record": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TradeCondition updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeConditionUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-conditions/{id}/record": {
      "get": {
        "tags": [
          "TradeCondition"
        ],
        "summary": "List attached Records",
        "description": "List attached Records.",
        "operationId": "listTradeConditionRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeCondition",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TradeConditions list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeCondition_RecordList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-corrections": {
      "get": {
        "tags": [
          "TradeCorrection"
        ],
        "summary": "List TradeCorrections",
        "description": "List TradeCorrections.",
        "operationId": "listTradeCorrection",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TradeCorrection list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeCorrectionList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "TradeCorrection"
        ],
        "summary": "Create a new TradeCorrection",
        "description": "Creates a new TradeCorrection and persists it to storage.",
        "operationId": "createTradeCorrection",
        "requestBody": {
          "description": "TradeCorrection to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "correction": {
                    "type": "string"
                  },
                  "record": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "correction"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TradeCorrection created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeCorrectionCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-corrections/{id}": {
      "get": {
        "tags": [
          "TradeCorrection"
        ],
        "summary": "Find a TradeCorrection by ID",
        "description": "Finds the TradeCorrection with the requested ID and returns it.",
        "operationId": "readTradeCorrection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeCorrection",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TradeCorrection with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeCorrectionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "TradeCorrection"
        ],
        "summary": "Deletes a TradeCorrection by ID",
        "description": "Deletes the TradeCorrection with the requested ID.",
        "operationId": "deleteTradeCorrection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeCorrection",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TradeCorrection with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "TradeCorrection"
        ],
        "summary": "Updates a TradeCorrection",
        "description": "Updates a TradeCorrection and persists changes to storage.",
        "operationId": "updateTradeCorrection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeCorrection",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "TradeCorrection properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "correction": {
                    "type": "string"
                  },
                  "record": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TradeCorrection updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeCorrectionUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-corrections/{id}/record": {
      "get": {
        "tags": [
          "TradeCorrection"
        ],
        "summary": "List attached Records",
        "description": "List attached Records.",
        "operationId": "listTradeCorrectionRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeCorrection",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TradeCorrections list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeCorrection_RecordList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-records": {
      "get": {
        "tags": [
          "TradeRecord"
        ],
        "summary": "List TradeRecords",
        "description": "List TradeRecords.",
        "operationId": "listTradeRecord",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TradeRecord list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeRecordList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "TradeRecord"
        ],
        "summary": "Create a new TradeRecord",
        "description": "Creates a new TradeRecord and persists it to storage.",
        "operationId": "createTradeRecord",
        "requestBody": {
          "description": "TradeRecord to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "price": {
                    "type": "number",
                    "format": "double"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "volume": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "time_range_id": {
                    "type": "integer"
                  },
                  "time_range": {
                    "type": "integer"
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "correction": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "exchange": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "price",
                  "timestamp",
                  "volume",
                  "time_range_id",
                  "time_range"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TradeRecord created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeRecordCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-records/{id}": {
      "get": {
        "tags": [
          "TradeRecord"
        ],
        "summary": "Find a TradeRecord by ID",
        "description": "Finds the TradeRecord with the requested ID and returns it.",
        "operationId": "readTradeRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TradeRecord with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeRecordRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "TradeRecord"
        ],
        "summary": "Deletes a TradeRecord by ID",
        "description": "Deletes the TradeRecord with the requested ID.",
        "operationId": "deleteTradeRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TradeRecord with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "TradeRecord"
        ],
        "summary": "Updates a TradeRecord",
        "description": "Updates a TradeRecord and persists changes to storage.",
        "operationId": "updateTradeRecord",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "TradeRecord properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "price": {
                    "type": "number",
                    "format": "double"
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "volume": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "time_range_id": {
                    "type": "integer"
                  },
                  "time_range": {
                    "type": "integer"
                  },
                  "conditions": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "correction": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "exchange": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TradeRecord updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeRecordUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-records/{id}/conditions": {
      "get": {
        "tags": [
          "TradeRecord"
        ],
        "summary": "List attached Conditions",
        "description": "List attached Conditions.",
        "operationId": "listTradeRecordConditions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TradeRecords list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeRecord_ConditionsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-records/{id}/correction": {
      "get": {
        "tags": [
          "TradeRecord"
        ],
        "summary": "List attached Corrections",
        "description": "List attached Corrections.",
        "operationId": "listTradeRecordCorrection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TradeRecords list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeRecord_CorrectionList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-records/{id}/exchange": {
      "get": {
        "tags": [
          "TradeRecord"
        ],
        "summary": "List attached Exchanges",
        "description": "List attached Exchanges.",
        "operationId": "listTradeRecordExchange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TradeRecords list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeRecord_ExchangeList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-records/{id}/time-range": {
      "get": {
        "tags": [
          "TradeRecord"
        ],
        "summary": "Find the attached TradeTimeRange",
        "description": "Find the attached TradeTimeRange of the TradeRecord with the given ID",
        "operationId": "readTradeRecordTimeRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeRecord",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TradeTimeRange attached to TradeRecord with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeRecord_TimeRangeRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-time-ranges": {
      "get": {
        "tags": [
          "TradeTimeRange"
        ],
        "summary": "List TradeTimeRanges",
        "description": "List TradeTimeRanges.",
        "operationId": "listTradeTimeRange",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TradeTimeRange list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeTimeRangeList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "TradeTimeRange"
        ],
        "summary": "Create a new TradeTimeRange",
        "description": "Creates a new TradeTimeRange and persists it to storage.",
        "operationId": "createTradeTimeRange",
        "requestBody": {
          "description": "TradeTimeRange to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "interval_id": {
                    "type": "integer"
                  },
                  "interval": {
                    "type": "integer"
                  },
                  "records": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "start",
                  "end",
                  "interval_id",
                  "interval"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TradeTimeRange created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeTimeRangeCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-time-ranges/{id}": {
      "get": {
        "tags": [
          "TradeTimeRange"
        ],
        "summary": "Find a TradeTimeRange by ID",
        "description": "Finds the TradeTimeRange with the requested ID and returns it.",
        "operationId": "readTradeTimeRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeTimeRange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TradeTimeRange with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeTimeRangeRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "TradeTimeRange"
        ],
        "summary": "Deletes a TradeTimeRange by ID",
        "description": "Deletes the TradeTimeRange with the requested ID.",
        "operationId": "deleteTradeTimeRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeTimeRange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TradeTimeRange with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "TradeTimeRange"
        ],
        "summary": "Updates a TradeTimeRange",
        "description": "Updates a TradeTimeRange and persists changes to storage.",
        "operationId": "updateTradeTimeRange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeTimeRange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "TradeTimeRange properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "interval_id": {
                    "type": "integer"
                  },
                  "interval": {
                    "type": "integer"
                  },
                  "records": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TradeTimeRange updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeTimeRangeUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-time-ranges/{id}/interval": {
      "get": {
        "tags": [
          "TradeTimeRange"
        ],
        "summary": "Find the attached Interval",
        "description": "Find the attached Interval of the TradeTimeRange with the given ID",
        "operationId": "readTradeTimeRangeInterval",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeTimeRange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interval attached to TradeTimeRange with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeTimeRange_IntervalRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/rest/trade-time-ranges/{id}/records": {
      "get": {
        "tags": [
          "TradeTimeRange"
        ],
        "summary": "List attached Records",
        "description": "List attached Records.",
        "operationId": "listTradeTimeRangeRecords",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TradeTimeRange",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TradeTimeRanges list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TradeTimeRange_RecordsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BarGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first": {
            "type": "string",
            "format": "date-time"
          },
          "last": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "time_range_id": {
            "type": "integer"
          },
          "time_range": {
            "$ref": "#/components/schemas/BarTimeRange"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BarRecord"
            }
          }
        },
        "required": [
          "id",
          "first",
          "last",
          "count",
          "time_range_id",
          "time_range"
        ]
      },
      "BarGroupCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first": {
            "type": "string",
            "format": "date-time"
          },
          "last": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "first",
          "last",
          "count",
          "time_range_id"
        ]
      },
      "BarGroupList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first": {
            "type": "string",
            "format": "date-time"
          },
          "last": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "first",
          "last",
          "count",
          "time_range_id"
        ]
      },
      "BarGroupRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first": {
            "type": "string",
            "format": "date-time"
          },
          "last": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "first",
          "last",
          "count",
          "time_range_id"
        ]
      },
      "BarGroupUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first": {
            "type": "string",
            "format": "date-time"
          },
          "last": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "first",
          "last",
          "count",
          "time_range_id"
        ]
      },
      "BarGroup_RecordsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "close": {
            "type": "number",
            "format": "double"
          },
          "high": {
            "type": "number",
            "format": "double"
          },
          "low": {
            "type": "number",
            "format": "double"
          },
          "open": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "number",
            "format": "double"
          },
          "transactions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "close",
          "high",
          "low",
          "open",
          "timestamp",
          "volume",
          "transactions"
        ]
      },
      "BarGroup_TimeRangeRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "interval_id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "created",
              "clean",
              "consolidated"
            ],
            "default": "pending"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "count",
          "interval_id",
          "status",
          "update_time"
        ]
      },
      "BarRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "close": {
            "type": "number",
            "format": "double"
          },
          "high": {
            "type": "number",
            "format": "double"
          },
          "low": {
            "type": "number",
            "format": "double"
          },
          "open": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "number",
            "format": "double"
          },
          "transactions": {
            "type": "integer",
            "format": "int32"
          },
          "group": {
            "$ref": "#/components/schemas/BarGroup"
          }
        },
        "required": [
          "id",
          "close",
          "high",
          "low",
          "open",
          "timestamp",
          "volume",
          "transactions"
        ]
      },
      "BarRecordCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "close": {
            "type": "number",
            "format": "double"
          },
          "high": {
            "type": "number",
            "format": "double"
          },
          "low": {
            "type": "number",
            "format": "double"
          },
          "open": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "number",
            "format": "double"
          },
          "transactions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "close",
          "high",
          "low",
          "open",
          "timestamp",
          "volume",
          "transactions"
        ]
      },
      "BarRecordList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "close": {
            "type": "number",
            "format": "double"
          },
          "high": {
            "type": "number",
            "format": "double"
          },
          "low": {
            "type": "number",
            "format": "double"
          },
          "open": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "number",
            "format": "double"
          },
          "transactions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "close",
          "high",
          "low",
          "open",
          "timestamp",
          "volume",
          "transactions"
        ]
      },
      "BarRecordRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "close": {
            "type": "number",
            "format": "double"
          },
          "high": {
            "type": "number",
            "format": "double"
          },
          "low": {
            "type": "number",
            "format": "double"
          },
          "open": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "number",
            "format": "double"
          },
          "transactions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "close",
          "high",
          "low",
          "open",
          "timestamp",
          "volume",
          "transactions"
        ]
      },
      "BarRecordUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "close": {
            "type": "number",
            "format": "double"
          },
          "high": {
            "type": "number",
            "format": "double"
          },
          "low": {
            "type": "number",
            "format": "double"
          },
          "open": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "number",
            "format": "double"
          },
          "transactions": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "close",
          "high",
          "low",
          "open",
          "timestamp",
          "volume",
          "transactions"
        ]
      },
      "BarRecord_GroupRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first": {
            "type": "string",
            "format": "date-time"
          },
          "last": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "first",
          "last",
          "count",
          "time_range_id"
        ]
      },
      "BarTimeRange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "interval_id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "created",
              "clean",
              "consolidated"
            ],
            "default": "pending"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "interval": {
            "$ref": "#/components/schemas/Interval"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BarGroup"
            }
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "count",
          "interval_id",
          "status",
          "update_time",
          "interval"
        ]
      },
      "BarTimeRangeCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "interval_id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "created",
              "clean",
              "consolidated"
            ],
            "default": "pending"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "count",
          "interval_id",
          "status",
          "update_time"
        ]
      },
      "BarTimeRangeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "interval_id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "created",
              "clean",
              "consolidated"
            ],
            "default": "pending"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "count",
          "interval_id",
          "status",
          "update_time"
        ]
      },
      "BarTimeRangeRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "interval_id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "created",
              "clean",
              "consolidated"
            ],
            "default": "pending"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "count",
          "interval_id",
          "status",
          "update_time"
        ]
      },
      "BarTimeRangeUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "interval_id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "created",
              "clean",
              "consolidated"
            ],
            "default": "pending"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "count",
          "interval_id",
          "status",
          "update_time"
        ]
      },
      "BarTimeRange_GroupsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "first": {
            "type": "string",
            "format": "date-time"
          },
          "last": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "first",
          "last",
          "count",
          "time_range_id"
        ]
      },
      "BarTimeRange_IntervalRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "interval": {
            "type": "string",
            "enum": [
              "trades",
              "1min",
              "daily",
              "monthly",
              "yearly"
            ]
          },
          "stock_id": {
            "type": "integer"
          },
          "data_source_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "active",
          "interval",
          "stock_id",
          "data_source_id"
        ]
      },
      "DataSource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Interval"
            }
          }
        },
        "required": [
          "id",
          "name",
          "address"
        ]
      },
      "DataSourceCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "address"
        ]
      },
      "DataSourceList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "address"
        ]
      },
      "DataSourceRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "address"
        ]
      },
      "DataSourceUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "address"
        ]
      },
      "DataSource_IntervalsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "interval": {
            "type": "string",
            "enum": [
              "trades",
              "1min",
              "daily",
              "monthly",
              "yearly"
            ]
          },
          "stock_id": {
            "type": "integer"
          },
          "data_source_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "active",
          "interval",
          "stock_id",
          "data_source_id"
        ]
      },
      "Dividend": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "declaration_date": {
            "type": "string",
            "format": "date-time"
          },
          "ex_dividend_date": {
            "type": "string",
            "format": "date-time"
          },
          "record_date": {
            "type": "string",
            "format": "date-time"
          },
          "pay_date": {
            "type": "string",
            "format": "date-time"
          },
          "stock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entity"
            }
          }
        },
        "required": [
          "id",
          "rate",
          "declaration_date",
          "ex_dividend_date",
          "record_date",
          "pay_date"
        ]
      },
      "DividendCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "declaration_date": {
            "type": "string",
            "format": "date-time"
          },
          "ex_dividend_date": {
            "type": "string",
            "format": "date-time"
          },
          "record_date": {
            "type": "string",
            "format": "date-time"
          },
          "pay_date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "rate",
          "declaration_date",
          "ex_dividend_date",
          "record_date",
          "pay_date"
        ]
      },
      "DividendList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "declaration_date": {
            "type": "string",
            "format": "date-time"
          },
          "ex_dividend_date": {
            "type": "string",
            "format": "date-time"
          },
          "record_date": {
            "type": "string",
            "format": "date-time"
          },
          "pay_date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "rate",
          "declaration_date",
          "ex_dividend_date",
          "record_date",
          "pay_date"
        ]
      },
      "DividendRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "declaration_date": {
            "type": "string",
            "format": "date-time"
          },
          "ex_dividend_date": {
            "type": "string",
            "format": "date-time"
          },
          "record_date": {
            "type": "string",
            "format": "date-time"
          },
          "pay_date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "rate",
          "declaration_date",
          "ex_dividend_date",
          "record_date",
          "pay_date"
        ]
      },
      "DividendUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "declaration_date": {
            "type": "string",
            "format": "date-time"
          },
          "ex_dividend_date": {
            "type": "string",
            "format": "date-time"
          },
          "record_date": {
            "type": "string",
            "format": "date-time"
          },
          "pay_date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "rate",
          "declaration_date",
          "ex_dividend_date",
          "record_date",
          "pay_date"
        ]
      },
      "Dividend_StockList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "list_date": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "active",
          "ticker",
          "name",
          "description",
          "list_date",
          "options",
          "tradable"
        ]
      },
      "Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "list_date": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          },
          "exchanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Exchange"
            }
          },
          "intervals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Interval"
            }
          },
          "dividends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dividend"
            }
          },
          "splits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Split"
            }
          },
          "financials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Financial"
            }
          }
        },
        "required": [
          "id",
          "active",
          "ticker",
          "name",
          "description",
          "list_date",
          "options",
          "tradable"
        ]
      },
      "EntityCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "list_date": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "active",
          "ticker",
          "name",
          "description",
          "list_date",
          "options",
          "tradable"
        ]
      },
      "EntityList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "list_date": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "active",
          "ticker",
          "name",
          "description",
          "list_date",
          "options",
          "tradable"
        ]
      },
      "EntityRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "list_date": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "active",
          "ticker",
          "name",
          "description",
          "list_date",
          "options",
          "tradable"
        ]
      },
      "EntityUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "list_date": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "active",
          "ticker",
          "name",
          "description",
          "list_date",
          "options",
          "tradable"
        ]
      },
      "Entity_DividendsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "declaration_date": {
            "type": "string",
            "format": "date-time"
          },
          "ex_dividend_date": {
            "type": "string",
            "format": "date-time"
          },
          "record_date": {
            "type": "string",
            "format": "date-time"
          },
          "pay_date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "rate",
          "declaration_date",
          "ex_dividend_date",
          "record_date",
          "pay_date"
        ]
      },
      "Entity_ExchangesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "code",
          "name"
        ]
      },
      "Entity_FinancialsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "required": [
          "id"
        ]
      },
      "Entity_IntervalsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "interval": {
            "type": "string",
            "enum": [
              "trades",
              "1min",
              "daily",
              "monthly",
              "yearly"
            ]
          },
          "stock_id": {
            "type": "integer"
          },
          "data_source_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "active",
          "interval",
          "stock_id",
          "data_source_id"
        ]
      },
      "Entity_SplitsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "execution_date": {
            "type": "string",
            "format": "date-time"
          },
          "from": {
            "type": "number",
            "format": "double"
          },
          "to": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "id",
          "execution_date",
          "from",
          "to"
        ]
      },
      "Exchange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "stocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entity"
            }
          }
        },
        "required": [
          "id",
          "code",
          "name"
        ]
      },
      "ExchangeCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "code",
          "name"
        ]
      },
      "ExchangeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "code",
          "name"
        ]
      },
      "ExchangeRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "code",
          "name"
        ]
      },
      "ExchangeUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "code",
          "name"
        ]
      },
      "Exchange_StocksList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "list_date": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "active",
          "ticker",
          "name",
          "description",
          "list_date",
          "options",
          "tradable"
        ]
      },
      "Financial": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "stock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entity"
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "FinancialCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "required": [
          "id"
        ]
      },
      "FinancialList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "required": [
          "id"
        ]
      },
      "FinancialRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "required": [
          "id"
        ]
      },
      "FinancialUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        },
        "required": [
          "id"
        ]
      },
      "Financial_StockList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "list_date": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "active",
          "ticker",
          "name",
          "description",
          "list_date",
          "options",
          "tradable"
        ]
      },
      "Interval": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "interval": {
            "type": "string",
            "enum": [
              "trades",
              "1min",
              "daily",
              "monthly",
              "yearly"
            ]
          },
          "stock_id": {
            "type": "integer"
          },
          "data_source_id": {
            "type": "integer"
          },
          "data_source": {
            "$ref": "#/components/schemas/DataSource"
          },
          "stock": {
            "$ref": "#/components/schemas/Entity"
          },
          "bars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BarTimeRange"
            }
          },
          "trades": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeTimeRange"
            }
          }
        },
        "required": [
          "id",
          "active",
          "interval",
          "stock_id",
          "data_source_id",
          "data_source",
          "stock"
        ]
      },
      "IntervalCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "interval": {
            "type": "string",
            "enum": [
              "trades",
              "1min",
              "daily",
              "monthly",
              "yearly"
            ]
          },
          "stock_id": {
            "type": "integer"
          },
          "data_source_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "active",
          "interval",
          "stock_id",
          "data_source_id"
        ]
      },
      "IntervalList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "interval": {
            "type": "string",
            "enum": [
              "trades",
              "1min",
              "daily",
              "monthly",
              "yearly"
            ]
          },
          "stock_id": {
            "type": "integer"
          },
          "data_source_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "active",
          "interval",
          "stock_id",
          "data_source_id"
        ]
      },
      "IntervalRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "interval": {
            "type": "string",
            "enum": [
              "trades",
              "1min",
              "daily",
              "monthly",
              "yearly"
            ]
          },
          "stock_id": {
            "type": "integer"
          },
          "data_source_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "active",
          "interval",
          "stock_id",
          "data_source_id"
        ]
      },
      "IntervalUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "interval": {
            "type": "string",
            "enum": [
              "trades",
              "1min",
              "daily",
              "monthly",
              "yearly"
            ]
          },
          "stock_id": {
            "type": "integer"
          },
          "data_source_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "active",
          "interval",
          "stock_id",
          "data_source_id"
        ]
      },
      "Interval_BarsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer"
          },
          "interval_id": {
            "type": "integer"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "created",
              "clean",
              "consolidated"
            ],
            "default": "pending"
          },
          "update_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "count",
          "interval_id",
          "status",
          "update_time"
        ]
      },
      "Interval_DataSourceRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "address"
        ]
      },
      "Interval_StockRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "list_date": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "active",
          "ticker",
          "name",
          "description",
          "list_date",
          "options",
          "tradable"
        ]
      },
      "Interval_TradesList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "interval_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "interval_id"
        ]
      },
      "MarketHours": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "market_info": {
            "$ref": "#/components/schemas/MarketInfo"
          }
        },
        "required": [
          "id",
          "date",
          "start_time",
          "end_time"
        ]
      },
      "MarketHoursCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "date",
          "start_time",
          "end_time"
        ]
      },
      "MarketHoursList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "date",
          "start_time",
          "end_time"
        ]
      },
      "MarketHoursRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "date",
          "start_time",
          "end_time"
        ]
      },
      "MarketHoursUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "date",
          "start_time",
          "end_time"
        ]
      },
      "MarketHours_MarketInfoRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "hours_start": {
            "type": "string",
            "format": "date-time"
          },
          "hours_end": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "hours_start",
          "hours_end"
        ]
      },
      "MarketInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "hours_start": {
            "type": "string",
            "format": "date-time"
          },
          "hours_end": {
            "type": "string",
            "format": "date-time"
          },
          "hours": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketHours"
            }
          }
        },
        "required": [
          "id",
          "hours_start",
          "hours_end"
        ]
      },
      "MarketInfoCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "hours_start": {
            "type": "string",
            "format": "date-time"
          },
          "hours_end": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "hours_start",
          "hours_end"
        ]
      },
      "MarketInfoList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "hours_start": {
            "type": "string",
            "format": "date-time"
          },
          "hours_end": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "hours_start",
          "hours_end"
        ]
      },
      "MarketInfoRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "hours_start": {
            "type": "string",
            "format": "date-time"
          },
          "hours_end": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "hours_start",
          "hours_end"
        ]
      },
      "MarketInfoUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "hours_start": {
            "type": "string",
            "format": "date-time"
          },
          "hours_end": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "hours_start",
          "hours_end"
        ]
      },
      "MarketInfo_HoursList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "date",
          "start_time",
          "end_time"
        ]
      },
      "Split": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "execution_date": {
            "type": "string",
            "format": "date-time"
          },
          "from": {
            "type": "number",
            "format": "double"
          },
          "to": {
            "type": "number",
            "format": "double"
          },
          "stock": {
            "$ref": "#/components/schemas/Entity"
          }
        },
        "required": [
          "id",
          "execution_date",
          "from",
          "to"
        ]
      },
      "SplitCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "execution_date": {
            "type": "string",
            "format": "date-time"
          },
          "from": {
            "type": "number",
            "format": "double"
          },
          "to": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "id",
          "execution_date",
          "from",
          "to"
        ]
      },
      "SplitList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "execution_date": {
            "type": "string",
            "format": "date-time"
          },
          "from": {
            "type": "number",
            "format": "double"
          },
          "to": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "id",
          "execution_date",
          "from",
          "to"
        ]
      },
      "SplitRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "execution_date": {
            "type": "string",
            "format": "date-time"
          },
          "from": {
            "type": "number",
            "format": "double"
          },
          "to": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "id",
          "execution_date",
          "from",
          "to"
        ]
      },
      "SplitUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "execution_date": {
            "type": "string",
            "format": "date-time"
          },
          "from": {
            "type": "number",
            "format": "double"
          },
          "to": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "id",
          "execution_date",
          "from",
          "to"
        ]
      },
      "Split_StockRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "ticker": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "list_date": {
            "type": "string",
            "format": "date-time"
          },
          "options": {
            "type": "boolean"
          },
          "tradable": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "active",
          "ticker",
          "name",
          "description",
          "list_date",
          "options",
          "tradable"
        ]
      },
      "TradeCondition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "condition": {
            "type": "string"
          },
          "record": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeRecord"
            }
          }
        },
        "required": [
          "id",
          "condition"
        ]
      },
      "TradeConditionCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "condition": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "condition"
        ]
      },
      "TradeConditionList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "condition": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "condition"
        ]
      },
      "TradeConditionRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "condition": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "condition"
        ]
      },
      "TradeConditionUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "condition": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "condition"
        ]
      },
      "TradeCondition_RecordList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "integer",
            "format": "int32"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "price",
          "timestamp",
          "volume",
          "time_range_id"
        ]
      },
      "TradeCorrection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "correction": {
            "type": "string"
          },
          "record": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeRecord"
            }
          }
        },
        "required": [
          "id",
          "correction"
        ]
      },
      "TradeCorrectionCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "correction": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "correction"
        ]
      },
      "TradeCorrectionList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "correction": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "correction"
        ]
      },
      "TradeCorrectionRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "correction": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "correction"
        ]
      },
      "TradeCorrectionUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "correction": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "correction"
        ]
      },
      "TradeCorrection_RecordList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "integer",
            "format": "int32"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "price",
          "timestamp",
          "volume",
          "time_range_id"
        ]
      },
      "TradeRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "integer",
            "format": "int32"
          },
          "time_range_id": {
            "type": "integer"
          },
          "time_range": {
            "$ref": "#/components/schemas/TradeTimeRange"
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeCondition"
            }
          },
          "correction": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeCorrection"
            }
          },
          "exchange": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Exchange"
            }
          }
        },
        "required": [
          "id",
          "price",
          "timestamp",
          "volume",
          "time_range_id",
          "time_range"
        ]
      },
      "TradeRecordCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "integer",
            "format": "int32"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "price",
          "timestamp",
          "volume",
          "time_range_id"
        ]
      },
      "TradeRecordList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "integer",
            "format": "int32"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "price",
          "timestamp",
          "volume",
          "time_range_id"
        ]
      },
      "TradeRecordRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "integer",
            "format": "int32"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "price",
          "timestamp",
          "volume",
          "time_range_id"
        ]
      },
      "TradeRecordUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "integer",
            "format": "int32"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "price",
          "timestamp",
          "volume",
          "time_range_id"
        ]
      },
      "TradeRecord_ConditionsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "condition": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "condition"
        ]
      },
      "TradeRecord_CorrectionList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "correction": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "correction"
        ]
      },
      "TradeRecord_ExchangeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "code",
          "name"
        ]
      },
      "TradeRecord_TimeRangeRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "interval_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "interval_id"
        ]
      },
      "TradeTimeRange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "interval_id": {
            "type": "integer"
          },
          "interval": {
            "$ref": "#/components/schemas/Interval"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeRecord"
            }
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "interval_id",
          "interval"
        ]
      },
      "TradeTimeRangeCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "interval_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "interval_id"
        ]
      },
      "TradeTimeRangeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "interval_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "interval_id"
        ]
      },
      "TradeTimeRangeRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "interval_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "interval_id"
        ]
      },
      "TradeTimeRangeUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "interval_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "start",
          "end",
          "interval_id"
        ]
      },
      "TradeTimeRange_IntervalRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "interval": {
            "type": "string",
            "enum": [
              "trades",
              "1min",
              "daily",
              "monthly",
              "yearly"
            ]
          },
          "stock_id": {
            "type": "integer"
          },
          "data_source_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "active",
          "interval",
          "stock_id",
          "data_source_id"
        ]
      },
      "TradeTimeRange_RecordsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "volume": {
            "type": "integer",
            "format": "int32"
          },
          "time_range_id": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "price",
          "timestamp",
          "volume",
          "time_range_id"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    }
  }
}