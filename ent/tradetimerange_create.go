// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/interval"
	"github.com/nathanhack/sibyl/ent/traderecord"
	"github.com/nathanhack/sibyl/ent/tradetimerange"
)

// TradeTimeRangeCreate is the builder for creating a TradeTimeRange entity.
type TradeTimeRangeCreate struct {
	config
	mutation *TradeTimeRangeMutation
	hooks    []Hook
}

// SetStart sets the "start" field.
func (ttrc *TradeTimeRangeCreate) SetStart(t time.Time) *TradeTimeRangeCreate {
	ttrc.mutation.SetStart(t)
	return ttrc
}

// SetEnd sets the "end" field.
func (ttrc *TradeTimeRangeCreate) SetEnd(t time.Time) *TradeTimeRangeCreate {
	ttrc.mutation.SetEnd(t)
	return ttrc
}

// SetIntervalID sets the "interval_id" field.
func (ttrc *TradeTimeRangeCreate) SetIntervalID(i int) *TradeTimeRangeCreate {
	ttrc.mutation.SetIntervalID(i)
	return ttrc
}

// SetInterval sets the "interval" edge to the Interval entity.
func (ttrc *TradeTimeRangeCreate) SetInterval(i *Interval) *TradeTimeRangeCreate {
	return ttrc.SetIntervalID(i.ID)
}

// AddRecordIDs adds the "records" edge to the TradeRecord entity by IDs.
func (ttrc *TradeTimeRangeCreate) AddRecordIDs(ids ...int) *TradeTimeRangeCreate {
	ttrc.mutation.AddRecordIDs(ids...)
	return ttrc
}

// AddRecords adds the "records" edges to the TradeRecord entity.
func (ttrc *TradeTimeRangeCreate) AddRecords(t ...*TradeRecord) *TradeTimeRangeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttrc.AddRecordIDs(ids...)
}

// Mutation returns the TradeTimeRangeMutation object of the builder.
func (ttrc *TradeTimeRangeCreate) Mutation() *TradeTimeRangeMutation {
	return ttrc.mutation
}

// Save creates the TradeTimeRange in the database.
func (ttrc *TradeTimeRangeCreate) Save(ctx context.Context) (*TradeTimeRange, error) {
	return withHooks[*TradeTimeRange, TradeTimeRangeMutation](ctx, ttrc.sqlSave, ttrc.mutation, ttrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttrc *TradeTimeRangeCreate) SaveX(ctx context.Context) *TradeTimeRange {
	v, err := ttrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttrc *TradeTimeRangeCreate) Exec(ctx context.Context) error {
	_, err := ttrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttrc *TradeTimeRangeCreate) ExecX(ctx context.Context) {
	if err := ttrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttrc *TradeTimeRangeCreate) check() error {
	if _, ok := ttrc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "TradeTimeRange.start"`)}
	}
	if _, ok := ttrc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "TradeTimeRange.end"`)}
	}
	if _, ok := ttrc.mutation.IntervalID(); !ok {
		return &ValidationError{Name: "interval_id", err: errors.New(`ent: missing required field "TradeTimeRange.interval_id"`)}
	}
	if _, ok := ttrc.mutation.IntervalID(); !ok {
		return &ValidationError{Name: "interval", err: errors.New(`ent: missing required edge "TradeTimeRange.interval"`)}
	}
	return nil
}

func (ttrc *TradeTimeRangeCreate) sqlSave(ctx context.Context) (*TradeTimeRange, error) {
	if err := ttrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ttrc.mutation.id = &_node.ID
	ttrc.mutation.done = true
	return _node, nil
}

func (ttrc *TradeTimeRangeCreate) createSpec() (*TradeTimeRange, *sqlgraph.CreateSpec) {
	var (
		_node = &TradeTimeRange{config: ttrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tradetimerange.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tradetimerange.FieldID,
			},
		}
	)
	if value, ok := ttrc.mutation.Start(); ok {
		_spec.SetField(tradetimerange.FieldStart, field.TypeTime, value)
		_node.Start = value
	}
	if value, ok := ttrc.mutation.End(); ok {
		_spec.SetField(tradetimerange.FieldEnd, field.TypeTime, value)
		_node.End = value
	}
	if nodes := ttrc.mutation.IntervalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tradetimerange.IntervalTable,
			Columns: []string{tradetimerange.IntervalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: interval.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IntervalID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttrc.mutation.RecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tradetimerange.RecordsTable,
			Columns: []string{tradetimerange.RecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: traderecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TradeTimeRangeCreateBulk is the builder for creating many TradeTimeRange entities in bulk.
type TradeTimeRangeCreateBulk struct {
	config
	builders []*TradeTimeRangeCreate
}

// Save creates the TradeTimeRange entities in the database.
func (ttrcb *TradeTimeRangeCreateBulk) Save(ctx context.Context) ([]*TradeTimeRange, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ttrcb.builders))
	nodes := make([]*TradeTimeRange, len(ttrcb.builders))
	mutators := make([]Mutator, len(ttrcb.builders))
	for i := range ttrcb.builders {
		func(i int, root context.Context) {
			builder := ttrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TradeTimeRangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttrcb *TradeTimeRangeCreateBulk) SaveX(ctx context.Context) []*TradeTimeRange {
	v, err := ttrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttrcb *TradeTimeRangeCreateBulk) Exec(ctx context.Context) error {
	_, err := ttrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttrcb *TradeTimeRangeCreateBulk) ExecX(ctx context.Context) {
	if err := ttrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
