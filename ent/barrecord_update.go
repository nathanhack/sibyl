// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/bargroup"
	"github.com/nathanhack/sibyl/ent/barrecord"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// BarRecordUpdate is the builder for updating BarRecord entities.
type BarRecordUpdate struct {
	config
	hooks    []Hook
	mutation *BarRecordMutation
}

// Where appends a list predicates to the BarRecordUpdate builder.
func (bru *BarRecordUpdate) Where(ps ...predicate.BarRecord) *BarRecordUpdate {
	bru.mutation.Where(ps...)
	return bru
}

// SetClose sets the "close" field.
func (bru *BarRecordUpdate) SetClose(f float64) *BarRecordUpdate {
	bru.mutation.ResetClose()
	bru.mutation.SetClose(f)
	return bru
}

// SetNillableClose sets the "close" field if the given value is not nil.
func (bru *BarRecordUpdate) SetNillableClose(f *float64) *BarRecordUpdate {
	if f != nil {
		bru.SetClose(*f)
	}
	return bru
}

// AddClose adds f to the "close" field.
func (bru *BarRecordUpdate) AddClose(f float64) *BarRecordUpdate {
	bru.mutation.AddClose(f)
	return bru
}

// SetHigh sets the "high" field.
func (bru *BarRecordUpdate) SetHigh(f float64) *BarRecordUpdate {
	bru.mutation.ResetHigh()
	bru.mutation.SetHigh(f)
	return bru
}

// SetNillableHigh sets the "high" field if the given value is not nil.
func (bru *BarRecordUpdate) SetNillableHigh(f *float64) *BarRecordUpdate {
	if f != nil {
		bru.SetHigh(*f)
	}
	return bru
}

// AddHigh adds f to the "high" field.
func (bru *BarRecordUpdate) AddHigh(f float64) *BarRecordUpdate {
	bru.mutation.AddHigh(f)
	return bru
}

// SetLow sets the "low" field.
func (bru *BarRecordUpdate) SetLow(f float64) *BarRecordUpdate {
	bru.mutation.ResetLow()
	bru.mutation.SetLow(f)
	return bru
}

// SetNillableLow sets the "low" field if the given value is not nil.
func (bru *BarRecordUpdate) SetNillableLow(f *float64) *BarRecordUpdate {
	if f != nil {
		bru.SetLow(*f)
	}
	return bru
}

// AddLow adds f to the "low" field.
func (bru *BarRecordUpdate) AddLow(f float64) *BarRecordUpdate {
	bru.mutation.AddLow(f)
	return bru
}

// SetOpen sets the "open" field.
func (bru *BarRecordUpdate) SetOpen(f float64) *BarRecordUpdate {
	bru.mutation.ResetOpen()
	bru.mutation.SetOpen(f)
	return bru
}

// SetNillableOpen sets the "open" field if the given value is not nil.
func (bru *BarRecordUpdate) SetNillableOpen(f *float64) *BarRecordUpdate {
	if f != nil {
		bru.SetOpen(*f)
	}
	return bru
}

// AddOpen adds f to the "open" field.
func (bru *BarRecordUpdate) AddOpen(f float64) *BarRecordUpdate {
	bru.mutation.AddOpen(f)
	return bru
}

// SetTimestamp sets the "timestamp" field.
func (bru *BarRecordUpdate) SetTimestamp(t time.Time) *BarRecordUpdate {
	bru.mutation.SetTimestamp(t)
	return bru
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (bru *BarRecordUpdate) SetNillableTimestamp(t *time.Time) *BarRecordUpdate {
	if t != nil {
		bru.SetTimestamp(*t)
	}
	return bru
}

// SetVolume sets the "volume" field.
func (bru *BarRecordUpdate) SetVolume(f float64) *BarRecordUpdate {
	bru.mutation.ResetVolume()
	bru.mutation.SetVolume(f)
	return bru
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (bru *BarRecordUpdate) SetNillableVolume(f *float64) *BarRecordUpdate {
	if f != nil {
		bru.SetVolume(*f)
	}
	return bru
}

// AddVolume adds f to the "volume" field.
func (bru *BarRecordUpdate) AddVolume(f float64) *BarRecordUpdate {
	bru.mutation.AddVolume(f)
	return bru
}

// SetTransactions sets the "transactions" field.
func (bru *BarRecordUpdate) SetTransactions(i int32) *BarRecordUpdate {
	bru.mutation.ResetTransactions()
	bru.mutation.SetTransactions(i)
	return bru
}

// SetNillableTransactions sets the "transactions" field if the given value is not nil.
func (bru *BarRecordUpdate) SetNillableTransactions(i *int32) *BarRecordUpdate {
	if i != nil {
		bru.SetTransactions(*i)
	}
	return bru
}

// AddTransactions adds i to the "transactions" field.
func (bru *BarRecordUpdate) AddTransactions(i int32) *BarRecordUpdate {
	bru.mutation.AddTransactions(i)
	return bru
}

// SetGroupID sets the "group" edge to the BarGroup entity by ID.
func (bru *BarRecordUpdate) SetGroupID(id int) *BarRecordUpdate {
	bru.mutation.SetGroupID(id)
	return bru
}

// SetNillableGroupID sets the "group" edge to the BarGroup entity by ID if the given value is not nil.
func (bru *BarRecordUpdate) SetNillableGroupID(id *int) *BarRecordUpdate {
	if id != nil {
		bru = bru.SetGroupID(*id)
	}
	return bru
}

// SetGroup sets the "group" edge to the BarGroup entity.
func (bru *BarRecordUpdate) SetGroup(b *BarGroup) *BarRecordUpdate {
	return bru.SetGroupID(b.ID)
}

// Mutation returns the BarRecordMutation object of the builder.
func (bru *BarRecordUpdate) Mutation() *BarRecordMutation {
	return bru.mutation
}

// ClearGroup clears the "group" edge to the BarGroup entity.
func (bru *BarRecordUpdate) ClearGroup() *BarRecordUpdate {
	bru.mutation.ClearGroup()
	return bru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bru *BarRecordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bru.sqlSave, bru.mutation, bru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bru *BarRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := bru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bru *BarRecordUpdate) Exec(ctx context.Context) error {
	_, err := bru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bru *BarRecordUpdate) ExecX(ctx context.Context) {
	if err := bru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bru *BarRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(barrecord.Table, barrecord.Columns, sqlgraph.NewFieldSpec(barrecord.FieldID, field.TypeInt))
	if ps := bru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bru.mutation.Close(); ok {
		_spec.SetField(barrecord.FieldClose, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedClose(); ok {
		_spec.AddField(barrecord.FieldClose, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.High(); ok {
		_spec.SetField(barrecord.FieldHigh, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedHigh(); ok {
		_spec.AddField(barrecord.FieldHigh, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.Low(); ok {
		_spec.SetField(barrecord.FieldLow, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedLow(); ok {
		_spec.AddField(barrecord.FieldLow, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.Open(); ok {
		_spec.SetField(barrecord.FieldOpen, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedOpen(); ok {
		_spec.AddField(barrecord.FieldOpen, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.Timestamp(); ok {
		_spec.SetField(barrecord.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := bru.mutation.Volume(); ok {
		_spec.SetField(barrecord.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedVolume(); ok {
		_spec.AddField(barrecord.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.Transactions(); ok {
		_spec.SetField(barrecord.FieldTransactions, field.TypeInt32, value)
	}
	if value, ok := bru.mutation.AddedTransactions(); ok {
		_spec.AddField(barrecord.FieldTransactions, field.TypeInt32, value)
	}
	if bru.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   barrecord.GroupTable,
			Columns: []string{barrecord.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bargroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   barrecord.GroupTable,
			Columns: []string{barrecord.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bargroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{barrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bru.mutation.done = true
	return n, nil
}

// BarRecordUpdateOne is the builder for updating a single BarRecord entity.
type BarRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BarRecordMutation
}

// SetClose sets the "close" field.
func (bruo *BarRecordUpdateOne) SetClose(f float64) *BarRecordUpdateOne {
	bruo.mutation.ResetClose()
	bruo.mutation.SetClose(f)
	return bruo
}

// SetNillableClose sets the "close" field if the given value is not nil.
func (bruo *BarRecordUpdateOne) SetNillableClose(f *float64) *BarRecordUpdateOne {
	if f != nil {
		bruo.SetClose(*f)
	}
	return bruo
}

// AddClose adds f to the "close" field.
func (bruo *BarRecordUpdateOne) AddClose(f float64) *BarRecordUpdateOne {
	bruo.mutation.AddClose(f)
	return bruo
}

// SetHigh sets the "high" field.
func (bruo *BarRecordUpdateOne) SetHigh(f float64) *BarRecordUpdateOne {
	bruo.mutation.ResetHigh()
	bruo.mutation.SetHigh(f)
	return bruo
}

// SetNillableHigh sets the "high" field if the given value is not nil.
func (bruo *BarRecordUpdateOne) SetNillableHigh(f *float64) *BarRecordUpdateOne {
	if f != nil {
		bruo.SetHigh(*f)
	}
	return bruo
}

// AddHigh adds f to the "high" field.
func (bruo *BarRecordUpdateOne) AddHigh(f float64) *BarRecordUpdateOne {
	bruo.mutation.AddHigh(f)
	return bruo
}

// SetLow sets the "low" field.
func (bruo *BarRecordUpdateOne) SetLow(f float64) *BarRecordUpdateOne {
	bruo.mutation.ResetLow()
	bruo.mutation.SetLow(f)
	return bruo
}

// SetNillableLow sets the "low" field if the given value is not nil.
func (bruo *BarRecordUpdateOne) SetNillableLow(f *float64) *BarRecordUpdateOne {
	if f != nil {
		bruo.SetLow(*f)
	}
	return bruo
}

// AddLow adds f to the "low" field.
func (bruo *BarRecordUpdateOne) AddLow(f float64) *BarRecordUpdateOne {
	bruo.mutation.AddLow(f)
	return bruo
}

// SetOpen sets the "open" field.
func (bruo *BarRecordUpdateOne) SetOpen(f float64) *BarRecordUpdateOne {
	bruo.mutation.ResetOpen()
	bruo.mutation.SetOpen(f)
	return bruo
}

// SetNillableOpen sets the "open" field if the given value is not nil.
func (bruo *BarRecordUpdateOne) SetNillableOpen(f *float64) *BarRecordUpdateOne {
	if f != nil {
		bruo.SetOpen(*f)
	}
	return bruo
}

// AddOpen adds f to the "open" field.
func (bruo *BarRecordUpdateOne) AddOpen(f float64) *BarRecordUpdateOne {
	bruo.mutation.AddOpen(f)
	return bruo
}

// SetTimestamp sets the "timestamp" field.
func (bruo *BarRecordUpdateOne) SetTimestamp(t time.Time) *BarRecordUpdateOne {
	bruo.mutation.SetTimestamp(t)
	return bruo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (bruo *BarRecordUpdateOne) SetNillableTimestamp(t *time.Time) *BarRecordUpdateOne {
	if t != nil {
		bruo.SetTimestamp(*t)
	}
	return bruo
}

// SetVolume sets the "volume" field.
func (bruo *BarRecordUpdateOne) SetVolume(f float64) *BarRecordUpdateOne {
	bruo.mutation.ResetVolume()
	bruo.mutation.SetVolume(f)
	return bruo
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (bruo *BarRecordUpdateOne) SetNillableVolume(f *float64) *BarRecordUpdateOne {
	if f != nil {
		bruo.SetVolume(*f)
	}
	return bruo
}

// AddVolume adds f to the "volume" field.
func (bruo *BarRecordUpdateOne) AddVolume(f float64) *BarRecordUpdateOne {
	bruo.mutation.AddVolume(f)
	return bruo
}

// SetTransactions sets the "transactions" field.
func (bruo *BarRecordUpdateOne) SetTransactions(i int32) *BarRecordUpdateOne {
	bruo.mutation.ResetTransactions()
	bruo.mutation.SetTransactions(i)
	return bruo
}

// SetNillableTransactions sets the "transactions" field if the given value is not nil.
func (bruo *BarRecordUpdateOne) SetNillableTransactions(i *int32) *BarRecordUpdateOne {
	if i != nil {
		bruo.SetTransactions(*i)
	}
	return bruo
}

// AddTransactions adds i to the "transactions" field.
func (bruo *BarRecordUpdateOne) AddTransactions(i int32) *BarRecordUpdateOne {
	bruo.mutation.AddTransactions(i)
	return bruo
}

// SetGroupID sets the "group" edge to the BarGroup entity by ID.
func (bruo *BarRecordUpdateOne) SetGroupID(id int) *BarRecordUpdateOne {
	bruo.mutation.SetGroupID(id)
	return bruo
}

// SetNillableGroupID sets the "group" edge to the BarGroup entity by ID if the given value is not nil.
func (bruo *BarRecordUpdateOne) SetNillableGroupID(id *int) *BarRecordUpdateOne {
	if id != nil {
		bruo = bruo.SetGroupID(*id)
	}
	return bruo
}

// SetGroup sets the "group" edge to the BarGroup entity.
func (bruo *BarRecordUpdateOne) SetGroup(b *BarGroup) *BarRecordUpdateOne {
	return bruo.SetGroupID(b.ID)
}

// Mutation returns the BarRecordMutation object of the builder.
func (bruo *BarRecordUpdateOne) Mutation() *BarRecordMutation {
	return bruo.mutation
}

// ClearGroup clears the "group" edge to the BarGroup entity.
func (bruo *BarRecordUpdateOne) ClearGroup() *BarRecordUpdateOne {
	bruo.mutation.ClearGroup()
	return bruo
}

// Where appends a list predicates to the BarRecordUpdate builder.
func (bruo *BarRecordUpdateOne) Where(ps ...predicate.BarRecord) *BarRecordUpdateOne {
	bruo.mutation.Where(ps...)
	return bruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bruo *BarRecordUpdateOne) Select(field string, fields ...string) *BarRecordUpdateOne {
	bruo.fields = append([]string{field}, fields...)
	return bruo
}

// Save executes the query and returns the updated BarRecord entity.
func (bruo *BarRecordUpdateOne) Save(ctx context.Context) (*BarRecord, error) {
	return withHooks(ctx, bruo.sqlSave, bruo.mutation, bruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bruo *BarRecordUpdateOne) SaveX(ctx context.Context) *BarRecord {
	node, err := bruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bruo *BarRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := bruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bruo *BarRecordUpdateOne) ExecX(ctx context.Context) {
	if err := bruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bruo *BarRecordUpdateOne) sqlSave(ctx context.Context) (_node *BarRecord, err error) {
	_spec := sqlgraph.NewUpdateSpec(barrecord.Table, barrecord.Columns, sqlgraph.NewFieldSpec(barrecord.FieldID, field.TypeInt))
	id, ok := bruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BarRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, barrecord.FieldID)
		for _, f := range fields {
			if !barrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != barrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bruo.mutation.Close(); ok {
		_spec.SetField(barrecord.FieldClose, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedClose(); ok {
		_spec.AddField(barrecord.FieldClose, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.High(); ok {
		_spec.SetField(barrecord.FieldHigh, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedHigh(); ok {
		_spec.AddField(barrecord.FieldHigh, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.Low(); ok {
		_spec.SetField(barrecord.FieldLow, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedLow(); ok {
		_spec.AddField(barrecord.FieldLow, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.Open(); ok {
		_spec.SetField(barrecord.FieldOpen, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedOpen(); ok {
		_spec.AddField(barrecord.FieldOpen, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.Timestamp(); ok {
		_spec.SetField(barrecord.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := bruo.mutation.Volume(); ok {
		_spec.SetField(barrecord.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedVolume(); ok {
		_spec.AddField(barrecord.FieldVolume, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.Transactions(); ok {
		_spec.SetField(barrecord.FieldTransactions, field.TypeInt32, value)
	}
	if value, ok := bruo.mutation.AddedTransactions(); ok {
		_spec.AddField(barrecord.FieldTransactions, field.TypeInt32, value)
	}
	if bruo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   barrecord.GroupTable,
			Columns: []string{barrecord.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bargroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   barrecord.GroupTable,
			Columns: []string{barrecord.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bargroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BarRecord{config: bruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{barrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bruo.mutation.done = true
	return _node, nil
}
