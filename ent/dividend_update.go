// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/dividend"
	"github.com/nathanhack/sibyl/ent/entity"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// DividendUpdate is the builder for updating Dividend entities.
type DividendUpdate struct {
	config
	hooks    []Hook
	mutation *DividendMutation
}

// Where appends a list predicates to the DividendUpdate builder.
func (du *DividendUpdate) Where(ps ...predicate.Dividend) *DividendUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetCashAmount sets the "cash_amount" field.
func (du *DividendUpdate) SetCashAmount(f float64) *DividendUpdate {
	du.mutation.ResetCashAmount()
	du.mutation.SetCashAmount(f)
	return du
}

// AddCashAmount adds f to the "cash_amount" field.
func (du *DividendUpdate) AddCashAmount(f float64) *DividendUpdate {
	du.mutation.AddCashAmount(f)
	return du
}

// SetDeclarationDate sets the "declaration_date" field.
func (du *DividendUpdate) SetDeclarationDate(t time.Time) *DividendUpdate {
	du.mutation.SetDeclarationDate(t)
	return du
}

// SetDividendType sets the "dividend_type" field.
func (du *DividendUpdate) SetDividendType(dt dividend.DividendType) *DividendUpdate {
	du.mutation.SetDividendType(dt)
	return du
}

// SetExDividendDate sets the "ex_dividend_date" field.
func (du *DividendUpdate) SetExDividendDate(t time.Time) *DividendUpdate {
	du.mutation.SetExDividendDate(t)
	return du
}

// SetFrequency sets the "frequency" field.
func (du *DividendUpdate) SetFrequency(i int) *DividendUpdate {
	du.mutation.ResetFrequency()
	du.mutation.SetFrequency(i)
	return du
}

// AddFrequency adds i to the "frequency" field.
func (du *DividendUpdate) AddFrequency(i int) *DividendUpdate {
	du.mutation.AddFrequency(i)
	return du
}

// SetRecordDate sets the "record_date" field.
func (du *DividendUpdate) SetRecordDate(t time.Time) *DividendUpdate {
	du.mutation.SetRecordDate(t)
	return du
}

// SetPayDate sets the "pay_date" field.
func (du *DividendUpdate) SetPayDate(t time.Time) *DividendUpdate {
	du.mutation.SetPayDate(t)
	return du
}

// AddStockIDs adds the "stock" edge to the Entity entity by IDs.
func (du *DividendUpdate) AddStockIDs(ids ...int) *DividendUpdate {
	du.mutation.AddStockIDs(ids...)
	return du
}

// AddStock adds the "stock" edges to the Entity entity.
func (du *DividendUpdate) AddStock(e ...*Entity) *DividendUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return du.AddStockIDs(ids...)
}

// Mutation returns the DividendMutation object of the builder.
func (du *DividendUpdate) Mutation() *DividendMutation {
	return du.mutation
}

// ClearStock clears all "stock" edges to the Entity entity.
func (du *DividendUpdate) ClearStock() *DividendUpdate {
	du.mutation.ClearStock()
	return du
}

// RemoveStockIDs removes the "stock" edge to Entity entities by IDs.
func (du *DividendUpdate) RemoveStockIDs(ids ...int) *DividendUpdate {
	du.mutation.RemoveStockIDs(ids...)
	return du
}

// RemoveStock removes "stock" edges to Entity entities.
func (du *DividendUpdate) RemoveStock(e ...*Entity) *DividendUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return du.RemoveStockIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DividendUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DividendMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DividendUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DividendUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DividendUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DividendUpdate) check() error {
	if v, ok := du.mutation.DividendType(); ok {
		if err := dividend.DividendTypeValidator(v); err != nil {
			return &ValidationError{Name: "dividend_type", err: fmt.Errorf(`ent: validator failed for field "Dividend.dividend_type": %w`, err)}
		}
	}
	return nil
}

func (du *DividendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dividend.Table,
			Columns: dividend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dividend.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.CashAmount(); ok {
		_spec.SetField(dividend.FieldCashAmount, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedCashAmount(); ok {
		_spec.AddField(dividend.FieldCashAmount, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.DeclarationDate(); ok {
		_spec.SetField(dividend.FieldDeclarationDate, field.TypeTime, value)
	}
	if value, ok := du.mutation.DividendType(); ok {
		_spec.SetField(dividend.FieldDividendType, field.TypeEnum, value)
	}
	if value, ok := du.mutation.ExDividendDate(); ok {
		_spec.SetField(dividend.FieldExDividendDate, field.TypeTime, value)
	}
	if value, ok := du.mutation.Frequency(); ok {
		_spec.SetField(dividend.FieldFrequency, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedFrequency(); ok {
		_spec.AddField(dividend.FieldFrequency, field.TypeInt, value)
	}
	if value, ok := du.mutation.RecordDate(); ok {
		_spec.SetField(dividend.FieldRecordDate, field.TypeTime, value)
	}
	if value, ok := du.mutation.PayDate(); ok {
		_spec.SetField(dividend.FieldPayDate, field.TypeTime, value)
	}
	if du.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dividend.StockTable,
			Columns: dividend.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedStockIDs(); len(nodes) > 0 && !du.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dividend.StockTable,
			Columns: dividend.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dividend.StockTable,
			Columns: dividend.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dividend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DividendUpdateOne is the builder for updating a single Dividend entity.
type DividendUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DividendMutation
}

// SetCashAmount sets the "cash_amount" field.
func (duo *DividendUpdateOne) SetCashAmount(f float64) *DividendUpdateOne {
	duo.mutation.ResetCashAmount()
	duo.mutation.SetCashAmount(f)
	return duo
}

// AddCashAmount adds f to the "cash_amount" field.
func (duo *DividendUpdateOne) AddCashAmount(f float64) *DividendUpdateOne {
	duo.mutation.AddCashAmount(f)
	return duo
}

// SetDeclarationDate sets the "declaration_date" field.
func (duo *DividendUpdateOne) SetDeclarationDate(t time.Time) *DividendUpdateOne {
	duo.mutation.SetDeclarationDate(t)
	return duo
}

// SetDividendType sets the "dividend_type" field.
func (duo *DividendUpdateOne) SetDividendType(dt dividend.DividendType) *DividendUpdateOne {
	duo.mutation.SetDividendType(dt)
	return duo
}

// SetExDividendDate sets the "ex_dividend_date" field.
func (duo *DividendUpdateOne) SetExDividendDate(t time.Time) *DividendUpdateOne {
	duo.mutation.SetExDividendDate(t)
	return duo
}

// SetFrequency sets the "frequency" field.
func (duo *DividendUpdateOne) SetFrequency(i int) *DividendUpdateOne {
	duo.mutation.ResetFrequency()
	duo.mutation.SetFrequency(i)
	return duo
}

// AddFrequency adds i to the "frequency" field.
func (duo *DividendUpdateOne) AddFrequency(i int) *DividendUpdateOne {
	duo.mutation.AddFrequency(i)
	return duo
}

// SetRecordDate sets the "record_date" field.
func (duo *DividendUpdateOne) SetRecordDate(t time.Time) *DividendUpdateOne {
	duo.mutation.SetRecordDate(t)
	return duo
}

// SetPayDate sets the "pay_date" field.
func (duo *DividendUpdateOne) SetPayDate(t time.Time) *DividendUpdateOne {
	duo.mutation.SetPayDate(t)
	return duo
}

// AddStockIDs adds the "stock" edge to the Entity entity by IDs.
func (duo *DividendUpdateOne) AddStockIDs(ids ...int) *DividendUpdateOne {
	duo.mutation.AddStockIDs(ids...)
	return duo
}

// AddStock adds the "stock" edges to the Entity entity.
func (duo *DividendUpdateOne) AddStock(e ...*Entity) *DividendUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duo.AddStockIDs(ids...)
}

// Mutation returns the DividendMutation object of the builder.
func (duo *DividendUpdateOne) Mutation() *DividendMutation {
	return duo.mutation
}

// ClearStock clears all "stock" edges to the Entity entity.
func (duo *DividendUpdateOne) ClearStock() *DividendUpdateOne {
	duo.mutation.ClearStock()
	return duo
}

// RemoveStockIDs removes the "stock" edge to Entity entities by IDs.
func (duo *DividendUpdateOne) RemoveStockIDs(ids ...int) *DividendUpdateOne {
	duo.mutation.RemoveStockIDs(ids...)
	return duo
}

// RemoveStock removes "stock" edges to Entity entities.
func (duo *DividendUpdateOne) RemoveStock(e ...*Entity) *DividendUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return duo.RemoveStockIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DividendUpdateOne) Select(field string, fields ...string) *DividendUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dividend entity.
func (duo *DividendUpdateOne) Save(ctx context.Context) (*Dividend, error) {
	return withHooks[*Dividend, DividendMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DividendUpdateOne) SaveX(ctx context.Context) *Dividend {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DividendUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DividendUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DividendUpdateOne) check() error {
	if v, ok := duo.mutation.DividendType(); ok {
		if err := dividend.DividendTypeValidator(v); err != nil {
			return &ValidationError{Name: "dividend_type", err: fmt.Errorf(`ent: validator failed for field "Dividend.dividend_type": %w`, err)}
		}
	}
	return nil
}

func (duo *DividendUpdateOne) sqlSave(ctx context.Context) (_node *Dividend, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dividend.Table,
			Columns: dividend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dividend.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dividend.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dividend.FieldID)
		for _, f := range fields {
			if !dividend.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dividend.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.CashAmount(); ok {
		_spec.SetField(dividend.FieldCashAmount, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedCashAmount(); ok {
		_spec.AddField(dividend.FieldCashAmount, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.DeclarationDate(); ok {
		_spec.SetField(dividend.FieldDeclarationDate, field.TypeTime, value)
	}
	if value, ok := duo.mutation.DividendType(); ok {
		_spec.SetField(dividend.FieldDividendType, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.ExDividendDate(); ok {
		_spec.SetField(dividend.FieldExDividendDate, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Frequency(); ok {
		_spec.SetField(dividend.FieldFrequency, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedFrequency(); ok {
		_spec.AddField(dividend.FieldFrequency, field.TypeInt, value)
	}
	if value, ok := duo.mutation.RecordDate(); ok {
		_spec.SetField(dividend.FieldRecordDate, field.TypeTime, value)
	}
	if value, ok := duo.mutation.PayDate(); ok {
		_spec.SetField(dividend.FieldPayDate, field.TypeTime, value)
	}
	if duo.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dividend.StockTable,
			Columns: dividend.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedStockIDs(); len(nodes) > 0 && !duo.mutation.StockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dividend.StockTable,
			Columns: dividend.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dividend.StockTable,
			Columns: dividend.StockPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: entity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dividend{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dividend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
