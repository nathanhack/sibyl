// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/nathanhack/sibyl/ent"
)

// The BarGroupFunc type is an adapter to allow the use of ordinary
// function as BarGroup mutator.
type BarGroupFunc func(context.Context, *ent.BarGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BarGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BarGroupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BarGroupMutation", m)
}

// The BarRecordFunc type is an adapter to allow the use of ordinary
// function as BarRecord mutator.
type BarRecordFunc func(context.Context, *ent.BarRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BarRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BarRecordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BarRecordMutation", m)
}

// The BarTimeRangeFunc type is an adapter to allow the use of ordinary
// function as BarTimeRange mutator.
type BarTimeRangeFunc func(context.Context, *ent.BarTimeRangeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BarTimeRangeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BarTimeRangeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BarTimeRangeMutation", m)
}

// The DataSourceFunc type is an adapter to allow the use of ordinary
// function as DataSource mutator.
type DataSourceFunc func(context.Context, *ent.DataSourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DataSourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DataSourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DataSourceMutation", m)
}

// The DividendFunc type is an adapter to allow the use of ordinary
// function as Dividend mutator.
type DividendFunc func(context.Context, *ent.DividendMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DividendFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.DividendMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DividendMutation", m)
}

// The EntityFunc type is an adapter to allow the use of ordinary
// function as Entity mutator.
type EntityFunc func(context.Context, *ent.EntityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EntityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EntityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EntityMutation", m)
}

// The ExchangeFunc type is an adapter to allow the use of ordinary
// function as Exchange mutator.
type ExchangeFunc func(context.Context, *ent.ExchangeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExchangeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ExchangeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExchangeMutation", m)
}

// The FinancialFunc type is an adapter to allow the use of ordinary
// function as Financial mutator.
type FinancialFunc func(context.Context, *ent.FinancialMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FinancialFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FinancialMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FinancialMutation", m)
}

// The IntervalFunc type is an adapter to allow the use of ordinary
// function as Interval mutator.
type IntervalFunc func(context.Context, *ent.IntervalMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f IntervalFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.IntervalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.IntervalMutation", m)
}

// The MarketHoursFunc type is an adapter to allow the use of ordinary
// function as MarketHours mutator.
type MarketHoursFunc func(context.Context, *ent.MarketHoursMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MarketHoursFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MarketHoursMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MarketHoursMutation", m)
}

// The MarketInfoFunc type is an adapter to allow the use of ordinary
// function as MarketInfo mutator.
type MarketInfoFunc func(context.Context, *ent.MarketInfoMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MarketInfoFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MarketInfoMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MarketInfoMutation", m)
}

// The SplitFunc type is an adapter to allow the use of ordinary
// function as Split mutator.
type SplitFunc func(context.Context, *ent.SplitMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SplitFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SplitMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SplitMutation", m)
}

// The TradeConditionFunc type is an adapter to allow the use of ordinary
// function as TradeCondition mutator.
type TradeConditionFunc func(context.Context, *ent.TradeConditionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TradeConditionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TradeConditionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TradeConditionMutation", m)
}

// The TradeCorrectionFunc type is an adapter to allow the use of ordinary
// function as TradeCorrection mutator.
type TradeCorrectionFunc func(context.Context, *ent.TradeCorrectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TradeCorrectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TradeCorrectionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TradeCorrectionMutation", m)
}

// The TradeRecordFunc type is an adapter to allow the use of ordinary
// function as TradeRecord mutator.
type TradeRecordFunc func(context.Context, *ent.TradeRecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TradeRecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TradeRecordMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TradeRecordMutation", m)
}

// The TradeTimeRangeFunc type is an adapter to allow the use of ordinary
// function as TradeTimeRange mutator.
type TradeTimeRangeFunc func(context.Context, *ent.TradeTimeRangeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TradeTimeRangeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TradeTimeRangeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TradeTimeRangeMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
