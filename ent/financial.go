// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/financial"
)

// Financial is the model entity for the Financial schema.
type Financial struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FinancialQuery when eager-loading is set.
	Edges FinancialEdges `json:"edges"`
}

// FinancialEdges holds the relations/edges for other nodes in the graph.
type FinancialEdges struct {
	// Stock holds the value of the stock edge.
	Stock []*Entity `json:"stock,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StockOrErr returns the Stock value or an error if the edge
// was not loaded in eager-loading.
func (e FinancialEdges) StockOrErr() ([]*Entity, error) {
	if e.loadedTypes[0] {
		return e.Stock, nil
	}
	return nil, &NotLoadedError{edge: "stock"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Financial) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case financial.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Financial", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Financial fields.
func (f *Financial) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case financial.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		}
	}
	return nil
}

// QueryStock queries the "stock" edge of the Financial entity.
func (f *Financial) QueryStock() *EntityQuery {
	return (&FinancialClient{config: f.config}).QueryStock(f)
}

// Update returns a builder for updating this Financial.
// Note that you need to call Financial.Unwrap() before calling this method if this Financial
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Financial) Update() *FinancialUpdateOne {
	return (&FinancialClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Financial entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Financial) Unwrap() *Financial {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Financial is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Financial) String() string {
	var builder strings.Builder
	builder.WriteString("Financial(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Financials is a parsable slice of Financial.
type Financials []*Financial

func (f Financials) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
