// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/markethours"
	"github.com/nathanhack/sibyl/ent/marketinfo"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// MarketInfoQuery is the builder for querying MarketInfo entities.
type MarketInfoQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	inters     []Interceptor
	predicates []predicate.MarketInfo
	withHours  *MarketHoursQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MarketInfoQuery builder.
func (miq *MarketInfoQuery) Where(ps ...predicate.MarketInfo) *MarketInfoQuery {
	miq.predicates = append(miq.predicates, ps...)
	return miq
}

// Limit the number of records to be returned by this query.
func (miq *MarketInfoQuery) Limit(limit int) *MarketInfoQuery {
	miq.limit = &limit
	return miq
}

// Offset to start from.
func (miq *MarketInfoQuery) Offset(offset int) *MarketInfoQuery {
	miq.offset = &offset
	return miq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (miq *MarketInfoQuery) Unique(unique bool) *MarketInfoQuery {
	miq.unique = &unique
	return miq
}

// Order specifies how the records should be ordered.
func (miq *MarketInfoQuery) Order(o ...OrderFunc) *MarketInfoQuery {
	miq.order = append(miq.order, o...)
	return miq
}

// QueryHours chains the current query on the "hours" edge.
func (miq *MarketInfoQuery) QueryHours() *MarketHoursQuery {
	query := (&MarketHoursClient{config: miq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := miq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := miq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(marketinfo.Table, marketinfo.FieldID, selector),
			sqlgraph.To(markethours.Table, markethours.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, marketinfo.HoursTable, marketinfo.HoursColumn),
		)
		fromU = sqlgraph.SetNeighbors(miq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MarketInfo entity from the query.
// Returns a *NotFoundError when no MarketInfo was found.
func (miq *MarketInfoQuery) First(ctx context.Context) (*MarketInfo, error) {
	nodes, err := miq.Limit(1).All(newQueryContext(ctx, TypeMarketInfo, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{marketinfo.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (miq *MarketInfoQuery) FirstX(ctx context.Context) *MarketInfo {
	node, err := miq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MarketInfo ID from the query.
// Returns a *NotFoundError when no MarketInfo ID was found.
func (miq *MarketInfoQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = miq.Limit(1).IDs(newQueryContext(ctx, TypeMarketInfo, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{marketinfo.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (miq *MarketInfoQuery) FirstIDX(ctx context.Context) int {
	id, err := miq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MarketInfo entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MarketInfo entity is found.
// Returns a *NotFoundError when no MarketInfo entities are found.
func (miq *MarketInfoQuery) Only(ctx context.Context) (*MarketInfo, error) {
	nodes, err := miq.Limit(2).All(newQueryContext(ctx, TypeMarketInfo, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{marketinfo.Label}
	default:
		return nil, &NotSingularError{marketinfo.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (miq *MarketInfoQuery) OnlyX(ctx context.Context) *MarketInfo {
	node, err := miq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MarketInfo ID in the query.
// Returns a *NotSingularError when more than one MarketInfo ID is found.
// Returns a *NotFoundError when no entities are found.
func (miq *MarketInfoQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = miq.Limit(2).IDs(newQueryContext(ctx, TypeMarketInfo, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{marketinfo.Label}
	default:
		err = &NotSingularError{marketinfo.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (miq *MarketInfoQuery) OnlyIDX(ctx context.Context) int {
	id, err := miq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MarketInfos.
func (miq *MarketInfoQuery) All(ctx context.Context) ([]*MarketInfo, error) {
	ctx = newQueryContext(ctx, TypeMarketInfo, "All")
	if err := miq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MarketInfo, *MarketInfoQuery]()
	return withInterceptors[[]*MarketInfo](ctx, miq, qr, miq.inters)
}

// AllX is like All, but panics if an error occurs.
func (miq *MarketInfoQuery) AllX(ctx context.Context) []*MarketInfo {
	nodes, err := miq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MarketInfo IDs.
func (miq *MarketInfoQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeMarketInfo, "IDs")
	if err := miq.Select(marketinfo.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (miq *MarketInfoQuery) IDsX(ctx context.Context) []int {
	ids, err := miq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (miq *MarketInfoQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeMarketInfo, "Count")
	if err := miq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, miq, querierCount[*MarketInfoQuery](), miq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (miq *MarketInfoQuery) CountX(ctx context.Context) int {
	count, err := miq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (miq *MarketInfoQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeMarketInfo, "Exist")
	switch _, err := miq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (miq *MarketInfoQuery) ExistX(ctx context.Context) bool {
	exist, err := miq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MarketInfoQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (miq *MarketInfoQuery) Clone() *MarketInfoQuery {
	if miq == nil {
		return nil
	}
	return &MarketInfoQuery{
		config:     miq.config,
		limit:      miq.limit,
		offset:     miq.offset,
		order:      append([]OrderFunc{}, miq.order...),
		inters:     append([]Interceptor{}, miq.inters...),
		predicates: append([]predicate.MarketInfo{}, miq.predicates...),
		withHours:  miq.withHours.Clone(),
		// clone intermediate query.
		sql:    miq.sql.Clone(),
		path:   miq.path,
		unique: miq.unique,
	}
}

// WithHours tells the query-builder to eager-load the nodes that are connected to
// the "hours" edge. The optional arguments are used to configure the query builder of the edge.
func (miq *MarketInfoQuery) WithHours(opts ...func(*MarketHoursQuery)) *MarketInfoQuery {
	query := (&MarketHoursClient{config: miq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	miq.withHours = query
	return miq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HoursStart time.Time `json:"hours_start,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MarketInfo.Query().
//		GroupBy(marketinfo.FieldHoursStart).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (miq *MarketInfoQuery) GroupBy(field string, fields ...string) *MarketInfoGroupBy {
	miq.fields = append([]string{field}, fields...)
	grbuild := &MarketInfoGroupBy{build: miq}
	grbuild.flds = &miq.fields
	grbuild.label = marketinfo.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HoursStart time.Time `json:"hours_start,omitempty"`
//	}
//
//	client.MarketInfo.Query().
//		Select(marketinfo.FieldHoursStart).
//		Scan(ctx, &v)
func (miq *MarketInfoQuery) Select(fields ...string) *MarketInfoSelect {
	miq.fields = append(miq.fields, fields...)
	sbuild := &MarketInfoSelect{MarketInfoQuery: miq}
	sbuild.label = marketinfo.Label
	sbuild.flds, sbuild.scan = &miq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MarketInfoSelect configured with the given aggregations.
func (miq *MarketInfoQuery) Aggregate(fns ...AggregateFunc) *MarketInfoSelect {
	return miq.Select().Aggregate(fns...)
}

func (miq *MarketInfoQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range miq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, miq); err != nil {
				return err
			}
		}
	}
	for _, f := range miq.fields {
		if !marketinfo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if miq.path != nil {
		prev, err := miq.path(ctx)
		if err != nil {
			return err
		}
		miq.sql = prev
	}
	return nil
}

func (miq *MarketInfoQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MarketInfo, error) {
	var (
		nodes       = []*MarketInfo{}
		_spec       = miq.querySpec()
		loadedTypes = [1]bool{
			miq.withHours != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MarketInfo).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MarketInfo{config: miq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, miq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := miq.withHours; query != nil {
		if err := miq.loadHours(ctx, query, nodes,
			func(n *MarketInfo) { n.Edges.Hours = []*MarketHours{} },
			func(n *MarketInfo, e *MarketHours) { n.Edges.Hours = append(n.Edges.Hours, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (miq *MarketInfoQuery) loadHours(ctx context.Context, query *MarketHoursQuery, nodes []*MarketInfo, init func(*MarketInfo), assign func(*MarketInfo, *MarketHours)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*MarketInfo)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.MarketHours(func(s *sql.Selector) {
		s.Where(sql.InValues(marketinfo.HoursColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.market_info_hours
		if fk == nil {
			return fmt.Errorf(`foreign-key "market_info_hours" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "market_info_hours" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (miq *MarketInfoQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := miq.querySpec()
	_spec.Node.Columns = miq.fields
	if len(miq.fields) > 0 {
		_spec.Unique = miq.unique != nil && *miq.unique
	}
	return sqlgraph.CountNodes(ctx, miq.driver, _spec)
}

func (miq *MarketInfoQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   marketinfo.Table,
			Columns: marketinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: marketinfo.FieldID,
			},
		},
		From:   miq.sql,
		Unique: true,
	}
	if unique := miq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := miq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, marketinfo.FieldID)
		for i := range fields {
			if fields[i] != marketinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := miq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := miq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := miq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := miq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (miq *MarketInfoQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(miq.driver.Dialect())
	t1 := builder.Table(marketinfo.Table)
	columns := miq.fields
	if len(columns) == 0 {
		columns = marketinfo.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if miq.sql != nil {
		selector = miq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if miq.unique != nil && *miq.unique {
		selector.Distinct()
	}
	for _, p := range miq.predicates {
		p(selector)
	}
	for _, p := range miq.order {
		p(selector)
	}
	if offset := miq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := miq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MarketInfoGroupBy is the group-by builder for MarketInfo entities.
type MarketInfoGroupBy struct {
	selector
	build *MarketInfoQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (migb *MarketInfoGroupBy) Aggregate(fns ...AggregateFunc) *MarketInfoGroupBy {
	migb.fns = append(migb.fns, fns...)
	return migb
}

// Scan applies the selector query and scans the result into the given value.
func (migb *MarketInfoGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeMarketInfo, "GroupBy")
	if err := migb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MarketInfoQuery, *MarketInfoGroupBy](ctx, migb.build, migb, migb.build.inters, v)
}

func (migb *MarketInfoGroupBy) sqlScan(ctx context.Context, root *MarketInfoQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(migb.fns))
	for _, fn := range migb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*migb.flds)+len(migb.fns))
		for _, f := range *migb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*migb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := migb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MarketInfoSelect is the builder for selecting fields of MarketInfo entities.
type MarketInfoSelect struct {
	*MarketInfoQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mis *MarketInfoSelect) Aggregate(fns ...AggregateFunc) *MarketInfoSelect {
	mis.fns = append(mis.fns, fns...)
	return mis
}

// Scan applies the selector query and scans the result into the given value.
func (mis *MarketInfoSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeMarketInfo, "Select")
	if err := mis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MarketInfoQuery, *MarketInfoSelect](ctx, mis.MarketInfoQuery, mis, mis.inters, v)
}

func (mis *MarketInfoSelect) sqlScan(ctx context.Context, root *MarketInfoQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mis.fns))
	for _, fn := range mis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
