// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/bargroup"
	"github.com/nathanhack/sibyl/ent/bartimerange"
	"github.com/nathanhack/sibyl/ent/interval"
)

// BarTimeRangeCreate is the builder for creating a BarTimeRange entity.
type BarTimeRangeCreate struct {
	config
	mutation *BarTimeRangeMutation
	hooks    []Hook
}

// SetStart sets the "start" field.
func (btrc *BarTimeRangeCreate) SetStart(t time.Time) *BarTimeRangeCreate {
	btrc.mutation.SetStart(t)
	return btrc
}

// SetEnd sets the "end" field.
func (btrc *BarTimeRangeCreate) SetEnd(t time.Time) *BarTimeRangeCreate {
	btrc.mutation.SetEnd(t)
	return btrc
}

// SetCount sets the "count" field.
func (btrc *BarTimeRangeCreate) SetCount(i int) *BarTimeRangeCreate {
	btrc.mutation.SetCount(i)
	return btrc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (btrc *BarTimeRangeCreate) SetNillableCount(i *int) *BarTimeRangeCreate {
	if i != nil {
		btrc.SetCount(*i)
	}
	return btrc
}

// SetIntervalID sets the "interval_id" field.
func (btrc *BarTimeRangeCreate) SetIntervalID(i int) *BarTimeRangeCreate {
	btrc.mutation.SetIntervalID(i)
	return btrc
}

// SetStatus sets the "status" field.
func (btrc *BarTimeRangeCreate) SetStatus(b bartimerange.Status) *BarTimeRangeCreate {
	btrc.mutation.SetStatus(b)
	return btrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (btrc *BarTimeRangeCreate) SetNillableStatus(b *bartimerange.Status) *BarTimeRangeCreate {
	if b != nil {
		btrc.SetStatus(*b)
	}
	return btrc
}

// SetUpdateTime sets the "update_time" field.
func (btrc *BarTimeRangeCreate) SetUpdateTime(t time.Time) *BarTimeRangeCreate {
	btrc.mutation.SetUpdateTime(t)
	return btrc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (btrc *BarTimeRangeCreate) SetNillableUpdateTime(t *time.Time) *BarTimeRangeCreate {
	if t != nil {
		btrc.SetUpdateTime(*t)
	}
	return btrc
}

// SetInterval sets the "interval" edge to the Interval entity.
func (btrc *BarTimeRangeCreate) SetInterval(i *Interval) *BarTimeRangeCreate {
	return btrc.SetIntervalID(i.ID)
}

// AddGroupIDs adds the "groups" edge to the BarGroup entity by IDs.
func (btrc *BarTimeRangeCreate) AddGroupIDs(ids ...int) *BarTimeRangeCreate {
	btrc.mutation.AddGroupIDs(ids...)
	return btrc
}

// AddGroups adds the "groups" edges to the BarGroup entity.
func (btrc *BarTimeRangeCreate) AddGroups(b ...*BarGroup) *BarTimeRangeCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return btrc.AddGroupIDs(ids...)
}

// Mutation returns the BarTimeRangeMutation object of the builder.
func (btrc *BarTimeRangeCreate) Mutation() *BarTimeRangeMutation {
	return btrc.mutation
}

// Save creates the BarTimeRange in the database.
func (btrc *BarTimeRangeCreate) Save(ctx context.Context) (*BarTimeRange, error) {
	btrc.defaults()
	return withHooks(ctx, btrc.sqlSave, btrc.mutation, btrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (btrc *BarTimeRangeCreate) SaveX(ctx context.Context) *BarTimeRange {
	v, err := btrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btrc *BarTimeRangeCreate) Exec(ctx context.Context) error {
	_, err := btrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btrc *BarTimeRangeCreate) ExecX(ctx context.Context) {
	if err := btrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (btrc *BarTimeRangeCreate) defaults() {
	if _, ok := btrc.mutation.Count(); !ok {
		v := bartimerange.DefaultCount
		btrc.mutation.SetCount(v)
	}
	if _, ok := btrc.mutation.Status(); !ok {
		v := bartimerange.DefaultStatus
		btrc.mutation.SetStatus(v)
	}
	if _, ok := btrc.mutation.UpdateTime(); !ok {
		v := bartimerange.DefaultUpdateTime()
		btrc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btrc *BarTimeRangeCreate) check() error {
	if _, ok := btrc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "BarTimeRange.start"`)}
	}
	if _, ok := btrc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "BarTimeRange.end"`)}
	}
	if _, ok := btrc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "BarTimeRange.count"`)}
	}
	if _, ok := btrc.mutation.IntervalID(); !ok {
		return &ValidationError{Name: "interval_id", err: errors.New(`ent: missing required field "BarTimeRange.interval_id"`)}
	}
	if _, ok := btrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "BarTimeRange.status"`)}
	}
	if v, ok := btrc.mutation.Status(); ok {
		if err := bartimerange.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "BarTimeRange.status": %w`, err)}
		}
	}
	if _, ok := btrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BarTimeRange.update_time"`)}
	}
	if len(btrc.mutation.IntervalIDs()) == 0 {
		return &ValidationError{Name: "interval", err: errors.New(`ent: missing required edge "BarTimeRange.interval"`)}
	}
	return nil
}

func (btrc *BarTimeRangeCreate) sqlSave(ctx context.Context) (*BarTimeRange, error) {
	if err := btrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := btrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, btrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	btrc.mutation.id = &_node.ID
	btrc.mutation.done = true
	return _node, nil
}

func (btrc *BarTimeRangeCreate) createSpec() (*BarTimeRange, *sqlgraph.CreateSpec) {
	var (
		_node = &BarTimeRange{config: btrc.config}
		_spec = sqlgraph.NewCreateSpec(bartimerange.Table, sqlgraph.NewFieldSpec(bartimerange.FieldID, field.TypeInt))
	)
	if value, ok := btrc.mutation.Start(); ok {
		_spec.SetField(bartimerange.FieldStart, field.TypeTime, value)
		_node.Start = value
	}
	if value, ok := btrc.mutation.End(); ok {
		_spec.SetField(bartimerange.FieldEnd, field.TypeTime, value)
		_node.End = value
	}
	if value, ok := btrc.mutation.Count(); ok {
		_spec.SetField(bartimerange.FieldCount, field.TypeInt, value)
		_node.Count = value
	}
	if value, ok := btrc.mutation.Status(); ok {
		_spec.SetField(bartimerange.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := btrc.mutation.UpdateTime(); ok {
		_spec.SetField(bartimerange.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := btrc.mutation.IntervalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bartimerange.IntervalTable,
			Columns: []string{bartimerange.IntervalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(interval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IntervalID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := btrc.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bartimerange.GroupsTable,
			Columns: []string{bartimerange.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bargroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BarTimeRangeCreateBulk is the builder for creating many BarTimeRange entities in bulk.
type BarTimeRangeCreateBulk struct {
	config
	err      error
	builders []*BarTimeRangeCreate
}

// Save creates the BarTimeRange entities in the database.
func (btrcb *BarTimeRangeCreateBulk) Save(ctx context.Context) ([]*BarTimeRange, error) {
	if btrcb.err != nil {
		return nil, btrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(btrcb.builders))
	nodes := make([]*BarTimeRange, len(btrcb.builders))
	mutators := make([]Mutator, len(btrcb.builders))
	for i := range btrcb.builders {
		func(i int, root context.Context) {
			builder := btrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BarTimeRangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, btrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, btrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, btrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (btrcb *BarTimeRangeCreateBulk) SaveX(ctx context.Context) []*BarTimeRange {
	v, err := btrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btrcb *BarTimeRangeCreateBulk) Exec(ctx context.Context) error {
	_, err := btrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btrcb *BarTimeRangeCreateBulk) ExecX(ctx context.Context) {
	if err := btrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
