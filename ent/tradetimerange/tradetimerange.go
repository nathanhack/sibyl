// Code generated by ent, DO NOT EDIT.

package tradetimerange

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tradetimerange type in the database.
	Label = "trade_time_range"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// FieldIntervalID holds the string denoting the interval_id field in the database.
	FieldIntervalID = "interval_id"
	// EdgeInterval holds the string denoting the interval edge name in mutations.
	EdgeInterval = "interval"
	// EdgeRecords holds the string denoting the records edge name in mutations.
	EdgeRecords = "records"
	// Table holds the table name of the tradetimerange in the database.
	Table = "trade_time_ranges"
	// IntervalTable is the table that holds the interval relation/edge.
	IntervalTable = "trade_time_ranges"
	// IntervalInverseTable is the table name for the Interval entity.
	// It exists in this package in order to avoid circular dependency with the "interval" package.
	IntervalInverseTable = "intervals"
	// IntervalColumn is the table column denoting the interval relation/edge.
	IntervalColumn = "interval_id"
	// RecordsTable is the table that holds the records relation/edge.
	RecordsTable = "trade_records"
	// RecordsInverseTable is the table name for the TradeRecord entity.
	// It exists in this package in order to avoid circular dependency with the "traderecord" package.
	RecordsInverseTable = "trade_records"
	// RecordsColumn is the table column denoting the records relation/edge.
	RecordsColumn = "time_range_id"
)

// Columns holds all SQL columns for tradetimerange fields.
var Columns = []string{
	FieldID,
	FieldStart,
	FieldEnd,
	FieldIntervalID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the TradeTimeRange queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStart orders the results by the start field.
func ByStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStart, opts...).ToFunc()
}

// ByEnd orders the results by the end field.
func ByEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnd, opts...).ToFunc()
}

// ByIntervalID orders the results by the interval_id field.
func ByIntervalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntervalID, opts...).ToFunc()
}

// ByIntervalField orders the results by interval field.
func ByIntervalField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIntervalStep(), sql.OrderByField(field, opts...))
	}
}

// ByRecordsCount orders the results by records count.
func ByRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRecordsStep(), opts...)
	}
}

// ByRecords orders the results by records terms.
func ByRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIntervalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IntervalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IntervalTable, IntervalColumn),
	)
}
func newRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RecordsTable, RecordsColumn),
	)
}
