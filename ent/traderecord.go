// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/traderecord"
	"github.com/nathanhack/sibyl/ent/tradetimerange"
)

// TradeRecord is the model entity for the TradeRecord schema.
type TradeRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// Volume holds the value of the "volume" field.
	Volume int32 `json:"volume,omitempty"`
	// TimeRangeID holds the value of the "time_range_id" field.
	TimeRangeID int `json:"time_range_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TradeRecordQuery when eager-loading is set.
	Edges TradeRecordEdges `json:"edges"`
}

// TradeRecordEdges holds the relations/edges for other nodes in the graph.
type TradeRecordEdges struct {
	// TimeRange holds the value of the time_range edge.
	TimeRange *TradeTimeRange `json:"time_range,omitempty"`
	// Conditions holds the value of the conditions edge.
	Conditions []*TradeCondition `json:"conditions,omitempty"`
	// Correction holds the value of the correction edge.
	Correction []*TradeCorrection `json:"correction,omitempty"`
	// Exchange holds the value of the exchange edge.
	Exchange []*Exchange `json:"exchange,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TimeRangeOrErr returns the TimeRange value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TradeRecordEdges) TimeRangeOrErr() (*TradeTimeRange, error) {
	if e.loadedTypes[0] {
		if e.TimeRange == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tradetimerange.Label}
		}
		return e.TimeRange, nil
	}
	return nil, &NotLoadedError{edge: "time_range"}
}

// ConditionsOrErr returns the Conditions value or an error if the edge
// was not loaded in eager-loading.
func (e TradeRecordEdges) ConditionsOrErr() ([]*TradeCondition, error) {
	if e.loadedTypes[1] {
		return e.Conditions, nil
	}
	return nil, &NotLoadedError{edge: "conditions"}
}

// CorrectionOrErr returns the Correction value or an error if the edge
// was not loaded in eager-loading.
func (e TradeRecordEdges) CorrectionOrErr() ([]*TradeCorrection, error) {
	if e.loadedTypes[2] {
		return e.Correction, nil
	}
	return nil, &NotLoadedError{edge: "correction"}
}

// ExchangeOrErr returns the Exchange value or an error if the edge
// was not loaded in eager-loading.
func (e TradeRecordEdges) ExchangeOrErr() ([]*Exchange, error) {
	if e.loadedTypes[3] {
		return e.Exchange, nil
	}
	return nil, &NotLoadedError{edge: "exchange"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TradeRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case traderecord.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case traderecord.FieldID, traderecord.FieldVolume, traderecord.FieldTimeRangeID:
			values[i] = new(sql.NullInt64)
		case traderecord.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TradeRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TradeRecord fields.
func (tr *TradeRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case traderecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case traderecord.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				tr.Price = value.Float64
			}
		case traderecord.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				tr.Timestamp = value.Time
			}
		case traderecord.FieldVolume:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field volume", values[i])
			} else if value.Valid {
				tr.Volume = int32(value.Int64)
			}
		case traderecord.FieldTimeRangeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_range_id", values[i])
			} else if value.Valid {
				tr.TimeRangeID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTimeRange queries the "time_range" edge of the TradeRecord entity.
func (tr *TradeRecord) QueryTimeRange() *TradeTimeRangeQuery {
	return (&TradeRecordClient{config: tr.config}).QueryTimeRange(tr)
}

// QueryConditions queries the "conditions" edge of the TradeRecord entity.
func (tr *TradeRecord) QueryConditions() *TradeConditionQuery {
	return (&TradeRecordClient{config: tr.config}).QueryConditions(tr)
}

// QueryCorrection queries the "correction" edge of the TradeRecord entity.
func (tr *TradeRecord) QueryCorrection() *TradeCorrectionQuery {
	return (&TradeRecordClient{config: tr.config}).QueryCorrection(tr)
}

// QueryExchange queries the "exchange" edge of the TradeRecord entity.
func (tr *TradeRecord) QueryExchange() *ExchangeQuery {
	return (&TradeRecordClient{config: tr.config}).QueryExchange(tr)
}

// Update returns a builder for updating this TradeRecord.
// Note that you need to call TradeRecord.Unwrap() before calling this method if this TradeRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TradeRecord) Update() *TradeRecordUpdateOne {
	return (&TradeRecordClient{config: tr.config}).UpdateOne(tr)
}

// Unwrap unwraps the TradeRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TradeRecord) Unwrap() *TradeRecord {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TradeRecord is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TradeRecord) String() string {
	var builder strings.Builder
	builder.WriteString("TradeRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", tr.Price))
	builder.WriteString(", ")
	builder.WriteString("timestamp=")
	builder.WriteString(tr.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("volume=")
	builder.WriteString(fmt.Sprintf("%v", tr.Volume))
	builder.WriteString(", ")
	builder.WriteString("time_range_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.TimeRangeID))
	builder.WriteByte(')')
	return builder.String()
}

// TradeRecords is a parsable slice of TradeRecord.
type TradeRecords []*TradeRecord

func (tr TradeRecords) config(cfg config) {
	for _i := range tr {
		tr[_i].config = cfg
	}
}
