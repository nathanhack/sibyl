// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nathanhack/sibyl/ent/markethours"
	"github.com/nathanhack/sibyl/ent/marketinfo"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// MarketHoursQuery is the builder for querying MarketHours entities.
type MarketHoursQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	inters         []Interceptor
	predicates     []predicate.MarketHours
	withMarketInfo *MarketInfoQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MarketHoursQuery builder.
func (mhq *MarketHoursQuery) Where(ps ...predicate.MarketHours) *MarketHoursQuery {
	mhq.predicates = append(mhq.predicates, ps...)
	return mhq
}

// Limit the number of records to be returned by this query.
func (mhq *MarketHoursQuery) Limit(limit int) *MarketHoursQuery {
	mhq.limit = &limit
	return mhq
}

// Offset to start from.
func (mhq *MarketHoursQuery) Offset(offset int) *MarketHoursQuery {
	mhq.offset = &offset
	return mhq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mhq *MarketHoursQuery) Unique(unique bool) *MarketHoursQuery {
	mhq.unique = &unique
	return mhq
}

// Order specifies how the records should be ordered.
func (mhq *MarketHoursQuery) Order(o ...OrderFunc) *MarketHoursQuery {
	mhq.order = append(mhq.order, o...)
	return mhq
}

// QueryMarketInfo chains the current query on the "market_info" edge.
func (mhq *MarketHoursQuery) QueryMarketInfo() *MarketInfoQuery {
	query := (&MarketInfoClient{config: mhq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mhq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mhq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(markethours.Table, markethours.FieldID, selector),
			sqlgraph.To(marketinfo.Table, marketinfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, markethours.MarketInfoTable, markethours.MarketInfoColumn),
		)
		fromU = sqlgraph.SetNeighbors(mhq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MarketHours entity from the query.
// Returns a *NotFoundError when no MarketHours was found.
func (mhq *MarketHoursQuery) First(ctx context.Context) (*MarketHours, error) {
	nodes, err := mhq.Limit(1).All(newQueryContext(ctx, TypeMarketHours, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{markethours.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mhq *MarketHoursQuery) FirstX(ctx context.Context) *MarketHours {
	node, err := mhq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MarketHours ID from the query.
// Returns a *NotFoundError when no MarketHours ID was found.
func (mhq *MarketHoursQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mhq.Limit(1).IDs(newQueryContext(ctx, TypeMarketHours, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{markethours.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mhq *MarketHoursQuery) FirstIDX(ctx context.Context) int {
	id, err := mhq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MarketHours entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MarketHours entity is found.
// Returns a *NotFoundError when no MarketHours entities are found.
func (mhq *MarketHoursQuery) Only(ctx context.Context) (*MarketHours, error) {
	nodes, err := mhq.Limit(2).All(newQueryContext(ctx, TypeMarketHours, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{markethours.Label}
	default:
		return nil, &NotSingularError{markethours.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mhq *MarketHoursQuery) OnlyX(ctx context.Context) *MarketHours {
	node, err := mhq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MarketHours ID in the query.
// Returns a *NotSingularError when more than one MarketHours ID is found.
// Returns a *NotFoundError when no entities are found.
func (mhq *MarketHoursQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mhq.Limit(2).IDs(newQueryContext(ctx, TypeMarketHours, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{markethours.Label}
	default:
		err = &NotSingularError{markethours.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mhq *MarketHoursQuery) OnlyIDX(ctx context.Context) int {
	id, err := mhq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MarketHoursSlice.
func (mhq *MarketHoursQuery) All(ctx context.Context) ([]*MarketHours, error) {
	ctx = newQueryContext(ctx, TypeMarketHours, "All")
	if err := mhq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*MarketHours, *MarketHoursQuery]()
	return withInterceptors[[]*MarketHours](ctx, mhq, qr, mhq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mhq *MarketHoursQuery) AllX(ctx context.Context) []*MarketHours {
	nodes, err := mhq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MarketHours IDs.
func (mhq *MarketHoursQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeMarketHours, "IDs")
	if err := mhq.Select(markethours.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mhq *MarketHoursQuery) IDsX(ctx context.Context) []int {
	ids, err := mhq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mhq *MarketHoursQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeMarketHours, "Count")
	if err := mhq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mhq, querierCount[*MarketHoursQuery](), mhq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mhq *MarketHoursQuery) CountX(ctx context.Context) int {
	count, err := mhq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mhq *MarketHoursQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeMarketHours, "Exist")
	switch _, err := mhq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mhq *MarketHoursQuery) ExistX(ctx context.Context) bool {
	exist, err := mhq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MarketHoursQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mhq *MarketHoursQuery) Clone() *MarketHoursQuery {
	if mhq == nil {
		return nil
	}
	return &MarketHoursQuery{
		config:         mhq.config,
		limit:          mhq.limit,
		offset:         mhq.offset,
		order:          append([]OrderFunc{}, mhq.order...),
		inters:         append([]Interceptor{}, mhq.inters...),
		predicates:     append([]predicate.MarketHours{}, mhq.predicates...),
		withMarketInfo: mhq.withMarketInfo.Clone(),
		// clone intermediate query.
		sql:    mhq.sql.Clone(),
		path:   mhq.path,
		unique: mhq.unique,
	}
}

// WithMarketInfo tells the query-builder to eager-load the nodes that are connected to
// the "market_info" edge. The optional arguments are used to configure the query builder of the edge.
func (mhq *MarketHoursQuery) WithMarketInfo(opts ...func(*MarketInfoQuery)) *MarketHoursQuery {
	query := (&MarketInfoClient{config: mhq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mhq.withMarketInfo = query
	return mhq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Date time.Time `json:"date,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MarketHours.Query().
//		GroupBy(markethours.FieldDate).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mhq *MarketHoursQuery) GroupBy(field string, fields ...string) *MarketHoursGroupBy {
	mhq.fields = append([]string{field}, fields...)
	grbuild := &MarketHoursGroupBy{build: mhq}
	grbuild.flds = &mhq.fields
	grbuild.label = markethours.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Date time.Time `json:"date,omitempty"`
//	}
//
//	client.MarketHours.Query().
//		Select(markethours.FieldDate).
//		Scan(ctx, &v)
func (mhq *MarketHoursQuery) Select(fields ...string) *MarketHoursSelect {
	mhq.fields = append(mhq.fields, fields...)
	sbuild := &MarketHoursSelect{MarketHoursQuery: mhq}
	sbuild.label = markethours.Label
	sbuild.flds, sbuild.scan = &mhq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MarketHoursSelect configured with the given aggregations.
func (mhq *MarketHoursQuery) Aggregate(fns ...AggregateFunc) *MarketHoursSelect {
	return mhq.Select().Aggregate(fns...)
}

func (mhq *MarketHoursQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mhq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mhq); err != nil {
				return err
			}
		}
	}
	for _, f := range mhq.fields {
		if !markethours.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mhq.path != nil {
		prev, err := mhq.path(ctx)
		if err != nil {
			return err
		}
		mhq.sql = prev
	}
	return nil
}

func (mhq *MarketHoursQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*MarketHours, error) {
	var (
		nodes       = []*MarketHours{}
		withFKs     = mhq.withFKs
		_spec       = mhq.querySpec()
		loadedTypes = [1]bool{
			mhq.withMarketInfo != nil,
		}
	)
	if mhq.withMarketInfo != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, markethours.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*MarketHours).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &MarketHours{config: mhq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mhq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mhq.withMarketInfo; query != nil {
		if err := mhq.loadMarketInfo(ctx, query, nodes, nil,
			func(n *MarketHours, e *MarketInfo) { n.Edges.MarketInfo = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mhq *MarketHoursQuery) loadMarketInfo(ctx context.Context, query *MarketInfoQuery, nodes []*MarketHours, init func(*MarketHours), assign func(*MarketHours, *MarketInfo)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*MarketHours)
	for i := range nodes {
		if nodes[i].market_info_hours == nil {
			continue
		}
		fk := *nodes[i].market_info_hours
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(marketinfo.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "market_info_hours" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mhq *MarketHoursQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mhq.querySpec()
	_spec.Node.Columns = mhq.fields
	if len(mhq.fields) > 0 {
		_spec.Unique = mhq.unique != nil && *mhq.unique
	}
	return sqlgraph.CountNodes(ctx, mhq.driver, _spec)
}

func (mhq *MarketHoursQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   markethours.Table,
			Columns: markethours.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: markethours.FieldID,
			},
		},
		From:   mhq.sql,
		Unique: true,
	}
	if unique := mhq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mhq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, markethours.FieldID)
		for i := range fields {
			if fields[i] != markethours.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mhq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mhq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mhq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mhq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mhq *MarketHoursQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mhq.driver.Dialect())
	t1 := builder.Table(markethours.Table)
	columns := mhq.fields
	if len(columns) == 0 {
		columns = markethours.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mhq.sql != nil {
		selector = mhq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mhq.unique != nil && *mhq.unique {
		selector.Distinct()
	}
	for _, p := range mhq.predicates {
		p(selector)
	}
	for _, p := range mhq.order {
		p(selector)
	}
	if offset := mhq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mhq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MarketHoursGroupBy is the group-by builder for MarketHours entities.
type MarketHoursGroupBy struct {
	selector
	build *MarketHoursQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mhgb *MarketHoursGroupBy) Aggregate(fns ...AggregateFunc) *MarketHoursGroupBy {
	mhgb.fns = append(mhgb.fns, fns...)
	return mhgb
}

// Scan applies the selector query and scans the result into the given value.
func (mhgb *MarketHoursGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeMarketHours, "GroupBy")
	if err := mhgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MarketHoursQuery, *MarketHoursGroupBy](ctx, mhgb.build, mhgb, mhgb.build.inters, v)
}

func (mhgb *MarketHoursGroupBy) sqlScan(ctx context.Context, root *MarketHoursQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mhgb.fns))
	for _, fn := range mhgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mhgb.flds)+len(mhgb.fns))
		for _, f := range *mhgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mhgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mhgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MarketHoursSelect is the builder for selecting fields of MarketHours entities.
type MarketHoursSelect struct {
	*MarketHoursQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mhs *MarketHoursSelect) Aggregate(fns ...AggregateFunc) *MarketHoursSelect {
	mhs.fns = append(mhs.fns, fns...)
	return mhs
}

// Scan applies the selector query and scans the result into the given value.
func (mhs *MarketHoursSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeMarketHours, "Select")
	if err := mhs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MarketHoursQuery, *MarketHoursSelect](ctx, mhs.MarketHoursQuery, mhs, mhs.inters, v)
}

func (mhs *MarketHoursSelect) sqlScan(ctx context.Context, root *MarketHoursQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mhs.fns))
	for _, fn := range mhs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mhs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mhs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
