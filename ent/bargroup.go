// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nathanhack/sibyl/ent/bargroup"
	"github.com/nathanhack/sibyl/ent/bartimerange"
)

// BarGroup is the model entity for the BarGroup schema.
type BarGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// First holds the value of the "first" field.
	First time.Time `json:"first,omitempty"`
	// Last holds the value of the "last" field.
	Last time.Time `json:"last,omitempty"`
	// Count holds the value of the "count" field.
	Count int `json:"count,omitempty"`
	// TimeRangeID holds the value of the "time_range_id" field.
	TimeRangeID int `json:"time_range_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BarGroupQuery when eager-loading is set.
	Edges BarGroupEdges `json:"edges"`
}

// BarGroupEdges holds the relations/edges for other nodes in the graph.
type BarGroupEdges struct {
	// TimeRange holds the value of the time_range edge.
	TimeRange *BarTimeRange `json:"time_range,omitempty"`
	// Records holds the value of the records edge.
	Records []*BarRecord `json:"records,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TimeRangeOrErr returns the TimeRange value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BarGroupEdges) TimeRangeOrErr() (*BarTimeRange, error) {
	if e.loadedTypes[0] {
		if e.TimeRange == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: bartimerange.Label}
		}
		return e.TimeRange, nil
	}
	return nil, &NotLoadedError{edge: "time_range"}
}

// RecordsOrErr returns the Records value or an error if the edge
// was not loaded in eager-loading.
func (e BarGroupEdges) RecordsOrErr() ([]*BarRecord, error) {
	if e.loadedTypes[1] {
		return e.Records, nil
	}
	return nil, &NotLoadedError{edge: "records"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BarGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bargroup.FieldID, bargroup.FieldCount, bargroup.FieldTimeRangeID:
			values[i] = new(sql.NullInt64)
		case bargroup.FieldFirst, bargroup.FieldLast:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BarGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BarGroup fields.
func (bg *BarGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bargroup.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bg.ID = int(value.Int64)
		case bargroup.FieldFirst:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first", values[i])
			} else if value.Valid {
				bg.First = value.Time
			}
		case bargroup.FieldLast:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last", values[i])
			} else if value.Valid {
				bg.Last = value.Time
			}
		case bargroup.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				bg.Count = int(value.Int64)
			}
		case bargroup.FieldTimeRangeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_range_id", values[i])
			} else if value.Valid {
				bg.TimeRangeID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTimeRange queries the "time_range" edge of the BarGroup entity.
func (bg *BarGroup) QueryTimeRange() *BarTimeRangeQuery {
	return (&BarGroupClient{config: bg.config}).QueryTimeRange(bg)
}

// QueryRecords queries the "records" edge of the BarGroup entity.
func (bg *BarGroup) QueryRecords() *BarRecordQuery {
	return (&BarGroupClient{config: bg.config}).QueryRecords(bg)
}

// Update returns a builder for updating this BarGroup.
// Note that you need to call BarGroup.Unwrap() before calling this method if this BarGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (bg *BarGroup) Update() *BarGroupUpdateOne {
	return (&BarGroupClient{config: bg.config}).UpdateOne(bg)
}

// Unwrap unwraps the BarGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bg *BarGroup) Unwrap() *BarGroup {
	_tx, ok := bg.config.driver.(*txDriver)
	if !ok {
		panic("ent: BarGroup is not a transactional entity")
	}
	bg.config.driver = _tx.drv
	return bg
}

// String implements the fmt.Stringer.
func (bg *BarGroup) String() string {
	var builder strings.Builder
	builder.WriteString("BarGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bg.ID))
	builder.WriteString("first=")
	builder.WriteString(bg.First.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last=")
	builder.WriteString(bg.Last.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", bg.Count))
	builder.WriteString(", ")
	builder.WriteString("time_range_id=")
	builder.WriteString(fmt.Sprintf("%v", bg.TimeRangeID))
	builder.WriteByte(')')
	return builder.String()
}

// BarGroups is a parsable slice of BarGroup.
type BarGroups []*BarGroup

func (bg BarGroups) config(cfg config) {
	for _i := range bg {
		bg[_i].config = cfg
	}
}
