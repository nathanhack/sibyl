// Code generated by ent, DO NOT EDIT.

package bartimerange

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the bartimerange type in the database.
	Label = "bar_time_range"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// FieldIntervalID holds the string denoting the interval_id field in the database.
	FieldIntervalID = "interval_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeInterval holds the string denoting the interval edge name in mutations.
	EdgeInterval = "interval"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// Table holds the table name of the bartimerange in the database.
	Table = "bar_time_ranges"
	// IntervalTable is the table that holds the interval relation/edge.
	IntervalTable = "bar_time_ranges"
	// IntervalInverseTable is the table name for the Interval entity.
	// It exists in this package in order to avoid circular dependency with the "interval" package.
	IntervalInverseTable = "intervals"
	// IntervalColumn is the table column denoting the interval relation/edge.
	IntervalColumn = "interval_id"
	// GroupsTable is the table that holds the groups relation/edge.
	GroupsTable = "bar_groups"
	// GroupsInverseTable is the table name for the BarGroup entity.
	// It exists in this package in order to avoid circular dependency with the "bargroup" package.
	GroupsInverseTable = "bar_groups"
	// GroupsColumn is the table column denoting the groups relation/edge.
	GroupsColumn = "time_range_id"
)

// Columns holds all SQL columns for bartimerange fields.
var Columns = []string{
	FieldID,
	FieldStart,
	FieldEnd,
	FieldCount,
	FieldIntervalID,
	FieldStatus,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCount holds the default value on creation for the "count" field.
	DefaultCount int
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending      Status = "pending"
	StatusCreated      Status = "created"
	StatusClean        Status = "clean"
	StatusConsolidated Status = "consolidated"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusCreated, StatusClean, StatusConsolidated:
		return nil
	default:
		return fmt.Errorf("bartimerange: invalid enum value for status field: %q", s)
	}
}
