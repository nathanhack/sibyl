// Code generated by ent, DO NOT EDIT.

package interval

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Interval {
	return predicate.Interval(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Interval {
	return predicate.Interval(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Interval {
	return predicate.Interval(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Interval {
	return predicate.Interval(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Interval {
	return predicate.Interval(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Interval {
	return predicate.Interval(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Interval {
	return predicate.Interval(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Interval {
	return predicate.Interval(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Interval {
	return predicate.Interval(sql.FieldLTE(FieldID, id))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Interval {
	return predicate.Interval(sql.FieldEQ(FieldActive, v))
}

// StockID applies equality check predicate on the "stock_id" field. It's identical to StockIDEQ.
func StockID(v int) predicate.Interval {
	return predicate.Interval(sql.FieldEQ(FieldStockID, v))
}

// DataSourceID applies equality check predicate on the "data_source_id" field. It's identical to DataSourceIDEQ.
func DataSourceID(v int) predicate.Interval {
	return predicate.Interval(sql.FieldEQ(FieldDataSourceID, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Interval {
	return predicate.Interval(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Interval {
	return predicate.Interval(sql.FieldNEQ(FieldActive, v))
}

// IntervalEQ applies the EQ predicate on the "interval" field.
func IntervalEQ(v Interval) predicate.Interval {
	return predicate.Interval(sql.FieldEQ(FieldInterval, v))
}

// IntervalNEQ applies the NEQ predicate on the "interval" field.
func IntervalNEQ(v Interval) predicate.Interval {
	return predicate.Interval(sql.FieldNEQ(FieldInterval, v))
}

// IntervalIn applies the In predicate on the "interval" field.
func IntervalIn(vs ...Interval) predicate.Interval {
	return predicate.Interval(sql.FieldIn(FieldInterval, vs...))
}

// IntervalNotIn applies the NotIn predicate on the "interval" field.
func IntervalNotIn(vs ...Interval) predicate.Interval {
	return predicate.Interval(sql.FieldNotIn(FieldInterval, vs...))
}

// StockIDEQ applies the EQ predicate on the "stock_id" field.
func StockIDEQ(v int) predicate.Interval {
	return predicate.Interval(sql.FieldEQ(FieldStockID, v))
}

// StockIDNEQ applies the NEQ predicate on the "stock_id" field.
func StockIDNEQ(v int) predicate.Interval {
	return predicate.Interval(sql.FieldNEQ(FieldStockID, v))
}

// StockIDIn applies the In predicate on the "stock_id" field.
func StockIDIn(vs ...int) predicate.Interval {
	return predicate.Interval(sql.FieldIn(FieldStockID, vs...))
}

// StockIDNotIn applies the NotIn predicate on the "stock_id" field.
func StockIDNotIn(vs ...int) predicate.Interval {
	return predicate.Interval(sql.FieldNotIn(FieldStockID, vs...))
}

// DataSourceIDEQ applies the EQ predicate on the "data_source_id" field.
func DataSourceIDEQ(v int) predicate.Interval {
	return predicate.Interval(sql.FieldEQ(FieldDataSourceID, v))
}

// DataSourceIDNEQ applies the NEQ predicate on the "data_source_id" field.
func DataSourceIDNEQ(v int) predicate.Interval {
	return predicate.Interval(sql.FieldNEQ(FieldDataSourceID, v))
}

// DataSourceIDIn applies the In predicate on the "data_source_id" field.
func DataSourceIDIn(vs ...int) predicate.Interval {
	return predicate.Interval(sql.FieldIn(FieldDataSourceID, vs...))
}

// DataSourceIDNotIn applies the NotIn predicate on the "data_source_id" field.
func DataSourceIDNotIn(vs ...int) predicate.Interval {
	return predicate.Interval(sql.FieldNotIn(FieldDataSourceID, vs...))
}

// HasDataSource applies the HasEdge predicate on the "data_source" edge.
func HasDataSource() predicate.Interval {
	return predicate.Interval(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DataSourceTable, DataSourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDataSourceWith applies the HasEdge predicate on the "data_source" edge with a given conditions (other predicates).
func HasDataSourceWith(preds ...predicate.DataSource) predicate.Interval {
	return predicate.Interval(func(s *sql.Selector) {
		step := newDataSourceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStock applies the HasEdge predicate on the "stock" edge.
func HasStock() predicate.Interval {
	return predicate.Interval(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StockTable, StockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStockWith applies the HasEdge predicate on the "stock" edge with a given conditions (other predicates).
func HasStockWith(preds ...predicate.Entity) predicate.Interval {
	return predicate.Interval(func(s *sql.Selector) {
		step := newStockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBars applies the HasEdge predicate on the "bars" edge.
func HasBars() predicate.Interval {
	return predicate.Interval(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BarsTable, BarsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBarsWith applies the HasEdge predicate on the "bars" edge with a given conditions (other predicates).
func HasBarsWith(preds ...predicate.BarTimeRange) predicate.Interval {
	return predicate.Interval(func(s *sql.Selector) {
		step := newBarsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTrades applies the HasEdge predicate on the "trades" edge.
func HasTrades() predicate.Interval {
	return predicate.Interval(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TradesTable, TradesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTradesWith applies the HasEdge predicate on the "trades" edge with a given conditions (other predicates).
func HasTradesWith(preds ...predicate.TradeTimeRange) predicate.Interval {
	return predicate.Interval(func(s *sql.Selector) {
		step := newTradesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Interval) predicate.Interval {
	return predicate.Interval(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Interval) predicate.Interval {
	return predicate.Interval(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Interval) predicate.Interval {
	return predicate.Interval(sql.NotPredicates(p))
}
