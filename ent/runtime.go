// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/nathanhack/sibyl/ent/bartimerange"
	"github.com/nathanhack/sibyl/ent/datasource"
	"github.com/nathanhack/sibyl/ent/entity"
	"github.com/nathanhack/sibyl/ent/interval"
	"github.com/nathanhack/sibyl/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bartimerangeFields := schema.BarTimeRange{}.Fields()
	_ = bartimerangeFields
	// bartimerangeDescCount is the schema descriptor for count field.
	bartimerangeDescCount := bartimerangeFields[2].Descriptor()
	// bartimerange.DefaultCount holds the default value on creation for the count field.
	bartimerange.DefaultCount = bartimerangeDescCount.Default.(int)
	// bartimerangeDescUpdateTime is the schema descriptor for update_time field.
	bartimerangeDescUpdateTime := bartimerangeFields[5].Descriptor()
	// bartimerange.DefaultUpdateTime holds the default value on creation for the update_time field.
	bartimerange.DefaultUpdateTime = bartimerangeDescUpdateTime.Default.(func() time.Time)
	// bartimerange.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	bartimerange.UpdateDefaultUpdateTime = bartimerangeDescUpdateTime.UpdateDefault.(func() time.Time)
	datasourceFields := schema.DataSource{}.Fields()
	_ = datasourceFields
	// datasourceDescName is the schema descriptor for name field.
	datasourceDescName := datasourceFields[0].Descriptor()
	// datasource.NameValidator is a validator for the "name" field. It is called by the builders before save.
	datasource.NameValidator = datasourceDescName.Validators[0].(func(string) error)
	// datasourceDescAddress is the schema descriptor for address field.
	datasourceDescAddress := datasourceFields[1].Descriptor()
	// datasource.DefaultAddress holds the default value on creation for the address field.
	datasource.DefaultAddress = datasourceDescAddress.Default.(string)
	entityFields := schema.Entity{}.Fields()
	_ = entityFields
	// entityDescTicker is the schema descriptor for ticker field.
	entityDescTicker := entityFields[1].Descriptor()
	// entity.TickerValidator is a validator for the "ticker" field. It is called by the builders before save.
	entity.TickerValidator = entityDescTicker.Validators[0].(func(string) error)
	// entityDescName is the schema descriptor for name field.
	entityDescName := entityFields[2].Descriptor()
	// entity.NameValidator is a validator for the "name" field. It is called by the builders before save.
	entity.NameValidator = entityDescName.Validators[0].(func(string) error)
	// entityDescDescription is the schema descriptor for description field.
	entityDescDescription := entityFields[3].Descriptor()
	// entity.DefaultDescription holds the default value on creation for the description field.
	entity.DefaultDescription = entityDescDescription.Default.(string)
	// entity.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	entity.DescriptionValidator = entityDescDescription.Validators[0].(func(string) error)
	// entityDescListDate is the schema descriptor for list_date field.
	entityDescListDate := entityFields[4].Descriptor()
	// entity.DefaultListDate holds the default value on creation for the list_date field.
	entity.DefaultListDate = entityDescListDate.Default.(time.Time)
	intervalFields := schema.Interval{}.Fields()
	_ = intervalFields
	// intervalDescActive is the schema descriptor for active field.
	intervalDescActive := intervalFields[0].Descriptor()
	// interval.DefaultActive holds the default value on creation for the active field.
	interval.DefaultActive = intervalDescActive.Default.(bool)
}
