// Code generated by ent, DO NOT EDIT.

package marketinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nathanhack/sibyl/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldLTE(FieldID, id))
}

// HoursStart applies equality check predicate on the "hours_start" field. It's identical to HoursStartEQ.
func HoursStart(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldEQ(FieldHoursStart, v))
}

// HoursEnd applies equality check predicate on the "hours_end" field. It's identical to HoursEndEQ.
func HoursEnd(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldEQ(FieldHoursEnd, v))
}

// HoursStartEQ applies the EQ predicate on the "hours_start" field.
func HoursStartEQ(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldEQ(FieldHoursStart, v))
}

// HoursStartNEQ applies the NEQ predicate on the "hours_start" field.
func HoursStartNEQ(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldNEQ(FieldHoursStart, v))
}

// HoursStartIn applies the In predicate on the "hours_start" field.
func HoursStartIn(vs ...time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldIn(FieldHoursStart, vs...))
}

// HoursStartNotIn applies the NotIn predicate on the "hours_start" field.
func HoursStartNotIn(vs ...time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldNotIn(FieldHoursStart, vs...))
}

// HoursStartGT applies the GT predicate on the "hours_start" field.
func HoursStartGT(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldGT(FieldHoursStart, v))
}

// HoursStartGTE applies the GTE predicate on the "hours_start" field.
func HoursStartGTE(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldGTE(FieldHoursStart, v))
}

// HoursStartLT applies the LT predicate on the "hours_start" field.
func HoursStartLT(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldLT(FieldHoursStart, v))
}

// HoursStartLTE applies the LTE predicate on the "hours_start" field.
func HoursStartLTE(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldLTE(FieldHoursStart, v))
}

// HoursEndEQ applies the EQ predicate on the "hours_end" field.
func HoursEndEQ(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldEQ(FieldHoursEnd, v))
}

// HoursEndNEQ applies the NEQ predicate on the "hours_end" field.
func HoursEndNEQ(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldNEQ(FieldHoursEnd, v))
}

// HoursEndIn applies the In predicate on the "hours_end" field.
func HoursEndIn(vs ...time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldIn(FieldHoursEnd, vs...))
}

// HoursEndNotIn applies the NotIn predicate on the "hours_end" field.
func HoursEndNotIn(vs ...time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldNotIn(FieldHoursEnd, vs...))
}

// HoursEndGT applies the GT predicate on the "hours_end" field.
func HoursEndGT(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldGT(FieldHoursEnd, v))
}

// HoursEndGTE applies the GTE predicate on the "hours_end" field.
func HoursEndGTE(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldGTE(FieldHoursEnd, v))
}

// HoursEndLT applies the LT predicate on the "hours_end" field.
func HoursEndLT(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldLT(FieldHoursEnd, v))
}

// HoursEndLTE applies the LTE predicate on the "hours_end" field.
func HoursEndLTE(v time.Time) predicate.MarketInfo {
	return predicate.MarketInfo(sql.FieldLTE(FieldHoursEnd, v))
}

// HasHours applies the HasEdge predicate on the "hours" edge.
func HasHours() predicate.MarketInfo {
	return predicate.MarketInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HoursTable, HoursColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHoursWith applies the HasEdge predicate on the "hours" edge with a given conditions (other predicates).
func HasHoursWith(preds ...predicate.MarketHours) predicate.MarketInfo {
	return predicate.MarketInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HoursInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HoursTable, HoursColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MarketInfo) predicate.MarketInfo {
	return predicate.MarketInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MarketInfo) predicate.MarketInfo {
	return predicate.MarketInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MarketInfo) predicate.MarketInfo {
	return predicate.MarketInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
