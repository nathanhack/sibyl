// Code generated by ent, DO NOT EDIT.

package marketinfo

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the marketinfo type in the database.
	Label = "market_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHoursStart holds the string denoting the hours_start field in the database.
	FieldHoursStart = "hours_start"
	// FieldHoursEnd holds the string denoting the hours_end field in the database.
	FieldHoursEnd = "hours_end"
	// EdgeHours holds the string denoting the hours edge name in mutations.
	EdgeHours = "hours"
	// Table holds the table name of the marketinfo in the database.
	Table = "market_infos"
	// HoursTable is the table that holds the hours relation/edge.
	HoursTable = "market_hours"
	// HoursInverseTable is the table name for the MarketHours entity.
	// It exists in this package in order to avoid circular dependency with the "markethours" package.
	HoursInverseTable = "market_hours"
	// HoursColumn is the table column denoting the hours relation/edge.
	HoursColumn = "market_info_hours"
)

// Columns holds all SQL columns for marketinfo fields.
var Columns = []string{
	FieldID,
	FieldHoursStart,
	FieldHoursEnd,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the MarketInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHoursStart orders the results by the hours_start field.
func ByHoursStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHoursStart, opts...).ToFunc()
}

// ByHoursEnd orders the results by the hours_end field.
func ByHoursEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHoursEnd, opts...).ToFunc()
}

// ByHoursCount orders the results by hours count.
func ByHoursCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHoursStep(), opts...)
	}
}

// ByHours orders the results by hours terms.
func ByHours(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHoursStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newHoursStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HoursInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HoursTable, HoursColumn),
	)
}
